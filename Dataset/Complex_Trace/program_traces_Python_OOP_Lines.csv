,Filename,Category,ExecutedLines,Code_Indices
0,Account_2,OOP_prepared,"[85, 3, 4, 5, 6, 7, 44, 45, 46, 86, 74, 77, 78]","class Customer: # 1
def __init__(self, ID, name, discount=None, gender=None): # 2
self.ID = ID # 3
self.name = name # 4
self.discount = discount # 5
if gender in ['m', 'f']: # 6
self.gender = gender # 7
elif gender is not None: # 8
print(""Gender must be 'm' or 'f'"") # 9
# 10
def getID(self): # 11
return self.ID # 12
# 13
def setID(self, ID): # 14
self.ID = ID # 15
# 16
def getName(self): # 17
return self.name # 18
# 19
def setName(self, name): # 20
self.name = name # 21
# 22
def getGender(self): # 23
return self.gender # 24
# 25
def setGender(self, gender): # 26
if gender in ['m', 'f']: # 27
self.gender = gender # 28
else: # 29
print(""Gender must be 'm' or 'f'"") # 30
# 31
def getDiscount(self): # 32
return self.discount # 33
# 34
def setDiscount(self, discount): # 35
self.discount = discount # 36
# 37
def __str__(self): # 38
return f""{self.name}({self.ID})"" # 39
# 40
# 41
class Account: # 42
def __init__(self, id, customer, balance=0.0): # 43
self.id = id # 44
self.customer = customer # 45
self.balance = balance # 46
# 47
def getId(self): # 48
return self.id # 49
# 50
def setId(self, id): # 51
self.id = id # 52
# 53
def getCustomer(self): # 54
return self.customer # 55
# 56
def setCustomer(self, customer): # 57
self.customer = customer # 58
# 59
def getBalance(self): # 60
return self.balance # 61
# 62
def setBalance(self, balance): # 63
self.balance = balance # 64
# 65
def getCustomerName(self): # 66
return self.customer.getName() # 67
# 68
def deposit(self, amount): # 69
self.balance += amount # 70
return self # 71
# 72
def withdraw(self, amount): # 73
if amount > self.balance: # 74
print(""Amount withdraw exceeds the current balance!"") # 75
else: # 76
self.balance -= amount # 77
return self # 78
# 79
def __str__(self): # 80
return f""{self.customer.getName()}({self.id}) balance=${self.balance:.2f}"" # 81
# 82
# 83
if __name__ == ""__main__"": # 84
account = Account(1, Customer(2, ""Ha Gia Kinh"", gender='m'), 10000.0) # 85
account.withdraw(5000) # 86"
1,Account_2,OOP_prepared,"[85, 3, 4, 5, 6, 7, 44, 45, 46, 86, 74, 75, 78]","class Customer: # 1
def __init__(self, ID, name, discount=None, gender=None): # 2
self.ID = ID # 3
self.name = name # 4
self.discount = discount # 5
if gender in ['m', 'f']: # 6
self.gender = gender # 7
elif gender is not None: # 8
print(""Gender must be 'm' or 'f'"") # 9
# 10
def getID(self): # 11
return self.ID # 12
# 13
def setID(self, ID): # 14
self.ID = ID # 15
# 16
def getName(self): # 17
return self.name # 18
# 19
def setName(self, name): # 20
self.name = name # 21
# 22
def getGender(self): # 23
return self.gender # 24
# 25
def setGender(self, gender): # 26
if gender in ['m', 'f']: # 27
self.gender = gender # 28
else: # 29
print(""Gender must be 'm' or 'f'"") # 30
# 31
def getDiscount(self): # 32
return self.discount # 33
# 34
def setDiscount(self, discount): # 35
self.discount = discount # 36
# 37
def __str__(self): # 38
return f""{self.name}({self.ID})"" # 39
# 40
# 41
class Account: # 42
def __init__(self, id, customer, balance=0.0): # 43
self.id = id # 44
self.customer = customer # 45
self.balance = balance # 46
# 47
def getId(self): # 48
return self.id # 49
# 50
def setId(self, id): # 51
self.id = id # 52
# 53
def getCustomer(self): # 54
return self.customer # 55
# 56
def setCustomer(self, customer): # 57
self.customer = customer # 58
# 59
def getBalance(self): # 60
return self.balance # 61
# 62
def setBalance(self, balance): # 63
self.balance = balance # 64
# 65
def getCustomerName(self): # 66
return self.customer.getName() # 67
# 68
def deposit(self, amount): # 69
self.balance += amount # 70
return self # 71
# 72
def withdraw(self, amount): # 73
if amount > self.balance: # 74
print(""Amount withdraw exceeds the current balance!"") # 75
else: # 76
self.balance -= amount # 77
return self # 78
# 79
def __str__(self): # 80
return f""{self.customer.getName()}({self.id}) balance=${self.balance:.2f}"" # 81
# 82
# 83
if __name__ == ""__main__"": # 84
account = Account(1, Customer(2, ""Ha Gia Kinh"", gender='m'), 10000.0) # 85
account.withdraw(15000) # 86"
2,Account_2,OOP_prepared,"[85, 3, 4, 5, 6, 7, 86, 3, 4, 5, 6, 7, 87, 3, 4, 5, 6, 7, 89, 44, 45, 46, 90, 44, 45, 46, 91, 44, 45, 46, 94, 74, 77, 78, 95, 70, 71, 96, 74, 75, 78, 97, 70, 71, 98, 74, 77, 78, 101, 33, 70, 71, 102, 33, 74, 77, 78, 103, 33, 70, 71]","class Customer: # 1
def __init__(self, ID, name, discount=None, gender=None): # 2
self.ID = ID # 3
self.name = name # 4
self.discount = discount # 5
if gender in ['m', 'f']: # 6
self.gender = gender # 7
elif gender is not None: # 8
print(""Gender must be 'm' or 'f'"") # 9
# 10
def getID(self): # 11
return self.ID # 12
# 13
def setID(self, ID): # 14
self.ID = ID # 15
# 16
def getName(self): # 17
return self.name # 18
# 19
def setName(self, name): # 20
self.name = name # 21
# 22
def getGender(self): # 23
return self.gender # 24
# 25
def setGender(self, gender): # 26
if gender in ['m', 'f']: # 27
self.gender = gender # 28
else: # 29
print(""Gender must be 'm' or 'f'"") # 30
# 31
def getDiscount(self): # 32
return self.discount # 33
# 34
def setDiscount(self, discount): # 35
self.discount = discount # 36
# 37
def __str__(self): # 38
return f""{self.name}({self.ID})"" # 39
# 40
# 41
class Account: # 42
def __init__(self, id, customer, balance=0.0): # 43
self.id = id # 44
self.customer = customer # 45
self.balance = balance # 46
# 47
def getId(self): # 48
return self.id # 49
# 50
def setId(self, id): # 51
self.id = id # 52
# 53
def getCustomer(self): # 54
return self.customer # 55
# 56
def setCustomer(self, customer): # 57
self.customer = customer # 58
# 59
def getBalance(self): # 60
return self.balance # 61
# 62
def setBalance(self, balance): # 63
self.balance = balance # 64
# 65
def getCustomerName(self): # 66
return self.customer.getName() # 67
# 68
def deposit(self, amount): # 69
self.balance += amount # 70
return self # 71
# 72
def withdraw(self, amount): # 73
if amount > self.balance: # 74
print(""Amount withdraw exceeds the current balance!"") # 75
else: # 76
self.balance -= amount # 77
return self # 78
# 79
def __str__(self): # 80
return f""{self.customer.getName()}({self.id}) balance=${self.balance:.2f}"" # 81
# 82
# 83
if __name__ == ""__main__"": # 84
customer1 = Customer(2, ""Ha Gia Kinh"", gender='m', discount=0.1) # 85
customer2 = Customer(3, ""Nguyen Thao"", gender='f', discount=0.05) # 86
customer3 = Customer(4, ""Pham Tuong"", gender='m', discount=0.2) # 87
# 88
account1 = Account(1, customer1, 10000.0) # 89
account2 = Account(2, customer2, 5000.0) # 90
account3 = Account(3, customer3, 2000.0) # 91
# 92
# 93
account1.withdraw(1000) # 94
account2.deposit(2000) # 95
account3.withdraw(2500) # 96
account2.deposit(1500) # 97
account3.withdraw(500) # 98
# 99
# 100
account1.deposit(5000 * (1 - customer1.getDiscount())) # 101
account2.withdraw(2000 * (1 - customer2.getDiscount())) # 102
account3.deposit(3000 * (1 - customer3.getDiscount())) # 103"
3,Account_2,OOP_prepared,"[86, 3, 4, 5, 6, 7, 87, 3, 4, 5, 6, 7, 88, 3, 4, 5, 6, 7, 90, 44, 45, 46, 91, 44, 45, 46, 92, 44, 45, 46, 95, 96, 74, 77, 78, 97, 33, 70, 71, 100, 74, 77, 78, 101, 70, 71]","class Customer: # 1
def __init__(self, ID, name, discount=None, gender=None): # 2
self.ID = ID # 3
self.name = name # 4
self.discount = discount # 5
if gender in ['m', 'f']: # 6
self.gender = gender # 7
elif gender is not None: # 8
print(""Gender must be 'm' or 'f'"") # 9
# 10
def getID(self): # 11
return self.ID # 12
# 13
def setID(self, ID): # 14
self.ID = ID # 15
# 16
def getName(self): # 17
return self.name # 18
# 19
def setName(self, name): # 20
self.name = name # 21
# 22
def getGender(self): # 23
return self.gender # 24
# 25
def setGender(self, gender): # 26
if gender in ['m', 'f']: # 27
self.gender = gender # 28
else: # 29
print(""Gender must be 'm' or 'f'"") # 30
# 31
def getDiscount(self): # 32
return self.discount # 33
# 34
def setDiscount(self, discount): # 35
self.discount = discount # 36
# 37
def __str__(self): # 38
return f""{self.name}({self.ID})"" # 39
# 40
# 41
class Account: # 42
def __init__(self, id, customer, balance=0.0): # 43
self.id = id # 44
self.customer = customer # 45
self.balance = balance # 46
# 47
def getId(self): # 48
return self.id # 49
# 50
def setId(self, id): # 51
self.id = id # 52
# 53
def getCustomer(self): # 54
return self.customer # 55
# 56
def setCustomer(self, customer): # 57
self.customer = customer # 58
# 59
def getBalance(self): # 60
return self.balance # 61
# 62
def setBalance(self, balance): # 63
self.balance = balance # 64
# 65
def getCustomerName(self): # 66
return self.customer.getName() # 67
# 68
def deposit(self, amount): # 69
self.balance += amount # 70
return self # 71
# 72
def withdraw(self, amount): # 73
if amount > self.balance: # 74
print(""Amount withdraw exceeds the current balance!"") # 75
else: # 76
self.balance -= amount # 77
return self # 78
# 79
def __str__(self): # 80
return f""{self.customer.getName()}({self.id}) balance=${self.balance:.2f}"" # 81
# 82
# 83
if __name__ == ""__main__"": # 84
# 85
customer1 = Customer(2, ""Ha Gia Kinh"", gender='m', discount=0.1) # 86
customer2 = Customer(3, ""Nguyen Thao"", gender='f', discount=0.05) # 87
customer3 = Customer(4, ""Pham Tuong"", gender='m', discount=0.2) # 88
# 89
account1 = Account(1, customer1, 10000.0) # 90
account2 = Account(2, customer2, 5000.0) # 91
account3 = Account(3, customer3, 2000.0) # 92
# 93
# 94
amount_to_transfer = 1000 # 95
account1.withdraw(amount_to_transfer) # 96
account2.deposit(amount_to_transfer * (1 - customer2.getDiscount())) # 97
# 98
# 99
account3.withdraw(500) # 100
account2.deposit(1500) # 101"
4,Account_2,OOP_prepared,"[86, 3, 4, 5, 6, 7, 87, 3, 4, 5, 6, 7, 88, 3, 4, 5, 6, 7, 90, 44, 45, 46, 91, 44, 45, 46, 92, 44, 45, 46, 95, 33, 70, 71, 96, 74, 77, 78, 97, 33, 70, 71, 100, 101, 74, 77, 78, 102, 33, 70, 71, 105, 70, 71, 106, 74, 77, 78]","class Customer: # 1
def __init__(self, ID, name, discount=None, gender=None): # 2
self.ID = ID # 3
self.name = name # 4
self.discount = discount # 5
if gender in ['m', 'f']: # 6
self.gender = gender # 7
elif gender is not None: # 8
print(""Gender must be 'm' or 'f'"") # 9
# 10
def getID(self): # 11
return self.ID # 12
# 13
def setID(self, ID): # 14
self.ID = ID # 15
# 16
def getName(self): # 17
return self.name # 18
# 19
def setName(self, name): # 20
self.name = name # 21
# 22
def getGender(self): # 23
return self.gender # 24
# 25
def setGender(self, gender): # 26
if gender in ['m', 'f']: # 27
self.gender = gender # 28
else: # 29
print(""Gender must be 'm' or 'f'"") # 30
# 31
def getDiscount(self): # 32
return self.discount # 33
# 34
def setDiscount(self, discount): # 35
self.discount = discount # 36
# 37
def __str__(self): # 38
return f""{self.name}({self.ID})"" # 39
# 40
# 41
class Account: # 42
def __init__(self, id, customer, balance=0.0): # 43
self.id = id # 44
self.customer = customer # 45
self.balance = balance # 46
# 47
def getId(self): # 48
return self.id # 49
# 50
def setId(self, id): # 51
self.id = id # 52
# 53
def getCustomer(self): # 54
return self.customer # 55
# 56
def setCustomer(self, customer): # 57
self.customer = customer # 58
# 59
def getBalance(self): # 60
return self.balance # 61
# 62
def setBalance(self, balance): # 63
self.balance = balance # 64
# 65
def getCustomerName(self): # 66
return self.customer.getName() # 67
# 68
def deposit(self, amount): # 69
self.balance += amount # 70
return self # 71
# 72
def withdraw(self, amount): # 73
if amount > self.balance: # 74
print(""Amount withdraw exceeds the current balance!"") # 75
else: # 76
self.balance -= amount # 77
return self # 78
# 79
def __str__(self): # 80
return f""{self.customer.getName()}({self.id}) balance=${self.balance:.2f}"" # 81
# 82
# 83
if __name__ == ""__main__"": # 84
# 85
customer1 = Customer(2, ""Ha Gia Kinh"", gender='m', discount=0.15) # 86
customer2 = Customer(3, ""Nguyen Thao"", gender='f', discount=0.1) # 87
customer3 = Customer(4, ""Pham Tuong"", gender='m', discount=0.05) # 88
# 89
account1 = Account(1, customer1, 10000.0) # 90
account2 = Account(2, customer2, 5000.0) # 91
account3 = Account(3, customer3, 3000.0) # 92
# 93
# 94
account1.deposit(2000 * (1 - customer1.getDiscount())) # 95
account2.withdraw(1000) # 96
account3.deposit(1500 * (1 - customer3.getDiscount())) # 97
# 98
# 99
amount_to_transfer = 500 # 100
account1.withdraw(amount_to_transfer) # 101
account2.deposit(amount_to_transfer * (1 - customer2.getDiscount())) # 102
# 103
# 104
account2.deposit(1000) # 105
account3.withdraw(1000) # 106"
5,Account,OOP_prepared,"[49, 3, 4, 5, 50, 3, 4, 5, 51, 37, 38, 39, 42]","class Account: # 1
def __init__(self, id, name, balance=0): # 2
self.id = id # 3
self.name = name # 4
self.balance = balance # 5
# 6
def get_id(self): # 7
return self.id # 8
# 9
def set_id(self, id): # 10
self.id = id # 11
# 12
def get_name(self): # 13
return self.name # 14
# 15
def set_name(self, name): # 16
self.name = name # 17
# 18
def get_balance(self): # 19
return self.balance # 20
# 21
def set_balance(self, balance): # 22
self.balance = balance # 23
# 24
def credit(self, amount): # 25
self.balance += amount # 26
return self.balance # 27
# 28
def debit(self, amount): # 29
if amount <= self.balance: # 30
self.balance -= amount # 31
else: # 32
print(""Amount exceeded balance"") # 33
return self.balance # 34
# 35
def transfer_to(self, account, amount): # 36
if amount <= self.balance: # 37
account.balance += amount # 38
self.balance -= amount # 39
else: # 40
print(""Amount exceeded balance"") # 41
return self.balance # 42
# 43
def __str__(self): # 44
return f""Account[id={self.id},name={self.name},balance={self.balance}]"" # 45
# 46
# 47
if __name__ == ""__main__"": # 48
a1 = Account(""A101"", ""Tan Ah Teck"", 88) # 49
a2 = Account(""A102"", ""Kumar"", 50) # 50
a1.transfer_to(a2, 20) # 51"
6,Account,OOP_prepared,"[51, 3, 4, 5, 52, 3, 4, 5, 53, 3, 4, 5, 56, 26, 27, 57, 26, 27, 58, 26, 27, 61, 37, 38, 39, 42, 62, 37, 38, 39, 42, 64, 30, 31, 34, 65, 30, 33, 34, 66, 30, 31, 34]","class Account: # 1
def __init__(self, id, name, balance=0): # 2
self.id = id # 3
self.name = name # 4
self.balance = balance # 5
# 6
def get_id(self): # 7
return self.id # 8
# 9
def set_id(self, id): # 10
self.id = id # 11
# 12
def get_name(self): # 13
return self.name # 14
# 15
def set_name(self, name): # 16
self.name = name # 17
# 18
def get_balance(self): # 19
return self.balance # 20
# 21
def set_balance(self, balance): # 22
self.balance = balance # 23
# 24
def credit(self, amount): # 25
self.balance += amount # 26
return self.balance # 27
# 28
def debit(self, amount): # 29
if amount <= self.balance: # 30
self.balance -= amount # 31
else: # 32
print(""Amount exceeded balance"") # 33
return self.balance # 34
# 35
def transfer_to(self, account, amount): # 36
if amount <= self.balance: # 37
account.balance += amount # 38
self.balance -= amount # 39
else: # 40
print(""Amount exceeded balance"") # 41
return self.balance # 42
# 43
def __str__(self): # 44
return f""Account[id={self.id},name={self.name},balance={self.balance}]"" # 45
# 46
# 47
# 48
if __name__ == ""__main__"": # 49
# 50
a1 = Account(""A101"", ""Tan Ah Teck"", 88) # 51
a2 = Account(""A102"", ""Kumar"", 50) # 52
a3 = Account(""A103"", ""Rajesh"", 1000) # 53
# 54
# 55
a1.credit(200) # 56
a2.credit(150) # 57
a3.credit(500) # 58
# 59
# 60
a1.transfer_to(a2, 50) # 61
a2.transfer_to(a3, 100) # 62
# 63
a1.debit(100) # 64
a2.debit(200) # 65
a3.debit(50) # 66"
7,Account,OOP_prepared,"[49, 3, 4, 5, 50, 3, 4, 5, 51, 3, 4, 5, 54, 30, 33, 34, 55, 30, 33, 34, 56, 30, 31, 34]","class Account: # 1
def __init__(self, id, name, balance=0): # 2
self.id = id # 3
self.name = name # 4
self.balance = balance # 5
# 6
def get_id(self): # 7
return self.id # 8
# 9
def set_id(self, id): # 10
self.id = id # 11
# 12
def get_name(self): # 13
return self.name # 14
# 15
def set_name(self, name): # 16
self.name = name # 17
# 18
def get_balance(self): # 19
return self.balance # 20
# 21
def set_balance(self, balance): # 22
self.balance = balance # 23
# 24
def credit(self, amount): # 25
self.balance += amount # 26
return self.balance # 27
# 28
def debit(self, amount): # 29
if amount <= self.balance: # 30
self.balance -= amount # 31
else: # 32
print(""Amount exceeded balance"") # 33
return self.balance # 34
# 35
def transfer_to(self, account, amount): # 36
if amount <= self.balance: # 37
account.balance += amount # 38
self.balance -= amount # 39
else: # 40
print(""Amount exceeded balance"") # 41
return self.balance # 42
# 43
def __str__(self): # 44
return f""Account[id={self.id},name={self.name},balance={self.balance}]"" # 45
# 46
# 47
if __name__ == ""__main__"": # 48
a1 = Account(""A101"", ""Tan Ah Teck"", 88) # 49
a2 = Account(""A102"", ""Kumar"", 50) # 50
a3 = Account(""A103"", ""Rajesh"", 1000) # 51
# 52
# 53
a1.debit(100) # 54
a2.debit(200) # 55
a3.debit(50) # 56"
8,Account,OOP_prepared,"[49, 3, 4, 5, 50, 3, 4, 5, 51, 3, 4, 5, 54, 26, 27, 55, 26, 27, 56, 26, 27, 59, 30, 31, 34, 60, 30, 31, 34, 61, 30, 31, 34, 64, 30, 33, 34]","class Account: # 1
def __init__(self, id, name, balance=0): # 2
self.id = id # 3
self.name = name # 4
self.balance = balance # 5
# 6
def get_id(self): # 7
return self.id # 8
# 9
def set_id(self, id): # 10
self.id = id # 11
# 12
def get_name(self): # 13
return self.name # 14
# 15
def set_name(self, name): # 16
self.name = name # 17
# 18
def get_balance(self): # 19
return self.balance # 20
# 21
def set_balance(self, balance): # 22
self.balance = balance # 23
# 24
def credit(self, amount): # 25
self.balance += amount # 26
return self.balance # 27
# 28
def debit(self, amount): # 29
if amount <= self.balance: # 30
self.balance -= amount # 31
else: # 32
print(""Amount exceeded balance"") # 33
return self.balance # 34
# 35
def transfer_to(self, account, amount): # 36
if amount <= self.balance: # 37
account.balance += amount # 38
self.balance -= amount # 39
else: # 40
print(""Amount exceeded balance"") # 41
return self.balance # 42
# 43
def __str__(self): # 44
return f""Account[id={self.id},name={self.name},balance={self.balance}]"" # 45
# 46
if __name__ == ""__main__"": # 47
# 48
a1 = Account(""A101"", ""Tan Ah Teck"", 88) # 49
a2 = Account(""A102"", ""Kumar"", 50) # 50
a3 = Account(""A103"", ""Rajesh"", 1000) # 51
# 52
# 53
a1.credit(200) # 54
a2.credit(150) # 55
a3.credit(500) # 56
# 57
# 58
a1.debit(100) # 59
a2.debit(75) # 60
a3.debit(300) # 61
# 62
# 63
a2.debit(200) # 64
# 65
# 66"
9,Account,OOP_prepared,"[51, 3, 4, 5, 52, 3, 4, 5, 55, 26, 27, 58, 30, 31, 34, 61, 30, 33, 34, 64, 37, 38, 39, 42, 67, 37, 41, 42, 70, 11, 71, 8, 74, 17, 75, 14, 78, 23, 79, 20]","class Account: # 1
def __init__(self, id, name, balance=0): # 2
self.id = id # 3
self.name = name # 4
self.balance = balance # 5
# 6
def get_id(self): # 7
return self.id # 8
# 9
def set_id(self, id): # 10
self.id = id # 11
# 12
def get_name(self): # 13
return self.name # 14
# 15
def set_name(self, name): # 16
self.name = name # 17
# 18
def get_balance(self): # 19
return self.balance # 20
# 21
def set_balance(self, balance): # 22
self.balance = balance # 23
# 24
def credit(self, amount): # 25
self.balance += amount # 26
return self.balance # 27
# 28
def debit(self, amount): # 29
if amount <= self.balance: # 30
self.balance -= amount # 31
else: # 32
print(""Amount exceeded balance"") # 33
return self.balance # 34
# 35
def transfer_to(self, account, amount): # 36
if amount <= self.balance: # 37
account.balance += amount # 38
self.balance -= amount # 39
else: # 40
print(""Amount exceeded balance"") # 41
return self.balance # 42
# 43
def __str__(self): # 44
return f""Account[id={self.id},name={self.name},balance={self.balance}]"" # 45
# 46
# 47
# 48
if __name__ == ""__main__"": # 49
# 50
a1 = Account(""A101"", ""Tan Ah Teck"", 88) # 51
a2 = Account(""A102"", ""Kumar"", 50) # 52
# 53
# 54
a1.credit(20) # 55
# 56
# 57
a1.debit(30) # 58
# 59
# 60
a1.debit(100) # 61
# 62
# 63
a1.transfer_to(a2, 10) # 64
# 65
# 66
a1.transfer_to(a2, 100) # 67
# 68
# 69
a1.set_id(""A105"") # 70
a1.get_id() # 71
# 72
# 73
a1.set_name(""John Doe"") # 74
a1.get_name() # 75
# 76
# 77
a1.set_balance(200) # 78
a1.get_balance() # 79"
10,AnimalAbstract,OOP_prepared,"[45, 10, 46, 23, 47, 19]","from abc import ABC, abstractmethod # 1
# 2
class Animal(ABC): # 3
@abstractmethod # 4
def greeting(self): # 5
pass # 6
# 7
class Dog(Animal): # 8
def __init__(self): # 9
pass # 10
# 11
def __str__(self): # 12
return f""Dog[{super().__str__()}]"" # 13
# 14
def greeting(self): # 15
print(""Woof!"") # 16
# 17
def greeting_dog(self, another): # 18
print(""Woooooooooof!"") # 19
# 20
class BigDog(Dog): # 21
def __init__(self): # 22
pass # 23
# 24
def __str__(self): # 25
return f""BigDog[{super().__str__()}]"" # 26
# 27
def greeting(self): # 28
print(""Woow!"") # 29
# 30
def greeting_dog(self, another): # 31
print(""Woooooowwwww!"") # 32
# 33
class Cat(Animal): # 34
def __init__(self): # 35
pass # 36
# 37
def __str__(self): # 38
return f""Cat[{super().__str__()}]"" # 39
# 40
def greeting(self): # 41
print(""Meow!"") # 42
# 43
if __name__ == ""__main__"": # 44
dog1 = Dog() # 45
bigDog1 = BigDog() # 46
dog1.greeting_dog(bigDog1) # 47"
11,AnimalAbstract,OOP_prepared,"[46, 23, 47, 10, 48, 32]","from abc import ABC, abstractmethod # 1
# 2
class Animal(ABC): # 3
@abstractmethod # 4
def greeting(self): # 5
pass # 6
# 7
class Dog(Animal): # 8
def __init__(self): # 9
pass # 10
# 11
def __str__(self): # 12
return f""Dog[{super().__str__()}]"" # 13
# 14
def greeting(self): # 15
print(""Woof!"") # 16
# 17
def greeting_dog(self, another): # 18
print(""Woooooooooof!"") # 19
# 20
class BigDog(Dog): # 21
def __init__(self): # 22
pass # 23
# 24
def __str__(self): # 25
return f""BigDog[{super().__str__()}]"" # 26
# 27
def greeting(self): # 28
print(""Woow!"") # 29
# 30
def greeting_dog(self, another): # 31
print(""Woooooowwwww!"") # 32
# 33
class Cat(Animal): # 34
def __init__(self): # 35
pass # 36
# 37
def __str__(self): # 38
return f""Cat[{super().__str__()}]"" # 39
# 40
def greeting(self): # 41
print(""Meow!"") # 42
# 43
# 44
if __name__ == ""__main__"": # 45
bigDog1 = BigDog() # 46
dog1 = Dog() # 47
bigDog1.greeting_dog(dog1) # 48"
12,AnimalAbstract,OOP_prepared,"[45, 23, 46, 23, 47, 32]","from abc import ABC, abstractmethod # 1
# 2
class Animal(ABC): # 3
@abstractmethod # 4
def greeting(self): # 5
pass # 6
# 7
class Dog(Animal): # 8
def __init__(self): # 9
pass # 10
# 11
def __str__(self): # 12
return f""Dog[{super().__str__()}]"" # 13
# 14
def greeting(self): # 15
print(""Woof!"") # 16
# 17
def greeting_dog(self, another): # 18
print(""Woooooooooof!"") # 19
# 20
class BigDog(Dog): # 21
def __init__(self): # 22
pass # 23
# 24
def __str__(self): # 25
return f""BigDog[{super().__str__()}]"" # 26
# 27
def greeting(self): # 28
print(""Woow!"") # 29
# 30
def greeting_dog(self, another): # 31
print(""Woooooowwwww!"") # 32
# 33
class Cat(Animal): # 34
def __init__(self): # 35
pass # 36
# 37
def __str__(self): # 38
return f""Cat[{super().__str__()}]"" # 39
# 40
def greeting(self): # 41
print(""Meow!"") # 42
# 43
if __name__ == ""__main__"": # 44
bigDog1 = BigDog() # 45
bigDog2 = BigDog() # 46
bigDog1.greeting_dog(bigDog2) # 47"
13,AnimalAbstract,OOP_prepared,"[45, 46, 47, 48]","from abc import ABC, abstractmethod # 1
# 2
class Animal(ABC): # 3
@abstractmethod # 4
def greeting(self): # 5
pass # 6
# 7
class Dog(Animal): # 8
def __init__(self): # 9
pass # 10
# 11
def __str__(self): # 12
return f""Dog[{super().__str__()}]"" # 13
# 14
def greeting(self): # 15
print(""Woof!"") # 16
# 17
def greeting_dog(self, another): # 18
print(""Woooooooooof!"") # 19
# 20
class BigDog(Dog): # 21
def __init__(self): # 22
pass # 23
# 24
def __str__(self): # 25
return f""BigDog[{super().__str__()}]"" # 26
# 27
def greeting(self): # 28
print(""Woow!"") # 29
# 30
def greeting_dog(self, another): # 31
print(""Woooooowwwww!"") # 32
# 33
class Cat(Animal): # 34
def __init__(self): # 35
pass # 36
# 37
def __str__(self): # 38
return f""Cat[{super().__str__()}]"" # 39
# 40
def greeting(self): # 41
print(""Meow!"") # 42
# 43
if __name__ == ""__main__"": # 44
try: # 45
animal = Animal() # 46
except TypeError as e: # 47
print(e) # 48"
14,AnimalAbstract,OOP_prepared,"[45, 36, 46, 23, 47, 32, 48, 49, 50, 51]","from abc import ABC, abstractmethod # 1
# 2
class Animal(ABC): # 3
@abstractmethod # 4
def greeting(self): # 5
pass # 6
# 7
class Dog(Animal): # 8
def __init__(self): # 9
pass # 10
# 11
def __str__(self): # 12
return f""Dog[{super().__str__()}]"" # 13
# 14
def greeting(self): # 15
print(""Woof!"") # 16
# 17
def greeting_dog(self, another): # 18
print(""Woooooooooof!"") # 19
# 20
class BigDog(Dog): # 21
def __init__(self): # 22
pass # 23
# 24
def __str__(self): # 25
return f""BigDog[{super().__str__()}]"" # 26
# 27
def greeting(self): # 28
print(""Woow!"") # 29
# 30
def greeting_dog(self, another): # 31
print(""Woooooowwwww!"") # 32
# 33
class Cat(Animal): # 34
def __init__(self): # 35
pass # 36
# 37
def __str__(self): # 38
return f""Cat[{super().__str__()}]"" # 39
# 40
def greeting(self): # 41
print(""Meow!"") # 42
# 43
if __name__ == ""__main__"": # 44
dog1 = Cat() # 45
bigDog1 = BigDog() # 46
bigDog1.greeting_dog(dog1) # 47
try: # 48
animal = Animal() # 49
except TypeError as e: # 50
print(e) # 51"
15,Animals,OOP_prepared,"[43, 19, 11, 3, 44, 25, 14, 6, 45, 22]","class Animal: # 1
def __init__(self, name=None): # 2
self.name = name # 3
# 4
def __str__(self): # 5
return f""Animal[name={self.name}]"" # 6
# 7
# 8
class Mammal(Animal): # 9
def __init__(self, name=None): # 10
super().__init__(name) # 11
# 12
def __str__(self): # 13
return f""Mammal[{super().__str__()}]"" # 14
# 15
# 16
class Cat(Mammal): # 17
def __init__(self, name=None): # 18
super().__init__(name) # 19
# 20
def greets(self): # 21
print(""Meow"") # 22
# 23
def __str__(self): # 24
return f""Cat[{super().__str__()}]"" # 25
# 26
# 27
class Dog(Mammal): # 28
def __init__(self, name=None): # 29
super().__init__(name) # 30
# 31
def greets(self): # 32
print(""Woof"") # 33
# 34
def greets_another_dog(self, another): # 35
print(""Woooof"") # 36
# 37
def __str__(self): # 38
return f""Dog[{super().__str__()}]"" # 39
# 40
# 41
if __name__ == ""__main__"": # 42
c1 = Cat(""Whiskers"") # 43
print(c1) # 44
c1.greets() # 45"
16,Animals,OOP_prepared,"[43, 30, 11, 3, 44, 39, 14, 6, 45, 33]","class Animal: # 1
def __init__(self, name=None): # 2
self.name = name # 3
# 4
def __str__(self): # 5
return f""Animal[name={self.name}]"" # 6
# 7
# 8
class Mammal(Animal): # 9
def __init__(self, name=None): # 10
super().__init__(name) # 11
# 12
def __str__(self): # 13
return f""Mammal[{super().__str__()}]"" # 14
# 15
# 16
class Cat(Mammal): # 17
def __init__(self, name=None): # 18
super().__init__(name) # 19
# 20
def greets(self): # 21
print(""Meow"") # 22
# 23
def __str__(self): # 24
return f""Cat[{super().__str__()}]"" # 25
# 26
# 27
class Dog(Mammal): # 28
def __init__(self, name=None): # 29
super().__init__(name) # 30
# 31
def greets(self): # 32
print(""Woof"") # 33
# 34
def greets_another_dog(self, another): # 35
print(""Woooof"") # 36
# 37
def __str__(self): # 38
return f""Dog[{super().__str__()}]"" # 39
# 40
# 41
if __name__ == ""__main__"": # 42
d1 = Dog(""Buddy"") # 43
print(d1) # 44
d1.greets() # 45"
17,Animals,OOP_prepared,"[43, 30, 11, 3, 44, 30, 11, 3, 45, 36]","class Animal: # 1
def __init__(self, name=None): # 2
self.name = name # 3
# 4
def __str__(self): # 5
return f""Animal[name={self.name}]"" # 6
# 7
# 8
class Mammal(Animal): # 9
def __init__(self, name=None): # 10
super().__init__(name) # 11
# 12
def __str__(self): # 13
return f""Mammal[{super().__str__()}]"" # 14
# 15
# 16
class Cat(Mammal): # 17
def __init__(self, name=None): # 18
super().__init__(name) # 19
# 20
def greets(self): # 21
print(""Meow"") # 22
# 23
def __str__(self): # 24
return f""Cat[{super().__str__()}]"" # 25
# 26
# 27
class Dog(Mammal): # 28
def __init__(self, name=None): # 29
super().__init__(name) # 30
# 31
def greets(self): # 32
print(""Woof"") # 33
# 34
def greets_another_dog(self, another): # 35
print(""Woooof"") # 36
# 37
def __str__(self): # 38
return f""Dog[{super().__str__()}]"" # 39
# 40
# 41
if __name__ == ""__main__"": # 42
d1 = Dog(""Max"") # 43
d2 = Dog(""Bella"") # 44
d1.greets_another_dog(d2) # 45"
18,Animals,OOP_prepared,"[43, 19, 11, 3, 44, 25, 14, 6, 45, 11, 3, 46, 14, 6]","class Animal: # 1
def __init__(self, name=None): # 2
self.name = name # 3
# 4
def __str__(self): # 5
return f""Animal[name={self.name}]"" # 6
# 7
# 8
class Mammal(Animal): # 9
def __init__(self, name=None): # 10
super().__init__(name) # 11
# 12
def __str__(self): # 13
return f""Mammal[{super().__str__()}]"" # 14
# 15
# 16
class Cat(Mammal): # 17
def __init__(self, name=None): # 18
super().__init__(name) # 19
# 20
def greets(self): # 21
print(""Meow"") # 22
# 23
def __str__(self): # 24
return f""Cat[{super().__str__()}]"" # 25
# 26
# 27
class Dog(Mammal): # 28
def __init__(self, name=None): # 29
super().__init__(name) # 30
# 31
def greets(self): # 32
print(""Woof"") # 33
# 34
def greets_another_dog(self, another): # 35
print(""Woooof"") # 36
# 37
def __str__(self): # 38
return f""Dog[{super().__str__()}]"" # 39
# 40
# 41
if __name__ == ""__main__"": # 42
c1 = Cat(""Luna"") # 43
print(c1) # 44
mammal1 = Mammal(""Generic Mammal"") # 45
print(mammal1) # 46"
19,Animals,OOP_prepared,"[43, 3, 44, 6, 45, 3, 46, 6]","class Animal: # 1
def __init__(self, name=None): # 2
self.name = name # 3
# 4
def __str__(self): # 5
return f""Animal[name={self.name}]"" # 6
# 7
# 8
class Mammal(Animal): # 9
def __init__(self, name=None): # 10
super().__init__(name) # 11
# 12
def __str__(self): # 13
return f""Mammal[{super().__str__()}]"" # 14
# 15
# 16
class Cat(Mammal): # 17
def __init__(self, name=None): # 18
super().__init__(name) # 19
# 20
def greets(self): # 21
print(""Meow"") # 22
# 23
def __str__(self): # 24
return f""Cat[{super().__str__()}]"" # 25
# 26
# 27
class Dog(Mammal): # 28
def __init__(self, name=None): # 29
super().__init__(name) # 30
# 31
def greets(self): # 32
print(""Woof"") # 33
# 34
def greets_another_dog(self, another): # 35
print(""Woooof"") # 36
# 37
def __str__(self): # 38
return f""Dog[{super().__str__()}]"" # 39
# 40
# 41
if __name__ == ""__main__"": # 42
animal = Animal() # 43
print(animal) # 44
animal_with_name = Animal(""Some Animal"") # 45
print(animal_with_name) # 46"
20,Animal,OOP_prepared,"[49, 11, 3, 50, 11, 3, 51, 20]","class Animal: # 1
def __init__(self, name=None): # 2
self.name = name # 3
# 4
def greets(self): # 5
raise NotImplementedError(""Subclasses should implement this!"") # 6
# 7
# 8
class Dog(Animal): # 9
def __init__(self, name=None): # 10
super().__init__(name) # 11
# 12
def __str__(self): # 13
return f""Dog[{super().__str__()}]"" # 14
# 15
def greets(self): # 16
print(""Woow"") # 17
# 18
def greets_dog(self, another): # 19
print(""Woooooow"") # 20
# 21
# 22
class BigDog(Dog): # 23
def __init__(self, name=None): # 24
super().__init__(name) # 25
# 26
def __str__(self): # 27
return f""BigDog[{super().__str__()}]"" # 28
# 29
def greets_dog(self, another): # 30
print(""Woooooow"") # 31
# 32
def greets_bigdog(self, another): # 33
print(""Wooooooooow"") # 34
# 35
# 36
class Cat(Animal): # 37
def __init__(self, name=None): # 38
super().__init__(name) # 39
# 40
def __str__(self): # 41
return f""Cat[{super().__str__()}]"" # 42
# 43
def greets(self): # 44
print(""Meow"") # 45
# 46
# 47
if __name__ == ""__main__"": # 48
d1 = Dog(""Buddy"") # 49
d2 = Dog(""Max"") # 50
d1.greets_dog(d2) # 51"
21,Animal,OOP_prepared,"[49, 11, 3, 50, 25, 11, 3, 51, 20]","class Animal: # 1
def __init__(self, name=None): # 2
self.name = name # 3
# 4
def greets(self): # 5
raise NotImplementedError(""Subclasses should implement this!"") # 6
# 7
# 8
class Dog(Animal): # 9
def __init__(self, name=None): # 10
super().__init__(name) # 11
# 12
def __str__(self): # 13
return f""Dog[{super().__str__()}]"" # 14
# 15
def greets(self): # 16
print(""Woow"") # 17
# 18
def greets_dog(self, another): # 19
print(""Woooooow"") # 20
# 21
# 22
class BigDog(Dog): # 23
def __init__(self, name=None): # 24
super().__init__(name) # 25
# 26
def __str__(self): # 27
return f""BigDog[{super().__str__()}]"" # 28
# 29
def greets_dog(self, another): # 30
print(""Woooooow"") # 31
# 32
def greets_bigdog(self, another): # 33
print(""Wooooooooow"") # 34
# 35
# 36
class Cat(Animal): # 37
def __init__(self, name=None): # 38
super().__init__(name) # 39
# 40
def __str__(self): # 41
return f""Cat[{super().__str__()}]"" # 42
# 43
def greets(self): # 44
print(""Meow"") # 45
# 46
# 47
if __name__ == ""__main__"": # 48
d1 = Dog(""Charlie"") # 49
bD1 = BigDog(""Rex"") # 50
d1.greets_dog(bD1) # 51"
22,Animal,OOP_prepared,"[49, 25, 11, 3, 50, 25, 11, 3, 51, 34]","class Animal: # 1
def __init__(self, name=None): # 2
self.name = name # 3
# 4
def greets(self): # 5
raise NotImplementedError(""Subclasses should implement this!"") # 6
# 7
# 8
class Dog(Animal): # 9
def __init__(self, name=None): # 10
super().__init__(name) # 11
# 12
def __str__(self): # 13
return f""Dog[{super().__str__()}]"" # 14
# 15
def greets(self): # 16
print(""Woow"") # 17
# 18
def greets_dog(self, another): # 19
print(""Woooooow"") # 20
# 21
# 22
class BigDog(Dog): # 23
def __init__(self, name=None): # 24
super().__init__(name) # 25
# 26
def __str__(self): # 27
return f""BigDog[{super().__str__()}]"" # 28
# 29
def greets_dog(self, another): # 30
print(""Woooooow"") # 31
# 32
def greets_bigdog(self, another): # 33
print(""Wooooooooow"") # 34
# 35
# 36
class Cat(Animal): # 37
def __init__(self, name=None): # 38
super().__init__(name) # 39
# 40
def __str__(self): # 41
return f""Cat[{super().__str__()}]"" # 42
# 43
def greets(self): # 44
print(""Meow"") # 45
# 46
# 47
if __name__ == ""__main__"": # 48
bD1 = BigDog(""Zeus"") # 49
bD2 = BigDog(""Apollo"") # 50
bD1.greets_bigdog(bD2) # 51"
23,Animal,OOP_prepared,"[49, 39, 3, 50, 51, 45]","class Animal: # 1
def __init__(self, name=None): # 2
self.name = name # 3
# 4
def greets(self): # 5
raise NotImplementedError(""Subclasses should implement this!"") # 6
# 7
# 8
class Dog(Animal): # 9
def __init__(self, name=None): # 10
super().__init__(name) # 11
# 12
def __str__(self): # 13
return f""Dog[{super().__str__()}]"" # 14
# 15
def greets(self): # 16
print(""Woow"") # 17
# 18
def greets_dog(self, another): # 19
print(""Woooooow"") # 20
# 21
# 22
class BigDog(Dog): # 23
def __init__(self, name=None): # 24
super().__init__(name) # 25
# 26
def __str__(self): # 27
return f""BigDog[{super().__str__()}]"" # 28
# 29
def greets_dog(self, another): # 30
print(""Woooooow"") # 31
# 32
def greets_bigdog(self, another): # 33
print(""Wooooooooow"") # 34
# 35
# 36
class Cat(Animal): # 37
def __init__(self, name=None): # 38
super().__init__(name) # 39
# 40
def __str__(self): # 41
return f""Cat[{super().__str__()}]"" # 42
# 43
def greets(self): # 44
print(""Meow"") # 45
# 46
# 47
if __name__ == ""__main__"": # 48
c1 = Cat(""Whiskers"") # 49
print(f""Cat's name: {c1.name}"") # 50
c1.greets() # 51"
24,Animal,OOP_prepared,"[49, 3, 50, 51, 6, 52, 53]","class Animal: # 1
def __init__(self, name=None): # 2
self.name = name # 3
# 4
def greets(self): # 5
raise NotImplementedError(""Subclasses should implement this!"") # 6
# 7
# 8
class Dog(Animal): # 9
def __init__(self, name=None): # 10
super().__init__(name) # 11
# 12
def __str__(self): # 13
return f""Dog[{super().__str__()}]"" # 14
# 15
def greets(self): # 16
print(""Woow"") # 17
# 18
def greets_dog(self, another): # 19
print(""Woooooow"") # 20
# 21
# 22
class BigDog(Dog): # 23
def __init__(self, name=None): # 24
super().__init__(name) # 25
# 26
def __str__(self): # 27
return f""BigDog[{super().__str__()}]"" # 28
# 29
def greets_dog(self, another): # 30
print(""Woooooow"") # 31
# 32
def greets_bigdog(self, another): # 33
print(""Wooooooooow"") # 34
# 35
# 36
class Cat(Animal): # 37
def __init__(self, name=None): # 38
super().__init__(name) # 39
# 40
def __str__(self): # 41
return f""Cat[{super().__str__()}]"" # 42
# 43
def greets(self): # 44
print(""Meow"") # 45
# 46
# 47
if __name__ == ""__main__"": # 48
a = Animal(""Generic Animal"") # 49
try: # 50
a.greets() # 51
except NotImplementedError as e: # 52
print(e) # 53"
25,Ball,OOP_prepared,"[54, 3, 4, 5, 6, 7, 55, 40, 41, 56, 50]","class Ball: # 1
def __init__(self, x, y, radius, xDelta, yDelta): # 2
self.x = x # 3
self.y = y # 4
self.radius = radius # 5
self.xDelta = xDelta # 6
self.yDelta = yDelta # 7
# 8
def getX(self): # 9
return self.x # 10
# 11
def setX(self, x): # 12
self.x = x # 13
# 14
def getY(self): # 15
return self.y # 16
# 17
def setY(self, y): # 18
self.y = y # 19
# 20
def getRadius(self): # 21
return self.radius # 22
# 23
def setRadius(self, radius): # 24
self.radius = radius # 25
# 26
def getXDelta(self): # 27
return self.xDelta # 28
# 29
def setXDelta(self, xDelta): # 30
self.xDelta = xDelta # 31
# 32
def getYDelta(self): # 33
return self.yDelta # 34
# 35
def setYDelta(self, yDelta): # 36
self.yDelta = yDelta # 37
# 38
def move(self): # 39
self.x += self.xDelta # 40
self.y += self.yDelta # 41
# 42
def reflectHorizontal(self): # 43
self.xDelta = -self.xDelta # 44
# 45
def reflectVertical(self): # 46
self.yDelta = -self.yDelta # 47
# 48
def __str__(self): # 49
return f""Ball[({self.x},{self.y}),speed=({self.xDelta},{self.yDelta})]"" # 50
# 51
# 52
if __name__ == ""__main__"": # 53
ball = Ball(1.1, 2.2, 10, 3.3, 4.4) # 54
ball.move() # 55
print(ball) # 56"
26,Ball,OOP_prepared,"[53, 3, 4, 5, 6, 7, 54, 40, 41, 55, 50, 56, 44, 57, 47, 58, 40, 41]","class Ball: # 1
def __init__(self, x, y, radius, xDelta, yDelta): # 2
self.x = x # 3
self.y = y # 4
self.radius = radius # 5
self.xDelta = xDelta # 6
self.yDelta = yDelta # 7
# 8
def getX(self): # 9
return self.x # 10
# 11
def setX(self, x): # 12
self.x = x # 13
# 14
def getY(self): # 15
return self.y # 16
# 17
def setY(self, y): # 18
self.y = y # 19
# 20
def getRadius(self): # 21
return self.radius # 22
# 23
def setRadius(self, radius): # 24
self.radius = radius # 25
# 26
def getXDelta(self): # 27
return self.xDelta # 28
# 29
def setXDelta(self, xDelta): # 30
self.xDelta = xDelta # 31
# 32
def getYDelta(self): # 33
return self.yDelta # 34
# 35
def setYDelta(self, yDelta): # 36
self.yDelta = yDelta # 37
# 38
def move(self): # 39
self.x += self.xDelta # 40
self.y += self.yDelta # 41
# 42
def reflectHorizontal(self): # 43
self.xDelta = -self.xDelta # 44
# 45
def reflectVertical(self): # 46
self.yDelta = -self.yDelta # 47
# 48
def __str__(self): # 49
return f""Ball[({self.x},{self.y}),speed=({self.xDelta},{self.yDelta})]"" # 50
# 51
if __name__ == ""__main__"": # 52
ball = Ball(5.0, 5.0, 2, 1.0, 1.0) # 53
ball.move() # 54
print(ball) # 55
ball.reflectHorizontal() # 56
ball.reflectVertical() # 57
ball.move() # 58"
27,Ball,OOP_prepared,"[54, 3, 4, 5, 6, 7, 55, 44, 56, 40, 41, 57, 47, 58, 40, 41, 59, 50]","class Ball: # 1
def __init__(self, x, y, radius, xDelta, yDelta): # 2
self.x = x # 3
self.y = y # 4
self.radius = radius # 5
self.xDelta = xDelta # 6
self.yDelta = yDelta # 7
# 8
def getX(self): # 9
return self.x # 10
# 11
def setX(self, x): # 12
self.x = x # 13
# 14
def getY(self): # 15
return self.y # 16
# 17
def setY(self, y): # 18
self.y = y # 19
# 20
def getRadius(self): # 21
return self.radius # 22
# 23
def setRadius(self, radius): # 24
self.radius = radius # 25
# 26
def getXDelta(self): # 27
return self.xDelta # 28
# 29
def setXDelta(self, xDelta): # 30
self.xDelta = xDelta # 31
# 32
def getYDelta(self): # 33
return self.yDelta # 34
# 35
def setYDelta(self, yDelta): # 36
self.yDelta = yDelta # 37
# 38
def move(self): # 39
self.x += self.xDelta # 40
self.y += self.yDelta # 41
# 42
def reflectHorizontal(self): # 43
self.xDelta = -self.xDelta # 44
# 45
def reflectVertical(self): # 46
self.yDelta = -self.yDelta # 47
# 48
def __str__(self): # 49
return f""Ball[({self.x},{self.y}),speed=({self.xDelta},{self.yDelta})]"" # 50
# 51
# 52
if __name__ == ""__main__"": # 53
ball2 = Ball(10.0, 10.0, 5, -1.5, -1.5) # 54
ball2.reflectHorizontal() # 55
ball2.move() # 56
ball2.reflectVertical() # 57
ball2.move() # 58
print(ball2) # 59"
28,Ball,OOP_prepared,"[54, 3, 4, 5, 6, 7, 55, 56, 40, 41, 55, 56, 40, 41, 55, 56, 40, 41, 55, 57, 44, 58, 40, 41, 59, 47, 60, 50]","class Ball: # 1
def __init__(self, x, y, radius, xDelta, yDelta): # 2
self.x = x # 3
self.y = y # 4
self.radius = radius # 5
self.xDelta = xDelta # 6
self.yDelta = yDelta # 7
# 8
def getX(self): # 9
return self.x # 10
# 11
def setX(self, x): # 12
self.x = x # 13
# 14
def getY(self): # 15
return self.y # 16
# 17
def setY(self, y): # 18
self.y = y # 19
# 20
def getRadius(self): # 21
return self.radius # 22
# 23
def setRadius(self, radius): # 24
self.radius = radius # 25
# 26
def getXDelta(self): # 27
return self.xDelta # 28
# 29
def setXDelta(self, xDelta): # 30
self.xDelta = xDelta # 31
# 32
def getYDelta(self): # 33
return self.yDelta # 34
# 35
def setYDelta(self, yDelta): # 36
self.yDelta = yDelta # 37
# 38
def move(self): # 39
self.x += self.xDelta # 40
self.y += self.yDelta # 41
# 42
def reflectHorizontal(self): # 43
self.xDelta = -self.xDelta # 44
# 45
def reflectVertical(self): # 46
self.yDelta = -self.yDelta # 47
# 48
def __str__(self): # 49
return f""Ball[({self.x},{self.y}),speed=({self.xDelta},{self.yDelta})]"" # 50
# 51
# 52
if __name__ == ""__main__"": # 53
ball3 = Ball(50.0, 50.0, 4, 5.0, -5.0) # 54
for _ in range(3): # 55
ball3.move() # 56
ball3.reflectHorizontal() # 57
ball3.move() # 58
ball3.reflectVertical() # 59
print(ball3) # 60"
29,Ball,OOP_prepared,"[55, 3, 4, 5, 6, 7, 56, 50, 57, 40, 41, 58, 50]","class Ball: # 1
def __init__(self, x, y, radius, xDelta, yDelta): # 2
self.x = x # 3
self.y = y # 4
self.radius = radius # 5
self.xDelta = xDelta # 6
self.yDelta = yDelta # 7
# 8
def getX(self): # 9
return self.x # 10
# 11
def setX(self, x): # 12
self.x = x # 13
# 14
def getY(self): # 15
return self.y # 16
# 17
def setY(self, y): # 18
self.y = y # 19
# 20
def getRadius(self): # 21
return self.radius # 22
# 23
def setRadius(self, radius): # 24
self.radius = radius # 25
# 26
def getXDelta(self): # 27
return self.xDelta # 28
# 29
def setXDelta(self, xDelta): # 30
self.xDelta = xDelta # 31
# 32
def getYDelta(self): # 33
return self.yDelta # 34
# 35
def setYDelta(self, yDelta): # 36
self.yDelta = yDelta # 37
# 38
def move(self): # 39
self.x += self.xDelta # 40
self.y += self.yDelta # 41
# 42
def reflectHorizontal(self): # 43
self.xDelta = -self.xDelta # 44
# 45
def reflectVertical(self): # 46
self.yDelta = -self.yDelta # 47
# 48
def __str__(self): # 49
return f""Ball[({self.x},{self.y}),speed=({self.xDelta},{self.yDelta})]"" # 50
# 51
# 52
if __name__ == ""__main__"": # 53
# 54
ball1 = Ball(0.0, 0.0, 3, 2.0, 3.0) # 55
print(ball1) # 56
ball1.move() # 57
print(ball1) # 58"
30,Book1_,OOP_prepared,"[71, 3, 4, 5, 6, 37, 38, 39, 40, 72, 67, 32]","class Author: # 1
def __init__(self, name=None, email=None, gender=None): # 2
self.name = name # 3
self.email = email # 4
if gender in ('m', 'f'): # 5
self.gender = gender # 6
else: # 7
print(""Gender must be 'm' or 'f'"") # 8
# 9
def get_name(self): # 10
return self.name # 11
# 12
def set_name(self, name): # 13
self.name = name # 14
# 15
def get_email(self): # 16
return self.email # 17
# 18
def set_email(self, email): # 19
self.email = email # 20
# 21
def get_gender(self): # 22
return self.gender # 23
# 24
def set_gender(self, gender): # 25
if gender in ('m', 'f'): # 26
self.gender = gender # 27
else: # 28
print(""Gender must be 'm' or 'f'"") # 29
# 30
def __str__(self): # 31
return f""Author[name={self.name}, email={self.email}, gender={self.gender}]"" # 32
# 33
# 34
class Book: # 35
def __init__(self, name, author, price, qty=0): # 36
self.name = name # 37
self.author = author # 38
self.price = price # 39
self.qty = qty # 40
# 41
def get_name(self): # 42
return self.name # 43
# 44
def set_name(self, name): # 45
self.name = name # 46
# 47
def get_author(self): # 48
return self.author # 49
# 50
def set_author(self, author): # 51
self.author = author # 52
# 53
def get_price(self): # 54
return self.price # 55
# 56
def set_price(self, price): # 57
self.price = price # 58
# 59
def get_qty(self): # 60
return self.qty # 61
# 62
def set_qty(self, qty): # 63
self.qty = qty # 64
# 65
def __str__(self): # 66
return f""Book[name={self.name}, {self.author}, price={self.price}, qty={self.qty}]"" # 67
# 68
# 69
if __name__ == ""__main__"": # 70
book = Book(""Python"", Author(""Gia Kinh"", ""giakinh2000@gmail.com"", 'm'), 20.4, 6) # 71
print(book) # 72"
31,Book1_,OOP_prepared,"[71, 3, 4, 5, 6, 72, 37, 38, 39, 40, 73, 67, 32]","class Author: # 1
def __init__(self, name=None, email=None, gender=None): # 2
self.name = name # 3
self.email = email # 4
if gender in ('m', 'f'): # 5
self.gender = gender # 6
else: # 7
print(""Gender must be 'm' or 'f'"") # 8
# 9
def get_name(self): # 10
return self.name # 11
# 12
def set_name(self, name): # 13
self.name = name # 14
# 15
def get_email(self): # 16
return self.email # 17
# 18
def set_email(self, email): # 19
self.email = email # 20
# 21
def get_gender(self): # 22
return self.gender # 23
# 24
def set_gender(self, gender): # 25
if gender in ('m', 'f'): # 26
self.gender = gender # 27
else: # 28
print(""Gender must be 'm' or 'f'"") # 29
# 30
def __str__(self): # 31
return f""Author[name={self.name}, email={self.email}, gender={self.gender}]"" # 32
# 33
# 34
class Book: # 35
def __init__(self, name, author, price, qty=0): # 36
self.name = name # 37
self.author = author # 38
self.price = price # 39
self.qty = qty # 40
# 41
def get_name(self): # 42
return self.name # 43
# 44
def set_name(self, name): # 45
self.name = name # 46
# 47
def get_author(self): # 48
return self.author # 49
# 50
def set_author(self, author): # 51
self.author = author # 52
# 53
def get_price(self): # 54
return self.price # 55
# 56
def set_price(self, price): # 57
self.price = price # 58
# 59
def get_qty(self): # 60
return self.qty # 61
# 62
def set_qty(self, qty): # 63
self.qty = qty # 64
# 65
def __str__(self): # 66
return f""Book[name={self.name}, {self.author}, price={self.price}, qty={self.qty}]"" # 67
# 68
# 69
if __name__ == ""__main__"": # 70
author1 = Author(""Alice Johnson"", ""alice.johnson@example.com"", 'f') # 71
book1 = Book(""Python Programming"", author1, 20.0, 5) # 72
print(book1) # 73"
32,Book1_,OOP_prepared,"[71, 3, 4, 5, 6, 72, 37, 38, 39, 40, 73, 64, 74, 67, 32]","class Author: # 1
def __init__(self, name=None, email=None, gender=None): # 2
self.name = name # 3
self.email = email # 4
if gender in ('m', 'f'): # 5
self.gender = gender # 6
else: # 7
print(""Gender must be 'm' or 'f'"") # 8
# 9
def get_name(self): # 10
return self.name # 11
# 12
def set_name(self, name): # 13
self.name = name # 14
# 15
def get_email(self): # 16
return self.email # 17
# 18
def set_email(self, email): # 19
self.email = email # 20
# 21
def get_gender(self): # 22
return self.gender # 23
# 24
def set_gender(self, gender): # 25
if gender in ('m', 'f'): # 26
self.gender = gender # 27
else: # 28
print(""Gender must be 'm' or 'f'"") # 29
# 30
def __str__(self): # 31
return f""Author[name={self.name}, email={self.email}, gender={self.gender}]"" # 32
# 33
# 34
class Book: # 35
def __init__(self, name, author, price, qty=0): # 36
self.name = name # 37
self.author = author # 38
self.price = price # 39
self.qty = qty # 40
# 41
def get_name(self): # 42
return self.name # 43
# 44
def set_name(self, name): # 45
self.name = name # 46
# 47
def get_author(self): # 48
return self.author # 49
# 50
def set_author(self, author): # 51
self.author = author # 52
# 53
def get_price(self): # 54
return self.price # 55
# 56
def set_price(self, price): # 57
self.price = price # 58
# 59
def get_qty(self): # 60
return self.qty # 61
# 62
def set_qty(self, qty): # 63
self.qty = qty # 64
# 65
def __str__(self): # 66
return f""Book[name={self.name}, {self.author}, price={self.price}, qty={self.qty}]"" # 67
# 68
# 69
if __name__ == ""__main__"": # 70
author2 = Author(""Bob Smith"", ""bob.smith@example.com"", 'm') # 71
book2 = Book(""Advanced Python"", author2, 25.0, 3) # 72
book2.set_qty(8) # 73
print(book2) # 74"
33,Book1_,OOP_prepared,"[71, 3, 4, 5, 6, 72, 37, 38, 39, 40, 73, 46, 74, 58, 75, 67, 32]","class Author: # 1
def __init__(self, name=None, email=None, gender=None): # 2
self.name = name # 3
self.email = email # 4
if gender in ('m', 'f'): # 5
self.gender = gender # 6
else: # 7
print(""Gender must be 'm' or 'f'"") # 8
# 9
def get_name(self): # 10
return self.name # 11
# 12
def set_name(self, name): # 13
self.name = name # 14
# 15
def get_email(self): # 16
return self.email # 17
# 18
def set_email(self, email): # 19
self.email = email # 20
# 21
def get_gender(self): # 22
return self.gender # 23
# 24
def set_gender(self, gender): # 25
if gender in ('m', 'f'): # 26
self.gender = gender # 27
else: # 28
print(""Gender must be 'm' or 'f'"") # 29
# 30
def __str__(self): # 31
return f""Author[name={self.name}, email={self.email}, gender={self.gender}]"" # 32
# 33
# 34
class Book: # 35
def __init__(self, name, author, price, qty=0): # 36
self.name = name # 37
self.author = author # 38
self.price = price # 39
self.qty = qty # 40
# 41
def get_name(self): # 42
return self.name # 43
# 44
def set_name(self, name): # 45
self.name = name # 46
# 47
def get_author(self): # 48
return self.author # 49
# 50
def set_author(self, author): # 51
self.author = author # 52
# 53
def get_price(self): # 54
return self.price # 55
# 56
def set_price(self, price): # 57
self.price = price # 58
# 59
def get_qty(self): # 60
return self.qty # 61
# 62
def set_qty(self, qty): # 63
self.qty = qty # 64
# 65
def __str__(self): # 66
return f""Book[name={self.name}, {self.author}, price={self.price}, qty={self.qty}]"" # 67
# 68
# 69
if __name__ == ""__main__"": # 70
author3 = Author(""Charlie Brown"", ""charlie.brown@example.com"", 'm') # 71
book3 = Book(""Data Structures"", author3, 30.0, 0) # 72
book3.set_name(""Algorithms and Data Structures"") # 73
book3.set_price(35.0) # 74
print(book3) # 75"
34,Book1_,OOP_prepared,"[71, 3, 4, 5, 6, 72, 37, 38, 39, 40, 73, 64, 74, 58, 75, 67, 32]","class Author: # 1
def __init__(self, name=None, email=None, gender=None): # 2
self.name = name # 3
self.email = email # 4
if gender in ('m', 'f'): # 5
self.gender = gender # 6
else: # 7
print(""Gender must be 'm' or 'f'"") # 8
# 9
def get_name(self): # 10
return self.name # 11
# 12
def set_name(self, name): # 13
self.name = name # 14
# 15
def get_email(self): # 16
return self.email # 17
# 18
def set_email(self, email): # 19
self.email = email # 20
# 21
def get_gender(self): # 22
return self.gender # 23
# 24
def set_gender(self, gender): # 25
if gender in ('m', 'f'): # 26
self.gender = gender # 27
else: # 28
print(""Gender must be 'm' or 'f'"") # 29
# 30
def __str__(self): # 31
return f""Author[name={self.name}, email={self.email}, gender={self.gender}]"" # 32
# 33
# 34
class Book: # 35
def __init__(self, name, author, price, qty=0): # 36
self.name = name # 37
self.author = author # 38
self.price = price # 39
self.qty = qty # 40
# 41
def get_name(self): # 42
return self.name # 43
# 44
def set_name(self, name): # 45
self.name = name # 46
# 47
def get_author(self): # 48
return self.author # 49
# 50
def set_author(self, author): # 51
self.author = author # 52
# 53
def get_price(self): # 54
return self.price # 55
# 56
def set_price(self, price): # 57
self.price = price # 58
# 59
def get_qty(self): # 60
return self.qty # 61
# 62
def set_qty(self, qty): # 63
self.qty = qty # 64
# 65
def __str__(self): # 66
return f""Book[name={self.name}, {self.author}, price={self.price}, qty={self.qty}]"" # 67
# 68
# 69
if __name__ == ""__main__"": # 70
author4 = Author(""Dana White"", ""dana.white@example.com"", 'f') # 71
book4 = Book(""Machine Learning"", author4, 50.0, 20) # 72
book4.set_qty(25) # 73
book4.set_price(45.0) # 74
print(book4) # 75"
35,Book_2,OOP_prepared,"[75, 3, 4, 5, 6, 3, 4, 5, 6, 37, 38, 39, 40, 76, 67, 67, 11, 67, 11, 67]","class Author: # 1
def __init__(self, name=None, email=None, gender=None): # 2
self.name = name # 3
self.email = email # 4
if gender in ['m', 'f']: # 5
self.gender = gender # 6
else: # 7
print(""Gender must be 'm' or 'f'"") # 8
# 9
def get_name(self): # 10
return self.name # 11
# 12
def set_name(self, name): # 13
self.name = name # 14
# 15
def get_email(self): # 16
return self.email # 17
# 18
def set_email(self, email): # 19
self.email = email # 20
# 21
def get_gender(self): # 22
return self.gender # 23
# 24
def set_gender(self, gender): # 25
if gender in ['m', 'f']: # 26
self.gender = gender # 27
else: # 28
print(""Gender must be 'm' or 'f'"") # 29
# 30
def __str__(self): # 31
return f""Author[name={self.name}, email={self.email}, gender={self.gender}]"" # 32
# 33
# 34
class Book: # 35
def __init__(self, name=None, authors=None, price=0.0, qty=0): # 36
self.name = name # 37
self.authors = authors if authors is not None else [] # 38
self.price = price # 39
self.qty = qty # 40
# 41
def get_name(self): # 42
return self.name # 43
# 44
def set_name(self, name): # 45
self.name = name # 46
# 47
def get_authors(self): # 48
return self.authors # 49
# 50
def set_authors(self, authors): # 51
self.authors = authors # 52
# 53
def get_price(self): # 54
return self.price # 55
# 56
def set_price(self, price): # 57
self.price = price # 58
# 59
def get_qty(self): # 60
return self.qty # 61
# 62
def set_qty(self, qty): # 63
self.qty = qty # 64
# 65
def get_author_names(self): # 66
return ','.join(author.get_name() for author in self.authors) # 67
# 68
def __str__(self): # 69
authors_str = ','.join(str(author) for author in self.authors) # 70
return f""Book[name={self.name}, author={{ {authors_str} }}, price={self.price}, qty={self.qty}]"" # 71
# 72
# 73
if __name__ == ""__main__"": # 74
book = Book(""Python"", [Author(""John Doe"", ""john@example.com"", 'm'), Author(""Jane Smith"", ""jane@example.com"", 'f')], 150.0, 20) # 75
print(book.get_author_names()) # 76"
36,Book_2,OOP_prepared,"[75, 3, 4, 5, 6, 76, 37, 38, 39, 40, 77, 70, 70, 32, 70, 71, 78, 67, 67, 11, 67]","class Author: # 1
def __init__(self, name=None, email=None, gender=None): # 2
self.name = name # 3
self.email = email # 4
if gender in ['m', 'f']: # 5
self.gender = gender # 6
else: # 7
print(""Gender must be 'm' or 'f'"") # 8
# 9
def get_name(self): # 10
return self.name # 11
# 12
def set_name(self, name): # 13
self.name = name # 14
# 15
def get_email(self): # 16
return self.email # 17
# 18
def set_email(self, email): # 19
self.email = email # 20
# 21
def get_gender(self): # 22
return self.gender # 23
# 24
def set_gender(self, gender): # 25
if gender in ['m', 'f']: # 26
self.gender = gender # 27
else: # 28
print(""Gender must be 'm' or 'f'"") # 29
# 30
def __str__(self): # 31
return f""Author[name={self.name}, email={self.email}, gender={self.gender}]"" # 32
# 33
# 34
class Book: # 35
def __init__(self, name=None, authors=None, price=0.0, qty=0): # 36
self.name = name # 37
self.authors = authors if authors is not None else [] # 38
self.price = price # 39
self.qty = qty # 40
# 41
def get_name(self): # 42
return self.name # 43
# 44
def set_name(self, name): # 45
self.name = name # 46
# 47
def get_authors(self): # 48
return self.authors # 49
# 50
def set_authors(self, authors): # 51
self.authors = authors # 52
# 53
def get_price(self): # 54
return self.price # 55
# 56
def set_price(self, price): # 57
self.price = price # 58
# 59
def get_qty(self): # 60
return self.qty # 61
# 62
def set_qty(self, qty): # 63
self.qty = qty # 64
# 65
def get_author_names(self): # 66
return ','.join(author.get_name() for author in self.authors) # 67
# 68
def __str__(self): # 69
authors_str = ','.join(str(author) for author in self.authors) # 70
return f""Book[name={self.name}, author={{ {authors_str} }}, price={self.price}, qty={self.qty}]"" # 71
# 72
# 73
if __name__ == ""__main__"": # 74
author2 = Author(""Jane Smith"", ""jane@example.com"", 'f') # 75
book1 = Book(""Python Basics"", [author2], 59.99, 10) # 76
print(book1) # 77
print(book1.get_author_names()) # 78"
37,Book_2,OOP_prepared,"[75, 3, 4, 5, 6, 76, 37, 38, 39, 40, 77, 58, 78, 64, 79, 70, 70, 32, 70, 71, 80, 67, 67, 11, 67]","class Author: # 1
def __init__(self, name=None, email=None, gender=None): # 2
self.name = name # 3
self.email = email # 4
if gender in ['m', 'f']: # 5
self.gender = gender # 6
else: # 7
print(""Gender must be 'm' or 'f'"") # 8
# 9
def get_name(self): # 10
return self.name # 11
# 12
def set_name(self, name): # 13
self.name = name # 14
# 15
def get_email(self): # 16
return self.email # 17
# 18
def set_email(self, email): # 19
self.email = email # 20
# 21
def get_gender(self): # 22
return self.gender # 23
# 24
def set_gender(self, gender): # 25
if gender in ['m', 'f']: # 26
self.gender = gender # 27
else: # 28
print(""Gender must be 'm' or 'f'"") # 29
# 30
def __str__(self): # 31
return f""Author[name={self.name}, email={self.email}, gender={self.gender}]"" # 32
# 33
# 34
class Book: # 35
def __init__(self, name=None, authors=None, price=0.0, qty=0): # 36
self.name = name # 37
self.authors = authors if authors is not None else [] # 38
self.price = price # 39
self.qty = qty # 40
# 41
def get_name(self): # 42
return self.name # 43
# 44
def set_name(self, name): # 45
self.name = name # 46
# 47
def get_authors(self): # 48
return self.authors # 49
# 50
def set_authors(self, authors): # 51
self.authors = authors # 52
# 53
def get_price(self): # 54
return self.price # 55
# 56
def set_price(self, price): # 57
self.price = price # 58
# 59
def get_qty(self): # 60
return self.qty # 61
# 62
def set_qty(self, qty): # 63
self.qty = qty # 64
# 65
def get_author_names(self): # 66
return ','.join(author.get_name() for author in self.authors) # 67
# 68
def __str__(self): # 69
authors_str = ','.join(str(author) for author in self.authors) # 70
return f""Book[name={self.name}, author={{ {authors_str} }}, price={self.price}, qty={self.qty}]"" # 71
# 72
# 73
if __name__ == ""__main__"": # 74
author3 = Author(""Sam Lee"", ""sam@example.com"", 'm') # 75
book2 = Book(""Advanced Python"", [author3], 79.99, 5) # 76
book2.set_price(69.99) # 77
book2.set_qty(8) # 78
print(book2) # 79
print(book2.get_author_names()) # 80"
38,Book_2,OOP_prepared,"[75, 3, 4, 5, 6, 76, 37, 38, 39, 40, 77, 46, 78, 70, 70, 32, 70, 71, 79, 67, 67, 11, 67]","class Author: # 1
def __init__(self, name=None, email=None, gender=None): # 2
self.name = name # 3
self.email = email # 4
if gender in ['m', 'f']: # 5
self.gender = gender # 6
else: # 7
print(""Gender must be 'm' or 'f'"") # 8
# 9
def get_name(self): # 10
return self.name # 11
# 12
def set_name(self, name): # 13
self.name = name # 14
# 15
def get_email(self): # 16
return self.email # 17
# 18
def set_email(self, email): # 19
self.email = email # 20
# 21
def get_gender(self): # 22
return self.gender # 23
# 24
def set_gender(self, gender): # 25
if gender in ['m', 'f']: # 26
self.gender = gender # 27
else: # 28
print(""Gender must be 'm' or 'f'"") # 29
# 30
def __str__(self): # 31
return f""Author[name={self.name}, email={self.email}, gender={self.gender}]"" # 32
# 33
# 34
class Book: # 35
def __init__(self, name=None, authors=None, price=0.0, qty=0): # 36
self.name = name # 37
self.authors = authors if authors is not None else [] # 38
self.price = price # 39
self.qty = qty # 40
# 41
def get_name(self): # 42
return self.name # 43
# 44
def set_name(self, name): # 45
self.name = name # 46
# 47
def get_authors(self): # 48
return self.authors # 49
# 50
def set_authors(self, authors): # 51
self.authors = authors # 52
# 53
def get_price(self): # 54
return self.price # 55
# 56
def set_price(self, price): # 57
self.price = price # 58
# 59
def get_qty(self): # 60
return self.qty # 61
# 62
def set_qty(self, qty): # 63
self.qty = qty # 64
# 65
def get_author_names(self): # 66
return ','.join(author.get_name() for author in self.authors) # 67
# 68
def __str__(self): # 69
authors_str = ','.join(str(author) for author in self.authors) # 70
return f""Book[name={self.name}, author={{ {authors_str} }}, price={self.price}, qty={self.qty}]"" # 71
# 72
# 73
if __name__ == ""__main__"": # 74
author4 = Author(""Lucy Green"", ""lucy@example.com"", 'f') # 75
book3 = Book(""Data Science Essentials"", [author4], 99.99, 20) # 76
book3.set_name(""Data Science Mastery"") # 77
print(book3) # 78
print(book3.get_author_names()) # 79"
39,Book_2,OOP_prepared,"[75, 3, 4, 5, 6, 76, 3, 4, 5, 6, 77, 37, 38, 39, 40, 78, 70, 70, 32, 70, 32, 70, 71, 79, 67, 67, 11, 67, 11, 67]","class Author: # 1
def __init__(self, name=None, email=None, gender=None): # 2
self.name = name # 3
self.email = email # 4
if gender in ['m', 'f']: # 5
self.gender = gender # 6
else: # 7
print(""Gender must be 'm' or 'f'"") # 8
# 9
def get_name(self): # 10
return self.name # 11
# 12
def set_name(self, name): # 13
self.name = name # 14
# 15
def get_email(self): # 16
return self.email # 17
# 18
def set_email(self, email): # 19
self.email = email # 20
# 21
def get_gender(self): # 22
return self.gender # 23
# 24
def set_gender(self, gender): # 25
if gender in ['m', 'f']: # 26
self.gender = gender # 27
else: # 28
print(""Gender must be 'm' or 'f'"") # 29
# 30
def __str__(self): # 31
return f""Author[name={self.name}, email={self.email}, gender={self.gender}]"" # 32
# 33
# 34
class Book: # 35
def __init__(self, name=None, authors=None, price=0.0, qty=0): # 36
self.name = name # 37
self.authors = authors if authors is not None else [] # 38
self.price = price # 39
self.qty = qty # 40
# 41
def get_name(self): # 42
return self.name # 43
# 44
def set_name(self, name): # 45
self.name = name # 46
# 47
def get_authors(self): # 48
return self.authors # 49
# 50
def set_authors(self, authors): # 51
self.authors = authors # 52
# 53
def get_price(self): # 54
return self.price # 55
# 56
def set_price(self, price): # 57
self.price = price # 58
# 59
def get_qty(self): # 60
return self.qty # 61
# 62
def set_qty(self, qty): # 63
self.qty = qty # 64
# 65
def get_author_names(self): # 66
return ','.join(author.get_name() for author in self.authors) # 67
# 68
def __str__(self): # 69
authors_str = ','.join(str(author) for author in self.authors) # 70
return f""Book[name={self.name}, author={{ {authors_str} }}, price={self.price}, qty={self.qty}]"" # 71
# 72
# 73
if __name__ == ""__main__"": # 74
author5 = Author(""Alice Brown"", ""alice@example.com"", 'f') # 75
author6 = Author(""Bob White"", ""bob@example.com"", 'm') # 76
book4 = Book(""Java Programming"", [author5, author6], 120.0, 15) # 77
print(book4) # 78
print(book4.get_author_names()) # 79"
40,Book_3,OOP_prepared,"[68, 3, 4, 69, 24, 25, 26, 27, 28, 70, 52, 71, 64, 19]","class Author: # 1
def __init__(self, name=None, email=None): # 2
self.name = name # 3
self.email = email # 4
# 5
def get_name(self): # 6
return self.name # 7
# 8
def set_name(self, name): # 9
self.name = name # 10
# 11
def get_email(self): # 12
return self.email # 13
# 14
def set_email(self, email): # 15
self.email = email # 16
# 17
def __str__(self): # 18
return f""Author[name={self.name},email={self.email}]"" # 19
# 20
# 21
class Book: # 22
def __init__(self, isbn, name, author, price, qty=0): # 23
self.isbn = isbn # 24
self.name = name # 25
self.author = author # 26
self.price = price # 27
self.qty = qty # 28
# 29
def get_isbn(self): # 30
return self.isbn # 31
# 32
def set_isbn(self, isbn): # 33
self.isbn = isbn # 34
# 35
def get_name(self): # 36
return self.name # 37
# 38
def set_name(self, name): # 39
self.name = name # 40
# 41
def get_author(self): # 42
return self.author # 43
# 44
def set_author(self, author): # 45
self.author = author # 46
# 47
def get_price(self): # 48
return self.price # 49
# 50
def set_price(self, price): # 51
self.price = price # 52
# 53
def get_qty(self): # 54
return self.qty # 55
# 56
def set_qty(self, qty): # 57
self.qty = qty # 58
# 59
def get_author_name(self): # 60
return self.author.get_name() # 61
# 62
def __str__(self): # 63
return f""Book[isbn={self.isbn},name={self.name},{self.author},price={self.price},qty={self.qty}]"" # 64
# 65
# 66
if __name__ == ""__main__"": # 67
a1 = Author(""Tan Ah Teck"", ""ahteck@nowhere.com"") # 68
b1 = Book(""12345"", ""Java for dummies"", a1, 8.8, 88) # 69
b1.set_price(15.5) # 70
print(b1) # 71"
41,Book_3,OOP_prepared,"[68, 3, 4, 69, 24, 25, 26, 27, 28, 70, 64, 19, 71, 61, 7]","class Author: # 1
def __init__(self, name=None, email=None): # 2
self.name = name # 3
self.email = email # 4
# 5
def get_name(self): # 6
return self.name # 7
# 8
def set_name(self, name): # 9
self.name = name # 10
# 11
def get_email(self): # 12
return self.email # 13
# 14
def set_email(self, email): # 15
self.email = email # 16
# 17
def __str__(self): # 18
return f""Author[name={self.name},email={self.email}]"" # 19
# 20
# 21
class Book: # 22
def __init__(self, isbn, name, author, price, qty=0): # 23
self.isbn = isbn # 24
self.name = name # 25
self.author = author # 26
self.price = price # 27
self.qty = qty # 28
# 29
def get_isbn(self): # 30
return self.isbn # 31
# 32
def set_isbn(self, isbn): # 33
self.isbn = isbn # 34
# 35
def get_name(self): # 36
return self.name # 37
# 38
def set_name(self, name): # 39
self.name = name # 40
# 41
def get_author(self): # 42
return self.author # 43
# 44
def set_author(self, author): # 45
self.author = author # 46
# 47
def get_price(self): # 48
return self.price # 49
# 50
def set_price(self, price): # 51
self.price = price # 52
# 53
def get_qty(self): # 54
return self.qty # 55
# 56
def set_qty(self, qty): # 57
self.qty = qty # 58
# 59
def get_author_name(self): # 60
return self.author.get_name() # 61
# 62
def __str__(self): # 63
return f""Book[isbn={self.isbn},name={self.name},{self.author},price={self.price},qty={self.qty}]"" # 64
# 65
# 66
if __name__ == ""__main__"": # 67
author2 = Author(""Jane Smith"", ""jane@example.com"") # 68
book1 = Book(""978-3-16-148410-0"", ""Python 101"", author2, 29.99, 5) # 69
print(book1) # 70
print(book1.get_author_name()) # 71"
42,Book_3,OOP_prepared,"[68, 3, 4, 69, 24, 25, 26, 27, 28, 70, 58, 71, 52, 72, 64, 19, 73, 55]","class Author: # 1
def __init__(self, name=None, email=None): # 2
self.name = name # 3
self.email = email # 4
# 5
def get_name(self): # 6
return self.name # 7
# 8
def set_name(self, name): # 9
self.name = name # 10
# 11
def get_email(self): # 12
return self.email # 13
# 14
def set_email(self, email): # 15
self.email = email # 16
# 17
def __str__(self): # 18
return f""Author[name={self.name},email={self.email}]"" # 19
# 20
# 21
class Book: # 22
def __init__(self, isbn, name, author, price, qty=0): # 23
self.isbn = isbn # 24
self.name = name # 25
self.author = author # 26
self.price = price # 27
self.qty = qty # 28
# 29
def get_isbn(self): # 30
return self.isbn # 31
# 32
def set_isbn(self, isbn): # 33
self.isbn = isbn # 34
# 35
def get_name(self): # 36
return self.name # 37
# 38
def set_name(self, name): # 39
self.name = name # 40
# 41
def get_author(self): # 42
return self.author # 43
# 44
def set_author(self, author): # 45
self.author = author # 46
# 47
def get_price(self): # 48
return self.price # 49
# 50
def set_price(self, price): # 51
self.price = price # 52
# 53
def get_qty(self): # 54
return self.qty # 55
# 56
def set_qty(self, qty): # 57
self.qty = qty # 58
# 59
def get_author_name(self): # 60
return self.author.get_name() # 61
# 62
def __str__(self): # 63
return f""Book[isbn={self.isbn},name={self.name},{self.author},price={self.price},qty={self.qty}]"" # 64
# 65
# 66
if __name__ == ""__main__"": # 67
author3 = Author(""Alice Brown"", ""alice@example.com"") # 68
book2 = Book(""978-1-23-456789-7"", ""Data Science Basics"", author3, 49.99, 10) # 69
book2.set_qty(15) # 70
book2.set_price(44.99) # 71
print(book2) # 72
print(book2.get_qty()) # 73"
43,Book_3,OOP_prepared,"[68, 3, 4, 69, 24, 25, 26, 27, 28, 70, 40, 71, 34, 72, 64, 19, 73, 31]","class Author: # 1
def __init__(self, name=None, email=None): # 2
self.name = name # 3
self.email = email # 4
# 5
def get_name(self): # 6
return self.name # 7
# 8
def set_name(self, name): # 9
self.name = name # 10
# 11
def get_email(self): # 12
return self.email # 13
# 14
def set_email(self, email): # 15
self.email = email # 16
# 17
def __str__(self): # 18
return f""Author[name={self.name},email={self.email}]"" # 19
# 20
# 21
class Book: # 22
def __init__(self, isbn, name, author, price, qty=0): # 23
self.isbn = isbn # 24
self.name = name # 25
self.author = author # 26
self.price = price # 27
self.qty = qty # 28
# 29
def get_isbn(self): # 30
return self.isbn # 31
# 32
def set_isbn(self, isbn): # 33
self.isbn = isbn # 34
# 35
def get_name(self): # 36
return self.name # 37
# 38
def set_name(self, name): # 39
self.name = name # 40
# 41
def get_author(self): # 42
return self.author # 43
# 44
def set_author(self, author): # 45
self.author = author # 46
# 47
def get_price(self): # 48
return self.price # 49
# 50
def set_price(self, price): # 51
self.price = price # 52
# 53
def get_qty(self): # 54
return self.qty # 55
# 56
def set_qty(self, qty): # 57
self.qty = qty # 58
# 59
def get_author_name(self): # 60
return self.author.get_name() # 61
# 62
def __str__(self): # 63
return f""Book[isbn={self.isbn},name={self.name},{self.author},price={self.price},qty={self.qty}]"" # 64
# 65
# 66
if __name__ == ""__main__"": # 67
author4 = Author(""Bob White"", ""bob@example.com"") # 68
book3 = Book(""978-0-12-345678-9"", ""Machine Learning Advanced"", author4, 59.99, 20) # 69
book3.set_name(""Machine Learning Essentials"") # 70
book3.set_isbn(""978-0-12-345679-6"") # 71
print(book3) # 72
print(book3.get_isbn()) # 73"
44,Book_3,OOP_prepared,"[68, 3, 4, 69, 24, 25, 26, 27, 28, 70, 58, 71, 52, 72, 40, 73, 64, 19, 74, 49]","class Author: # 1
def __init__(self, name=None, email=None): # 2
self.name = name # 3
self.email = email # 4
# 5
def get_name(self): # 6
return self.name # 7
# 8
def set_name(self, name): # 9
self.name = name # 10
# 11
def get_email(self): # 12
return self.email # 13
# 14
def set_email(self, email): # 15
self.email = email # 16
# 17
def __str__(self): # 18
return f""Author[name={self.name},email={self.email}]"" # 19
# 20
# 21
class Book: # 22
def __init__(self, isbn, name, author, price, qty=0): # 23
self.isbn = isbn # 24
self.name = name # 25
self.author = author # 26
self.price = price # 27
self.qty = qty # 28
# 29
def get_isbn(self): # 30
return self.isbn # 31
# 32
def set_isbn(self, isbn): # 33
self.isbn = isbn # 34
# 35
def get_name(self): # 36
return self.name # 37
# 38
def set_name(self, name): # 39
self.name = name # 40
# 41
def get_author(self): # 42
return self.author # 43
# 44
def set_author(self, author): # 45
self.author = author # 46
# 47
def get_price(self): # 48
return self.price # 49
# 50
def set_price(self, price): # 51
self.price = price # 52
# 53
def get_qty(self): # 54
return self.qty # 55
# 56
def set_qty(self, qty): # 57
self.qty = qty # 58
# 59
def get_author_name(self): # 60
return self.author.get_name() # 61
# 62
def __str__(self): # 63
return f""Book[isbn={self.isbn},name={self.name},{self.author},price={self.price},qty={self.qty}]"" # 64
# 65
# 66
if __name__ == ""__main__"": # 67
author5 = Author(""Charlie Green"", ""charlie@example.com"") # 68
book4 = Book(""978-0-98-765432-1"", ""Advanced Algorithms"", author5, 39.99, 30) # 69
book4.set_qty(25) # 70
book4.set_price(34.99) # 71
book4.set_name(""Algorithms Unleashed"") # 72
print(book4) # 73
print(book4.get_price()) # 74"
45,Circle,OOP_prepared,"[25, 5, 26, 16]","import math # 1
# 2
class Circle: # 3
def __init__(self, radius=1.0): # 4
self._radius = radius # 5
# 6
@property # 7
def radius(self): # 8
return self._radius # 9
# 10
@radius.setter # 11
def radius(self, radius): # 12
self._radius = radius # 13
# 14
def get_area(self): # 15
return self._radius * self._radius * math.pi # 16
# 17
def get_circumference(self): # 18
return self._radius * 2 * math.pi # 19
# 20
def __str__(self): # 21
return f""Circle[radius={self._radius}]"" # 22
# 23
if __name__ == ""__main__"": # 24
c = Circle(3.5) # 25
print(f""area is: {c.get_area():.2f}"") # 26"
46,Circle,OOP_prepared,"[26, 5, 27, 16, 19]","import math # 1
# 2
class Circle: # 3
def __init__(self, radius=1.0): # 4
self._radius = radius # 5
# 6
@property # 7
def radius(self): # 8
return self._radius # 9
# 10
@radius.setter # 11
def radius(self, radius): # 12
self._radius = radius # 13
# 14
def get_area(self): # 15
return self._radius * self._radius * math.pi # 16
# 17
def get_circumference(self): # 18
return self._radius * 2 * math.pi # 19
# 20
def __str__(self): # 21
return f""Circle[radius={self._radius}]"" # 22
# 23
# 24
if __name__ == ""__main__"": # 25
circle1 = Circle(3.0) # 26
print(f""Area of circle1: {circle1.get_area():.2f}, Circumference of circle1: {circle1.get_circumference():.2f}"") # 27"
47,Circle,OOP_prepared,"[26, 5, 27, 13, 28, 16, 19]","import math # 1
# 2
class Circle: # 3
def __init__(self, radius=1.0): # 4
self._radius = radius # 5
# 6
@property # 7
def radius(self): # 8
return self._radius # 9
# 10
@radius.setter # 11
def radius(self, radius): # 12
self._radius = radius # 13
# 14
def get_area(self): # 15
return self._radius * self._radius * math.pi # 16
# 17
def get_circumference(self): # 18
return self._radius * 2 * math.pi # 19
# 20
def __str__(self): # 21
return f""Circle[radius={self._radius}]"" # 22
# 23
# 24
if __name__ == ""__main__"": # 25
circle2 = Circle(10.0) # 26
circle2.radius = 12.0 # 27
print(f""Updated Area of circle2: {circle2.get_area():.2f}, Updated Circumference of circle2: {circle2.get_circumference():.2f}"") # 28"
48,Circle,OOP_prepared,"[26, 5, 27, 16, 19, 28, 13, 29, 16, 19]","import math # 1
# 2
class Circle: # 3
def __init__(self, radius=1.0): # 4
self._radius = radius # 5
# 6
@property # 7
def radius(self): # 8
return self._radius # 9
# 10
@radius.setter # 11
def radius(self, radius): # 12
self._radius = radius # 13
# 14
def get_area(self): # 15
return self._radius * self._radius * math.pi # 16
# 17
def get_circumference(self): # 18
return self._radius * 2 * math.pi # 19
# 20
def __str__(self): # 21
return f""Circle[radius={self._radius}]"" # 22
# 23
# 24
if __name__ == ""__main__"": # 25
circle3 = Circle() # 26
print(f""Default Area of circle3: {circle3.get_area():.2f}, Default Circumference of circle3: {circle3.get_circumference():.2f}"") # 27
circle3.radius = 7.5 # 28
print(f""Updated Area of circle3: {circle3.get_area():.2f}, Updated Circumference of circle3: {circle3.get_circumference():.2f}"") # 29"
49,Circle,OOP_prepared,"[26, 5, 27, 16, 19, 28, 13, 29, 16, 19]","import math # 1
# 2
class Circle: # 3
def __init__(self, radius=1.0): # 4
self._radius = radius # 5
# 6
@property # 7
def radius(self): # 8
return self._radius # 9
# 10
@radius.setter # 11
def radius(self, radius): # 12
self._radius = radius # 13
# 14
def get_area(self): # 15
return self._radius * self._radius * math.pi # 16
# 17
def get_circumference(self): # 18
return self._radius * 2 * math.pi # 19
# 20
def __str__(self): # 21
return f""Circle[radius={self._radius}]"" # 22
# 23
# 24
if __name__ == ""__main__"": # 25
circle4 = Circle(2.5) # 26
print(f""Area of circle4: {circle4.get_area():.2f}, Circumference of circle4: {circle4.get_circumference():.2f}"") # 27
circle4.radius = 4.0 # 28
print(f""Updated Area of circle4: {circle4.get_area():.2f}, Updated Circumference of circle4: {circle4.get_circumference():.2f}"") # 29"
50,Container,OOP_prepared,"[131, 5, 6, 7, 8, 11, 12, 13, 132, 73, 74, 75, 76, 133, 134, 58, 59, 135, 121, 18, 30, 18, 30, 124, 136, 68, 133, 134, 58, 59, 135, 121, 18, 30, 18, 30, 124, 136, 68, 133, 134, 58, 59, 135, 121, 18, 30, 18, 30, 122, 62, 123, 136, 68, 133, 134, 58, 59, 135, 121, 18, 30, 18, 30, 124, 136, 68, 133, 134, 58, 59, 135, 121, 18, 30, 18, 30, 124, 136, 68, 133, 134, 58, 59, 135, 121, 18, 30, 18, 30, 124, 136, 68, 133, 134, 58, 59, 135, 121, 18, 30, 18, 30, 124, 136, 68, 133, 134, 58, 59, 135, 121, 18, 30, 18, 30, 124, 136, 68, 133, 134, 58, 59, 135, 121, 18, 30, 122, 62, 123, 136, 68, 133, 134, 58, 59, 135, 121, 18, 30, 18, 30, 124, 136, 68, 133]","import math # 1
# 2
class Ball: # 3
def __init__(self, x, y, radius, xDelta=None, yDelta=None, speed=None, direction=None): # 4
self.x = x # 5
self.y = y # 6
self.radius = radius # 7
if xDelta is not None and yDelta is not None: # 8
self.xDelta = xDelta # 9
self.yDelta = yDelta # 10
elif speed is not None and direction is not None: # 11
self.xDelta = speed * math.cos(math.radians(direction)) # 12
self.yDelta = -speed * math.sin(math.radians(direction)) # 13
else: # 14
raise ValueError(""Either (xDelta, yDelta) or (speed, direction) must be provided"") # 15
# 16
def getX(self): # 17
return self.x # 18
# 19
def setX(self, x): # 20
self.x = x # 21
# 22
def getY(self): # 23
return self.y # 24
# 25
def setY(self, y): # 26
self.y = y # 27
# 28
def getRadius(self): # 29
return self.radius # 30
# 31
def setRadius(self, radius): # 32
self.radius = radius # 33
# 34
def getXDelta(self): # 35
return self.xDelta # 36
# 37
def setXDelta(self, xDelta): # 38
self.xDelta = xDelta # 39
# 40
def getYDelta(self): # 41
return self.yDelta # 42
# 43
def setYDelta(self, yDelta): # 44
self.yDelta = yDelta # 45
# 46
def getSpeed(self): # 47
return int(math.sqrt(self.xDelta * self.xDelta + self.yDelta * self.yDelta)) # 48
# 49
def getDirection(self): # 50
return int(math.degrees(math.atan2(-self.yDelta, self.xDelta))) # 51
# 52
def setXY(self, x, y): # 53
self.x = x # 54
self.y = y # 55
# 56
def move(self): # 57
self.x += self.xDelta # 58
self.y += self.yDelta # 59
# 60
def reflectHorizontal(self): # 61
self.xDelta = -self.xDelta # 62
# 63
def reflectVertical(self): # 64
self.yDelta = -self.yDelta # 65
# 66
def __str__(self): # 67
return f""Ball[({self.x},{self.y}),speed=({self.xDelta},{self.yDelta})]"" # 68
# 69
# 70
class Container: # 71
def __init__(self, x1, y1, width, height): # 72
self.x1 = x1 # 73
self.y1 = y1 # 74
self.x2 = x1 + width - 1 # 75
self.y2 = y1 + height - 1 # 76
# 77
def getX1(self): # 78
return self.x1 # 79
# 80
def setX1(self, x1): # 81
self.x1 = x1 # 82
# 83
def getY1(self): # 84
return self.y1 # 85
# 86
def setY1(self, y1): # 87
self.y1 = y1 # 88
# 89
def getX2(self): # 90
return self.x2 # 91
# 92
def setX2(self, x2): # 93
self.x2 = x2 # 94
# 95
def getY2(self): # 96
return self.y2 # 97
# 98
def setY2(self, y2): # 99
self.y2 = y2 # 100
# 101
def getX(self): # 102
return self.x1 # 103
# 104
def getY(self): # 105
return self.y1 # 106
# 107
def getWidth(self): # 108
return self.x2 - self.x1 + 1 # 109
# 110
def getHeight(self): # 111
return self.y2 - self.y1 + 1 # 112
# 113
def collides(self, ball): # 114
if ball.getX() - ball.getRadius() <= self.x1 or ball.getX() - ball.getRadius() >= self.x2: # 115
ball.reflectHorizontal() # 116
return True # 117
return False # 118
# 119
def collidesWith(self, ball): # 120
if ball.getX() - ball.getRadius() <= self.x1 or ball.getX() - ball.getRadius() >= self.x2: # 121
ball.reflectHorizontal() # 122
return True # 123
return False # 124
# 125
def __str__(self): # 126
return f""Container[({self.x1},{self.y1}),({self.x2},{self.y2})]"" # 127
# 128
# 129
if __name__ == ""__main__"": # 130
ball = Ball(30, 30, 5, speed=15, direction=45) # 131
box = Container(0, 0, 50, 50) # 132
for step in range(10): # 133
ball.move() # 134
box.collidesWith(ball) # 135
print(ball) # 136"
51,Container,OOP_prepared,"[132, 5, 6, 7, 8, 11, 12, 13, 133, 73, 74, 75, 76, 134, 135, 58, 59, 136, 121, 18, 30, 18, 30, 124, 137, 68, 134, 135, 58, 59, 136, 121, 18, 30, 18, 30, 124, 137, 68, 134, 135, 58, 59, 136, 121, 18, 30, 18, 30, 122, 62, 123, 137, 68, 134, 135, 58, 59, 136, 121, 18, 30, 18, 30, 124, 137, 68, 134, 135, 58, 59, 136, 121, 18, 30, 18, 30, 124, 137, 68, 134, 135, 58, 59, 136, 121, 18, 30, 18, 30, 124, 137, 68, 134, 135, 58, 59, 136, 121, 18, 30, 122, 62, 123, 137, 68, 134, 135, 58, 59, 136, 121, 18, 30, 18, 30, 124, 137, 68, 134, 135, 58, 59, 136, 121, 18, 30, 18, 30, 124, 137, 68, 134, 135, 58, 59, 136, 121, 18, 30, 18, 30, 124, 137, 68, 134]","import math # 1
# 2
class Ball: # 3
def __init__(self, x, y, radius, xDelta=None, yDelta=None, speed=None, direction=None): # 4
self.x = x # 5
self.y = y # 6
self.radius = radius # 7
if xDelta is not None and yDelta is not None: # 8
self.xDelta = xDelta # 9
self.yDelta = yDelta # 10
elif speed is not None and direction is not None: # 11
self.xDelta = speed * math.cos(math.radians(direction)) # 12
self.yDelta = -speed * math.sin(math.radians(direction)) # 13
else: # 14
raise ValueError(""Either (xDelta, yDelta) or (speed, direction) must be provided"") # 15
# 16
def getX(self): # 17
return self.x # 18
# 19
def setX(self, x): # 20
self.x = x # 21
# 22
def getY(self): # 23
return self.y # 24
# 25
def setY(self, y): # 26
self.y = y # 27
# 28
def getRadius(self): # 29
return self.radius # 30
# 31
def setRadius(self, radius): # 32
self.radius = radius # 33
# 34
def getXDelta(self): # 35
return self.xDelta # 36
# 37
def setXDelta(self, xDelta): # 38
self.xDelta = xDelta # 39
# 40
def getYDelta(self): # 41
return self.yDelta # 42
# 43
def setYDelta(self, yDelta): # 44
self.yDelta = yDelta # 45
# 46
def getSpeed(self): # 47
return int(math.sqrt(self.xDelta * self.xDelta + self.yDelta * self.yDelta)) # 48
# 49
def getDirection(self): # 50
return int(math.degrees(math.atan2(-self.yDelta, self.xDelta))) # 51
# 52
def setXY(self, x, y): # 53
self.x = x # 54
self.y = y # 55
# 56
def move(self): # 57
self.x += self.xDelta # 58
self.y += self.yDelta # 59
# 60
def reflectHorizontal(self): # 61
self.xDelta = -self.xDelta # 62
# 63
def reflectVertical(self): # 64
self.yDelta = -self.yDelta # 65
# 66
def __str__(self): # 67
return f""Ball[({self.x},{self.y}),speed=({self.xDelta},{self.yDelta})]"" # 68
# 69
# 70
class Container: # 71
def __init__(self, x1, y1, width, height): # 72
self.x1 = x1 # 73
self.y1 = y1 # 74
self.x2 = x1 + width - 1 # 75
self.y2 = y1 + height - 1 # 76
# 77
def getX1(self): # 78
return self.x1 # 79
# 80
def setX1(self, x1): # 81
self.x1 = x1 # 82
# 83
def getY1(self): # 84
return self.y1 # 85
# 86
def setY1(self, y1): # 87
self.y1 = y1 # 88
# 89
def getX2(self): # 90
return self.x2 # 91
# 92
def setX2(self, x2): # 93
self.x2 = x2 # 94
# 95
def getY2(self): # 96
return self.y2 # 97
# 98
def setY2(self, y2): # 99
self.y2 = y2 # 100
# 101
def getX(self): # 102
return self.x1 # 103
# 104
def getY(self): # 105
return self.y1 # 106
# 107
def getWidth(self): # 108
return self.x2 - self.x1 + 1 # 109
# 110
def getHeight(self): # 111
return self.y2 - self.y1 + 1 # 112
# 113
def collides(self, ball): # 114
if ball.getX() - ball.getRadius() <= self.x1 or ball.getX() - ball.getRadius() >= self.x2: # 115
ball.reflectHorizontal() # 116
return True # 117
return False # 118
# 119
def collidesWith(self, ball): # 120
if ball.getX() - ball.getRadius() <= self.x1 or ball.getX() - ball.getRadius() >= self.x2: # 121
ball.reflectHorizontal() # 122
return True # 123
return False # 124
# 125
def __str__(self): # 126
return f""Container[({self.x1},{self.y1}),({self.x2},{self.y2})]"" # 127
# 128
# 129
# 130
if __name__ == ""__main__"": # 131
ball = Ball(10, 10, 5, speed=20, direction=60) # 132
box = Container(0, 0, 30, 30) # 133
for step in range(10): # 134
ball.move() # 135
box.collidesWith(ball) # 136
print(ball) # 137"
52,Container,OOP_prepared,"[131, 5, 6, 7, 8, 11, 12, 13, 132, 73, 74, 75, 76, 133, 134, 58, 59, 135, 121, 18, 30, 18, 30, 124, 136, 68, 133, 134, 58, 59, 135, 121, 18, 30, 18, 30, 124, 136, 68, 133, 134, 58, 59, 135, 121, 18, 30, 18, 30, 124, 136, 68, 133, 134, 58, 59, 135, 121, 18, 30, 18, 30, 124, 136, 68, 133, 134, 58, 59, 135, 121, 18, 30, 18, 30, 124, 136, 68, 133, 134, 58, 59, 135, 121, 18, 30, 18, 30, 124, 136, 68, 133, 134, 58, 59, 135, 121, 18, 30, 18, 30, 124, 136, 68, 133, 134, 58, 59, 135, 121, 18, 30, 18, 30, 124, 136, 68, 133, 134, 58, 59, 135, 121, 18, 30, 18, 30, 124, 136, 68, 133, 134, 58, 59, 135, 121, 18, 30, 18, 30, 124, 136, 68, 133]","import math # 1
# 2
class Ball: # 3
def __init__(self, x, y, radius, xDelta=None, yDelta=None, speed=None, direction=None): # 4
self.x = x # 5
self.y = y # 6
self.radius = radius # 7
if xDelta is not None and yDelta is not None: # 8
self.xDelta = xDelta # 9
self.yDelta = yDelta # 10
elif speed is not None and direction is not None: # 11
self.xDelta = speed * math.cos(math.radians(direction)) # 12
self.yDelta = -speed * math.sin(math.radians(direction)) # 13
else: # 14
raise ValueError(""Either (xDelta, yDelta) or (speed, direction) must be provided"") # 15
# 16
def getX(self): # 17
return self.x # 18
# 19
def setX(self, x): # 20
self.x = x # 21
# 22
def getY(self): # 23
return self.y # 24
# 25
def setY(self, y): # 26
self.y = y # 27
# 28
def getRadius(self): # 29
return self.radius # 30
# 31
def setRadius(self, radius): # 32
self.radius = radius # 33
# 34
def getXDelta(self): # 35
return self.xDelta # 36
# 37
def setXDelta(self, xDelta): # 38
self.xDelta = xDelta # 39
# 40
def getYDelta(self): # 41
return self.yDelta # 42
# 43
def setYDelta(self, yDelta): # 44
self.yDelta = yDelta # 45
# 46
def getSpeed(self): # 47
return int(math.sqrt(self.xDelta * self.xDelta + self.yDelta * self.yDelta)) # 48
# 49
def getDirection(self): # 50
return int(math.degrees(math.atan2(-self.yDelta, self.xDelta))) # 51
# 52
def setXY(self, x, y): # 53
self.x = x # 54
self.y = y # 55
# 56
def move(self): # 57
self.x += self.xDelta # 58
self.y += self.yDelta # 59
# 60
def reflectHorizontal(self): # 61
self.xDelta = -self.xDelta # 62
# 63
def reflectVertical(self): # 64
self.yDelta = -self.yDelta # 65
# 66
def __str__(self): # 67
return f""Ball[({self.x},{self.y}),speed=({self.xDelta},{self.yDelta})]"" # 68
# 69
# 70
class Container: # 71
def __init__(self, x1, y1, width, height): # 72
self.x1 = x1 # 73
self.y1 = y1 # 74
self.x2 = x1 + width - 1 # 75
self.y2 = y1 + height - 1 # 76
# 77
def getX1(self): # 78
return self.x1 # 79
# 80
def setX1(self, x1): # 81
self.x1 = x1 # 82
# 83
def getY1(self): # 84
return self.y1 # 85
# 86
def setY1(self, y1): # 87
self.y1 = y1 # 88
# 89
def getX2(self): # 90
return self.x2 # 91
# 92
def setX2(self, x2): # 93
self.x2 = x2 # 94
# 95
def getY2(self): # 96
return self.y2 # 97
# 98
def setY2(self, y2): # 99
self.y2 = y2 # 100
# 101
def getX(self): # 102
return self.x1 # 103
# 104
def getY(self): # 105
return self.y1 # 106
# 107
def getWidth(self): # 108
return self.x2 - self.x1 + 1 # 109
# 110
def getHeight(self): # 111
return self.y2 - self.y1 + 1 # 112
# 113
def collides(self, ball): # 114
if ball.getX() - ball.getRadius() <= self.x1 or ball.getX() - ball.getRadius() >= self.x2: # 115
ball.reflectHorizontal() # 116
return True # 117
return False # 118
# 119
def collidesWith(self, ball): # 120
if ball.getX() - ball.getRadius() <= self.x1 or ball.getX() - ball.getRadius() >= self.x2: # 121
ball.reflectHorizontal() # 122
return True # 123
return False # 124
# 125
def __str__(self): # 126
return f""Container[({self.x1},{self.y1}),({self.x2},{self.y2})]"" # 127
# 128
# 129
if __name__ == ""__main__"": # 130
ball = Ball(40, 40, 5, speed=25, direction=90) # 131
box = Container(0, 0, 60, 60) # 132
for step in range(10): # 133
ball.move() # 134
box.collidesWith(ball) # 135
print(ball) # 136"
53,Container,OOP_prepared,"[131, 5, 6, 7, 8, 11, 12, 13, 132, 73, 74, 75, 76, 133, 134, 58, 59, 135, 121, 18, 30, 18, 30, 124, 136, 68, 133, 134, 58, 59, 135, 121, 18, 30, 122, 62, 123, 136, 68, 133, 134, 58, 59, 135, 121, 18, 30, 18, 30, 124, 136, 68, 133, 134, 58, 59, 135, 121, 18, 30, 18, 30, 124, 136, 68, 133, 134, 58, 59, 135, 121, 18, 30, 18, 30, 124, 136, 68, 133, 134, 58, 59, 135, 121, 18, 30, 18, 30, 122, 62, 123, 136, 68, 133, 134, 58, 59, 135, 121, 18, 30, 18, 30, 124, 136, 68, 133, 134, 58, 59, 135, 121, 18, 30, 18, 30, 124, 136, 68, 133, 134, 58, 59, 135, 121, 18, 30, 18, 30, 124, 136, 68, 133, 134, 58, 59, 135, 121, 18, 30, 122, 62, 123, 136, 68, 133]","import math # 1
# 2
class Ball: # 3
def __init__(self, x, y, radius, xDelta=None, yDelta=None, speed=None, direction=None): # 4
self.x = x # 5
self.y = y # 6
self.radius = radius # 7
if xDelta is not None and yDelta is not None: # 8
self.xDelta = xDelta # 9
self.yDelta = yDelta # 10
elif speed is not None and direction is not None: # 11
self.xDelta = speed * math.cos(math.radians(direction)) # 12
self.yDelta = -speed * math.sin(math.radians(direction)) # 13
else: # 14
raise ValueError(""Either (xDelta, yDelta) or (speed, direction) must be provided"") # 15
# 16
def getX(self): # 17
return self.x # 18
# 19
def setX(self, x): # 20
self.x = x # 21
# 22
def getY(self): # 23
return self.y # 24
# 25
def setY(self, y): # 26
self.y = y # 27
# 28
def getRadius(self): # 29
return self.radius # 30
# 31
def setRadius(self, radius): # 32
self.radius = radius # 33
# 34
def getXDelta(self): # 35
return self.xDelta # 36
# 37
def setXDelta(self, xDelta): # 38
self.xDelta = xDelta # 39
# 40
def getYDelta(self): # 41
return self.yDelta # 42
# 43
def setYDelta(self, yDelta): # 44
self.yDelta = yDelta # 45
# 46
def getSpeed(self): # 47
return int(math.sqrt(self.xDelta * self.xDelta + self.yDelta * self.yDelta)) # 48
# 49
def getDirection(self): # 50
return int(math.degrees(math.atan2(-self.yDelta, self.xDelta))) # 51
# 52
def setXY(self, x, y): # 53
self.x = x # 54
self.y = y # 55
# 56
def move(self): # 57
self.x += self.xDelta # 58
self.y += self.yDelta # 59
# 60
def reflectHorizontal(self): # 61
self.xDelta = -self.xDelta # 62
# 63
def reflectVertical(self): # 64
self.yDelta = -self.yDelta # 65
# 66
def __str__(self): # 67
return f""Ball[({self.x},{self.y}),speed=({self.xDelta},{self.yDelta})]"" # 68
# 69
# 70
class Container: # 71
def __init__(self, x1, y1, width, height): # 72
self.x1 = x1 # 73
self.y1 = y1 # 74
self.x2 = x1 + width - 1 # 75
self.y2 = y1 + height - 1 # 76
# 77
def getX1(self): # 78
return self.x1 # 79
# 80
def setX1(self, x1): # 81
self.x1 = x1 # 82
# 83
def getY1(self): # 84
return self.y1 # 85
# 86
def setY1(self, y1): # 87
self.y1 = y1 # 88
# 89
def getX2(self): # 90
return self.x2 # 91
# 92
def setX2(self, x2): # 93
self.x2 = x2 # 94
# 95
def getY2(self): # 96
return self.y2 # 97
# 98
def setY2(self, y2): # 99
self.y2 = y2 # 100
# 101
def getX(self): # 102
return self.x1 # 103
# 104
def getY(self): # 105
return self.y1 # 106
# 107
def getWidth(self): # 108
return self.x2 - self.x1 + 1 # 109
# 110
def getHeight(self): # 111
return self.y2 - self.y1 + 1 # 112
# 113
def collides(self, ball): # 114
if ball.getX() - ball.getRadius() <= self.x1 or ball.getX() - ball.getRadius() >= self.x2: # 115
ball.reflectHorizontal() # 116
return True # 117
return False # 118
# 119
def collidesWith(self, ball): # 120
if ball.getX() - ball.getRadius() <= self.x1 or ball.getX() - ball.getRadius() >= self.x2: # 121
ball.reflectHorizontal() # 122
return True # 123
return False # 124
# 125
def __str__(self): # 126
return f""Container[({self.x1},{self.y1}),({self.x2},{self.y2})]"" # 127
# 128
# 129
if __name__ == ""__main__"": # 130
ball = Ball(20, 20, 5, speed=30, direction=120) # 131
box = Container(0, 0, 40, 40) # 132
for step in range(10): # 133
ball.move() # 134
box.collidesWith(ball) # 135
print(ball) # 136"
54,Container,OOP_prepared,"[131, 5, 6, 7, 8, 11, 12, 13, 132, 73, 74, 75, 76, 135, 136, 58, 59, 137, 121, 18, 30, 18, 30, 124, 140, 68, 135, 136, 58, 59, 137, 121, 18, 30, 18, 30, 122, 62, 123, 138, 68, 135, 136, 58, 59, 137, 121, 18, 30, 18, 30, 124, 140, 68, 135, 136, 58, 59, 137, 121, 18, 30, 18, 30, 124, 140, 68, 135, 136, 58, 59, 137, 121, 18, 30, 122, 62, 123, 138, 68, 135]","import math # 1
# 2
class Ball: # 3
def __init__(self, x, y, radius, xDelta=None, yDelta=None, speed=None, direction=None): # 4
self.x = x # 5
self.y = y # 6
self.radius = radius # 7
if xDelta is not None and yDelta is not None: # 8
self.xDelta = xDelta # 9
self.yDelta = yDelta # 10
elif speed is not None and direction is not None: # 11
self.xDelta = speed * math.cos(math.radians(direction)) # 12
self.yDelta = -speed * math.sin(math.radians(direction)) # 13
else: # 14
raise ValueError(""Either (xDelta, yDelta) or (speed, direction) must be provided"") # 15
# 16
def getX(self): # 17
return self.x # 18
# 19
def setX(self, x): # 20
self.x = x # 21
# 22
def getY(self): # 23
return self.y # 24
# 25
def setY(self, y): # 26
self.y = y # 27
# 28
def getRadius(self): # 29
return self.radius # 30
# 31
def setRadius(self, radius): # 32
self.radius = radius # 33
# 34
def getXDelta(self): # 35
return self.xDelta # 36
# 37
def setXDelta(self, xDelta): # 38
self.xDelta = xDelta # 39
# 40
def getYDelta(self): # 41
return self.yDelta # 42
# 43
def setYDelta(self, yDelta): # 44
self.yDelta = yDelta # 45
# 46
def getSpeed(self): # 47
return int(math.sqrt(self.xDelta * self.xDelta + self.yDelta * self.yDelta)) # 48
# 49
def getDirection(self): # 50
return int(math.degrees(math.atan2(-self.yDelta, self.xDelta))) # 51
# 52
def setXY(self, x, y): # 53
self.x = x # 54
self.y = y # 55
# 56
def move(self): # 57
self.x += self.xDelta # 58
self.y += self.yDelta # 59
# 60
def reflectHorizontal(self): # 61
self.xDelta = -self.xDelta # 62
# 63
def reflectVertical(self): # 64
self.yDelta = -self.yDelta # 65
# 66
def __str__(self): # 67
return f""Ball[({self.x},{self.y}),speed=({self.xDelta},{self.yDelta})]"" # 68
# 69
# 70
class Container: # 71
def __init__(self, x1, y1, width, height): # 72
self.x1 = x1 # 73
self.y1 = y1 # 74
self.x2 = x1 + width - 1 # 75
self.y2 = y1 + height - 1 # 76
# 77
def getX1(self): # 78
return self.x1 # 79
# 80
def setX1(self, x1): # 81
self.x1 = x1 # 82
# 83
def getY1(self): # 84
return self.y1 # 85
# 86
def setY1(self, y1): # 87
self.y1 = y1 # 88
# 89
def getX2(self): # 90
return self.x2 # 91
# 92
def setX2(self, x2): # 93
self.x2 = x2 # 94
# 95
def getY2(self): # 96
return self.y2 # 97
# 98
def setY2(self, y2): # 99
self.y2 = y2 # 100
# 101
def getX(self): # 102
return self.x1 # 103
# 104
def getY(self): # 105
return self.y1 # 106
# 107
def getWidth(self): # 108
return self.x2 - self.x1 + 1 # 109
# 110
def getHeight(self): # 111
return self.y2 - self.y1 + 1 # 112
# 113
def collides(self, ball): # 114
if ball.getX() - ball.getRadius() <= self.x1 or ball.getX() - ball.getRadius() >= self.x2: # 115
ball.reflectHorizontal() # 116
return True # 117
return False # 118
# 119
def collidesWith(self, ball): # 120
if ball.getX() - ball.getRadius() <= self.x1 or ball.getX() - ball.getRadius() >= self.x2: # 121
ball.reflectHorizontal() # 122
return True # 123
return False # 124
# 125
def __str__(self): # 126
return f""Container[({self.x1},{self.y1}),({self.x2},{self.y2})]"" # 127
# 128
# 129
if __name__ == '__main__': # 130
ball = Ball(10, 10, 3, speed=10, direction=45) # 131
container = Container(0, 0, 20, 20) # 132
# 133
# 134
for step in range(5): # 135
ball.move() # 136
if container.collidesWith(ball): # 137
print(f""Ball collided and reflected at step {step}: {ball}"") # 138
else: # 139
print(f""Ball moved to {ball} without collision at step {step}"") # 140"
55,Cylinder,OOP_prepared,"[52, 33, 5, 6, 34, 53, 10, 38, 25, 45, 25]","import math # 1
# 2
class Circle: # 3
def __init__(self, radius=1.0, color=""red""): # 4
self._radius = radius # 5
self._color = color # 6
# 7
@property # 8
def radius(self): # 9
return self._radius # 10
# 11
@radius.setter # 12
def radius(self, radius): # 13
self._radius = radius # 14
# 15
@property # 16
def color(self): # 17
return self._color # 18
# 19
@color.setter # 20
def color(self, color): # 21
self._color = color # 22
# 23
def get_area(self): # 24
return self._radius * self._radius * math.pi # 25
# 26
def __str__(self): # 27
return f""Circle[radius={self._radius}, color={self._color}]"" # 28
# 29
# 30
class Cylinder(Circle): # 31
def __init__(self, radius=1.0, height=1.0, color=""red""): # 32
super().__init__(radius, color) # 33
self._height = height # 34
# 35
@property # 36
def height(self): # 37
return self._height # 38
# 39
@height.setter # 40
def height(self, height): # 41
self._height = height # 42
# 43
def get_volume(self): # 44
return self.get_area() * self._height # 45
# 46
def __str__(self): # 47
return f""Cylinder: subclass of {super().__str__()} height={self._height}"" # 48
# 49
# 50
if __name__ == ""__main__"": # 51
c1 = Cylinder(3.0, 5.0) # 52
print(f""Cylinder: radius={c1.radius} height={c1.height} base area={c1.get_area()} volume={c1.get_volume()}"") # 53"
56,Cylinder,OOP_prepared,"[53, 5, 6, 54, 14, 55, 28, 56, 25, 57, 33, 5, 6, 34, 58, 10, 38, 25, 45, 25]","import math # 1
# 2
class Circle: # 3
def __init__(self, radius=1.0, color=""red""): # 4
self._radius = radius # 5
self._color = color # 6
# 7
@property # 8
def radius(self): # 9
return self._radius # 10
# 11
@radius.setter # 12
def radius(self, radius): # 13
self._radius = radius # 14
# 15
@property # 16
def color(self): # 17
return self._color # 18
# 19
@color.setter # 20
def color(self, color): # 21
self._color = color # 22
# 23
def get_area(self): # 24
return self._radius * self._radius * math.pi # 25
# 26
def __str__(self): # 27
return f""Circle[radius={self._radius}, color={self._color}]"" # 28
# 29
# 30
class Cylinder(Circle): # 31
def __init__(self, radius=1.0, height=1.0, color=""red""): # 32
super().__init__(radius, color) # 33
self._height = height # 34
# 35
@property # 36
def height(self): # 37
return self._height # 38
# 39
@height.setter # 40
def height(self, height): # 41
self._height = height # 42
# 43
def get_volume(self): # 44
return self.get_area() * self._height # 45
# 46
def __str__(self): # 47
return f""Cylinder: subclass of {super().__str__()} height={self._height}"" # 48
# 49
# 50
# 51
if __name__ == ""__main__"": # 52
circle2 = Circle(3.0, ""green"") # 53
circle2.radius = 6.0 # 54
print(circle2) # 55
print(f""Area of circle2: {circle2.get_area()}"") # 56
c2 = Cylinder(7.0, 2.0) # 57
print(f""Cylinder: radius={c2.radius} height={c2.height} base area={c2.get_area()} volume={c2.get_volume()}"") # 58"
57,Cylinder,OOP_prepared,"[52, 33, 5, 6, 34, 53, 48, 28, 54, 45, 25]","import math # 1
# 2
class Circle: # 3
def __init__(self, radius=1.0, color=""red""): # 4
self._radius = radius # 5
self._color = color # 6
# 7
@property # 8
def radius(self): # 9
return self._radius # 10
# 11
@radius.setter # 12
def radius(self, radius): # 13
self._radius = radius # 14
# 15
@property # 16
def color(self): # 17
return self._color # 18
# 19
@color.setter # 20
def color(self, color): # 21
self._color = color # 22
# 23
def get_area(self): # 24
return self._radius * self._radius * math.pi # 25
# 26
def __str__(self): # 27
return f""Circle[radius={self._radius}, color={self._color}]"" # 28
# 29
# 30
class Cylinder(Circle): # 31
def __init__(self, radius=1.0, height=1.0, color=""red""): # 32
super().__init__(radius, color) # 33
self._height = height # 34
# 35
@property # 36
def height(self): # 37
return self._height # 38
# 39
@height.setter # 40
def height(self, height): # 41
self._height = height # 42
# 43
def get_volume(self): # 44
return self.get_area() * self._height # 45
# 46
def __str__(self): # 47
return f""Cylinder: subclass of {super().__str__()} height={self._height}"" # 48
# 49
# 50
if __name__ == ""__main__"": # 51
cylinder1 = Cylinder(4.0, 10.0) # 52
print(cylinder1) # 53
print(f""Volume of cylinder1: {cylinder1.get_volume()}"") # 54"
58,Cylinder,OOP_prepared,"[51, 33, 5, 6, 34, 52, 42, 53, 14, 54, 48, 28, 55, 45, 25]","import math # 1
# 2
class Circle: # 3
def __init__(self, radius=1.0, color=""red""): # 4
self._radius = radius # 5
self._color = color # 6
# 7
@property # 8
def radius(self): # 9
return self._radius # 10
# 11
@radius.setter # 12
def radius(self, radius): # 13
self._radius = radius # 14
# 15
@property # 16
def color(self): # 17
return self._color # 18
# 19
@color.setter # 20
def color(self, color): # 21
self._color = color # 22
# 23
def get_area(self): # 24
return self._radius * self._radius * math.pi # 25
# 26
def __str__(self): # 27
return f""Circle[radius={self._radius}, color={self._color}]"" # 28
# 29
# 30
class Cylinder(Circle): # 31
def __init__(self, radius=1.0, height=1.0, color=""red""): # 32
super().__init__(radius, color) # 33
self._height = height # 34
# 35
@property # 36
def height(self): # 37
return self._height # 38
# 39
@height.setter # 40
def height(self, height): # 41
self._height = height # 42
# 43
def get_volume(self): # 44
return self.get_area() * self._height # 45
# 46
def __str__(self): # 47
return f""Cylinder: subclass of {super().__str__()} height={self._height}"" # 48
# 49
if __name__ == ""__main__"": # 50
cylinder3 = Cylinder(2.0, 5.0) # 51
cylinder3.height = 7.0 # 52
cylinder3.radius = 4.0 # 53
print(cylinder3) # 54
print(f""Final Volume of cylinder3: {cylinder3.get_volume()}"") # 55"
59,Cylinder,OOP_prepared,"[53, 33, 5, 6, 34, 54, 10, 38, 25, 45, 25]","import math # 1
# 2
class Circle: # 3
def __init__(self, radius=1.0, color=""red""): # 4
self._radius = radius # 5
self._color = color # 6
# 7
@property # 8
def radius(self): # 9
return self._radius # 10
# 11
@radius.setter # 12
def radius(self, radius): # 13
self._radius = radius # 14
# 15
@property # 16
def color(self): # 17
return self._color # 18
# 19
@color.setter # 20
def color(self, color): # 21
self._color = color # 22
# 23
def get_area(self): # 24
return self._radius * self._radius * math.pi # 25
# 26
def __str__(self): # 27
return f""Circle[radius={self._radius}, color={self._color}]"" # 28
# 29
# 30
class Cylinder(Circle): # 31
def __init__(self, radius=1.0, height=1.0, color=""red""): # 32
super().__init__(radius, color) # 33
self._height = height # 34
# 35
@property # 36
def height(self): # 37
return self._height # 38
# 39
@height.setter # 40
def height(self, height): # 41
self._height = height # 42
# 43
def get_volume(self): # 44
return self.get_area() * self._height # 45
# 46
def __str__(self): # 47
return f""Cylinder: subclass of {super().__str__()} height={self._height}"" # 48
# 49
# 50
# 51
if __name__ == ""__main__"": # 52
c5 = Cylinder(6.0, 3.0) # 53
print(f""Cylinder: radius={c5.radius} height={c5.height} base area={c5.get_area()} volume={c5.get_volume()}"") # 54"
60,Date,OOP_prepared,"[45, 5, 6, 7, 46, 33, 34, 35, 40, 41]","from datetime import datetime # 1
# 2
class Date: # 3
def __init__(self, day, month, year): # 4
self.day = day # 5
self.month = month # 6
self.year = year # 7
# 8
def get_day(self): # 9
return self.day # 10
# 11
def set_day(self, day): # 12
self.day = day # 13
# 14
def get_month(self): # 15
return self.month # 16
# 17
def set_month(self, month): # 18
self.month = month # 19
# 20
def get_year(self): # 21
return self.year # 22
# 23
def set_year(self, year): # 24
self.year = year # 25
# 26
def set_date(self, day, month, year): # 27
self.day = day # 28
self.month = month # 29
self.year = year # 30
# 31
def __str__(self): # 32
date_string = f""{self.year}-{self.month}-{self.day}"" # 33
try: # 34
date = datetime.strptime(date_string, ""%Y-%m-%d"") # 35
except ValueError as ex: # 36
print(f""Error parsing date: {ex}"") # 37
return """" # 38
# 39
new_string = date.strftime(""%d/%m/%Y"") # 40
return new_string # 41
# 42
# 43
if __name__ == ""__main__"": # 44
d1 = Date(15, 8, 2021) # 45
print(d1) # 46"
61,Date,OOP_prepared,"[51, 47, 5, 6, 7, 48, 33, 34, 35, 40, 41]","from datetime import datetime # 1
# 2
class Date: # 3
def __init__(self, day, month, year): # 4
self.day = day # 5
self.month = month # 6
self.year = year # 7
# 8
def get_day(self): # 9
return self.day # 10
# 11
def set_day(self, day): # 12
self.day = day # 13
# 14
def get_month(self): # 15
return self.month # 16
# 17
def set_month(self, month): # 18
self.month = month # 19
# 20
def get_year(self): # 21
return self.year # 22
# 23
def set_year(self, year): # 24
self.year = year # 25
# 26
def set_date(self, day, month, year): # 27
self.day = day # 28
self.month = month # 29
self.year = year # 30
# 31
def __str__(self): # 32
date_string = f""{self.year}-{self.month}-{self.day}"" # 33
try: # 34
date = datetime.strptime(date_string, ""%Y-%m-%d"") # 35
except ValueError as ex: # 36
print(f""Error parsing date: {ex}"") # 37
return """" # 38
# 39
new_string = date.strftime(""%d/%m/%Y"") # 40
return new_string # 41
# 42
# 43
class TestDate: # 44
@staticmethod # 45
def main(): # 46
d1 = Date(29, 2, 2020) # 47
print(d1) # 48
# 49
if __name__ == ""__main__"": # 50
TestDate.main() # 51"
62,Date,OOP_prepared,"[44, 5, 6, 7, 45, 33, 34, 35, 36, 37, 38]","from datetime import datetime # 1
# 2
class Date: # 3
def __init__(self, day, month, year): # 4
self.day = day # 5
self.month = month # 6
self.year = year # 7
# 8
def get_day(self): # 9
return self.day # 10
# 11
def set_day(self, day): # 12
self.day = day # 13
# 14
def get_month(self): # 15
return self.month # 16
# 17
def set_month(self, month): # 18
self.month = month # 19
# 20
def get_year(self): # 21
return self.year # 22
# 23
def set_year(self, year): # 24
self.year = year # 25
# 26
def set_date(self, day, month, year): # 27
self.day = day # 28
self.month = month # 29
self.year = year # 30
# 31
def __str__(self): # 32
date_string = f""{self.year}-{self.month}-{self.day}"" # 33
try: # 34
date = datetime.strptime(date_string, ""%Y-%m-%d"") # 35
except ValueError as ex: # 36
print(f""Error parsing date: {ex}"") # 37
return """" # 38
# 39
new_string = date.strftime(""%d/%m/%Y"") # 40
return new_string # 41
# 42
if __name__ == ""__main__"": # 43
d2 = Date(29, 2, 2021) # 44
print(d2) # 45"
63,Date,OOP_prepared,"[45, 5, 6, 7, 46, 28, 29, 30, 47, 33, 34, 35, 40, 41]","from datetime import datetime # 1
# 2
class Date: # 3
def __init__(self, day, month, year): # 4
self.day = day # 5
self.month = month # 6
self.year = year # 7
# 8
def get_day(self): # 9
return self.day # 10
# 11
def set_day(self, day): # 12
self.day = day # 13
# 14
def get_month(self): # 15
return self.month # 16
# 17
def set_month(self, month): # 18
self.month = month # 19
# 20
def get_year(self): # 21
return self.year # 22
# 23
def set_year(self, year): # 24
self.year = year # 25
# 26
def set_date(self, day, month, year): # 27
self.day = day # 28
self.month = month # 29
self.year = year # 30
# 31
def __str__(self): # 32
date_string = f""{self.year}-{self.month}-{self.day}"" # 33
try: # 34
date = datetime.strptime(date_string, ""%Y-%m-%d"") # 35
except ValueError as ex: # 36
print(f""Error parsing date: {ex}"") # 37
return """" # 38
# 39
new_string = date.strftime(""%d/%m/%Y"") # 40
return new_string # 41
# 42
# 43
if __name__ == ""__main__"": # 44
d3 = Date(15, 8, 2000) # 45
d3.set_date(1, 1, 1999) # 46
print(d3) # 47"
64,Date,OOP_prepared,"[44, 5, 6, 7, 45, 13, 46, 19, 47, 25, 48, 33, 34, 35, 40, 41]","from datetime import datetime # 1
# 2
class Date: # 3
def __init__(self, day, month, year): # 4
self.day = day # 5
self.month = month # 6
self.year = year # 7
# 8
def get_day(self): # 9
return self.day # 10
# 11
def set_day(self, day): # 12
self.day = day # 13
# 14
def get_month(self): # 15
return self.month # 16
# 17
def set_month(self, month): # 18
self.month = month # 19
# 20
def get_year(self): # 21
return self.year # 22
# 23
def set_year(self, year): # 24
self.year = year # 25
# 26
def set_date(self, day, month, year): # 27
self.day = day # 28
self.month = month # 29
self.year = year # 30
# 31
def __str__(self): # 32
date_string = f""{self.year}-{self.month}-{self.day}"" # 33
try: # 34
date = datetime.strptime(date_string, ""%Y-%m-%d"") # 35
except ValueError as ex: # 36
print(f""Error parsing date: {ex}"") # 37
return """" # 38
# 39
new_string = date.strftime(""%d/%m/%Y"") # 40
return new_string # 41
# 42
if __name__ == ""__main__"": # 43
d4 = Date(31, 12, 1999) # 44
d4.set_day(1) # 45
d4.set_month(1) # 46
d4.set_year(2000) # 47
print(d4) # 48"
65,Employee,OOP_prepared,"[47, 3, 4, 5, 6, 48, 39, 40]","class Employee: # 1
def __init__(self, id=0, first_name="""", last_name="""", salary=0): # 2
self._id = id # 3
self._first_name = first_name # 4
self._last_name = last_name # 5
self._salary = salary # 6
# 7
def get_id(self): # 8
return self._id # 9
# 10
def set_id(self, id): # 11
self._id = id # 12
# 13
def get_first_name(self): # 14
return self._first_name # 15
# 16
def set_first_name(self, first_name): # 17
self._first_name = first_name # 18
# 19
def get_last_name(self): # 20
return self._last_name # 21
# 22
def set_last_name(self, last_name): # 23
self._last_name = last_name # 24
# 25
def get_salary(self): # 26
return self._salary # 27
# 28
def set_salary(self, salary): # 29
self._salary = salary # 30
# 31
def get_name(self): # 32
return f""{self._first_name} {self._last_name}"" # 33
# 34
def get_annual_salary(self): # 35
return self._salary * 12 # 36
# 37
def raise_salary(self, percent): # 38
self._salary += (self._salary * percent) // 100 # 39
return self._salary # 40
# 41
def __str__(self): # 42
return f""Employee[id={self._id}, name={self._first_name} {self._last_name}, salary={self._salary}]"" # 43
# 44
# 45
if __name__ == ""__main__"": # 46
e1 = Employee(1, ""John"", ""Doe"", 3000) # 47
print(e1.raise_salary(5)) # 48"
66,Employee,OOP_prepared,"[47, 3, 4, 5, 6, 48, 33, 49, 36]","class Employee: # 1
def __init__(self, id=0, first_name="""", last_name="""", salary=0): # 2
self._id = id # 3
self._first_name = first_name # 4
self._last_name = last_name # 5
self._salary = salary # 6
# 7
def get_id(self): # 8
return self._id # 9
# 10
def set_id(self, id): # 11
self._id = id # 12
# 13
def get_first_name(self): # 14
return self._first_name # 15
# 16
def set_first_name(self, first_name): # 17
self._first_name = first_name # 18
# 19
def get_last_name(self): # 20
return self._last_name # 21
# 22
def set_last_name(self, last_name): # 23
self._last_name = last_name # 24
# 25
def get_salary(self): # 26
return self._salary # 27
# 28
def set_salary(self, salary): # 29
self._salary = salary # 30
# 31
def get_name(self): # 32
return f""{self._first_name} {self._last_name}"" # 33
# 34
def get_annual_salary(self): # 35
return self._salary * 12 # 36
# 37
def raise_salary(self, percent): # 38
self._salary += (self._salary * percent) // 100 # 39
return self._salary # 40
# 41
def __str__(self): # 42
return f""Employee[id={self._id}, name={self._first_name} {self._last_name}, salary={self._salary}]"" # 43
# 44
# 45
if __name__ == ""__main__"": # 46
e2 = Employee(2, ""Jane"", ""Smith"", 4000) # 47
print(e2.get_name()) # 48
print(e2.get_annual_salary()) # 49"
67,Employee,OOP_prepared,"[47, 3, 4, 5, 6, 48, 39, 40, 49, 43]","class Employee: # 1
def __init__(self, id=0, first_name="""", last_name="""", salary=0): # 2
self._id = id # 3
self._first_name = first_name # 4
self._last_name = last_name # 5
self._salary = salary # 6
# 7
def get_id(self): # 8
return self._id # 9
# 10
def set_id(self, id): # 11
self._id = id # 12
# 13
def get_first_name(self): # 14
return self._first_name # 15
# 16
def set_first_name(self, first_name): # 17
self._first_name = first_name # 18
# 19
def get_last_name(self): # 20
return self._last_name # 21
# 22
def set_last_name(self, last_name): # 23
self._last_name = last_name # 24
# 25
def get_salary(self): # 26
return self._salary # 27
# 28
def set_salary(self, salary): # 29
self._salary = salary # 30
# 31
def get_name(self): # 32
return f""{self._first_name} {self._last_name}"" # 33
# 34
def get_annual_salary(self): # 35
return self._salary * 12 # 36
# 37
def raise_salary(self, percent): # 38
self._salary += (self._salary * percent) // 100 # 39
return self._salary # 40
# 41
def __str__(self): # 42
return f""Employee[id={self._id}, name={self._first_name} {self._last_name}, salary={self._salary}]"" # 43
# 44
# 45
if __name__ == ""__main__"": # 46
e3 = Employee(3, ""Alice"", ""Brown"", 5000) # 47
print(e3.raise_salary(10)) # 48
print(e3) # 49"
68,Employee,OOP_prepared,"[47, 3, 4, 5, 6, 48, 18, 49, 24, 50, 30, 51, 12, 52, 33, 53, 43]","class Employee: # 1
def __init__(self, id=0, first_name="""", last_name="""", salary=0): # 2
self._id = id # 3
self._first_name = first_name # 4
self._last_name = last_name # 5
self._salary = salary # 6
# 7
def get_id(self): # 8
return self._id # 9
# 10
def set_id(self, id): # 11
self._id = id # 12
# 13
def get_first_name(self): # 14
return self._first_name # 15
# 16
def set_first_name(self, first_name): # 17
self._first_name = first_name # 18
# 19
def get_last_name(self): # 20
return self._last_name # 21
# 22
def set_last_name(self, last_name): # 23
self._last_name = last_name # 24
# 25
def get_salary(self): # 26
return self._salary # 27
# 28
def set_salary(self, salary): # 29
self._salary = salary # 30
# 31
def get_name(self): # 32
return f""{self._first_name} {self._last_name}"" # 33
# 34
def get_annual_salary(self): # 35
return self._salary * 12 # 36
# 37
def raise_salary(self, percent): # 38
self._salary += (self._salary * percent) // 100 # 39
return self._salary # 40
# 41
def __str__(self): # 42
return f""Employee[id={self._id}, name={self._first_name} {self._last_name}, salary={self._salary}]"" # 43
# 44
# 45
if __name__ == ""__main__"": # 46
e4 = Employee(4, ""Tom"", ""Wright"", 2500) # 47
e4.set_first_name(""Thomas"") # 48
e4.set_last_name(""Wrightson"") # 49
e4.set_salary(3500) # 50
e4.set_id(44) # 51
print(e4.get_name()) # 52
print(e4) # 53"
69,Employee,OOP_prepared,"[47, 3, 4, 5, 6, 48, 33, 49, 27, 50, 43]","class Employee: # 1
def __init__(self, id=0, first_name="""", last_name="""", salary=0): # 2
self._id = id # 3
self._first_name = first_name # 4
self._last_name = last_name # 5
self._salary = salary # 6
# 7
def get_id(self): # 8
return self._id # 9
# 10
def set_id(self, id): # 11
self._id = id # 12
# 13
def get_first_name(self): # 14
return self._first_name # 15
# 16
def set_first_name(self, first_name): # 17
self._first_name = first_name # 18
# 19
def get_last_name(self): # 20
return self._last_name # 21
# 22
def set_last_name(self, last_name): # 23
self._last_name = last_name # 24
# 25
def get_salary(self): # 26
return self._salary # 27
# 28
def set_salary(self, salary): # 29
self._salary = salary # 30
# 31
def get_name(self): # 32
return f""{self._first_name} {self._last_name}"" # 33
# 34
def get_annual_salary(self): # 35
return self._salary * 12 # 36
# 37
def raise_salary(self, percent): # 38
self._salary += (self._salary * percent) // 100 # 39
return self._salary # 40
# 41
def __str__(self): # 42
return f""Employee[id={self._id}, name={self._first_name} {self._last_name}, salary={self._salary}]"" # 43
# 44
# 45
if __name__ == ""__main__"": # 46
e1 = Employee(1, ""John"", ""Doe"", 3000) # 47
print(e1.get_name()) # 48
print(e1.get_salary()) # 49
print(e1) # 50"
70,GeometricObject,OOP_prepared,"[59, 15, 60, 27, 61, 30, 62, 24]","import math # 1
from abc import ABC, abstractmethod # 2
# 3
class GeometricObject(ABC): # 4
@abstractmethod # 5
def get_area(self): # 6
pass # 7
# 8
@abstractmethod # 9
def get_perimeter(self): # 10
pass # 11
# 12
class Circle(GeometricObject): # 13
def __init__(self, radius=0.0): # 14
self.radius = radius # 15
# 16
def get_radius(self): # 17
return self.radius # 18
# 19
def set_radius(self, radius): # 20
self.radius = radius # 21
# 22
def __str__(self): # 23
return f""Circle[radius={self.radius}]"" # 24
# 25
def get_area(self): # 26
return self.radius * self.radius * math.pi # 27
# 28
def get_perimeter(self): # 29
return self.radius * 2 * math.pi # 30
# 31
class Rectangle(GeometricObject): # 32
def __init__(self, width=0.0, length=0.0): # 33
self.width = width # 34
self.length = length # 35
# 36
def get_width(self): # 37
return self.width # 38
# 39
def set_width(self, width): # 40
self.width = width # 41
# 42
def get_length(self): # 43
return self.length # 44
# 45
def set_length(self, length): # 46
self.length = length # 47
# 48
def __str__(self): # 49
return f""Rectangle[width={self.width}, length={self.length}]"" # 50
# 51
def get_area(self): # 52
return self.width * self.length # 53
# 54
def get_perimeter(self): # 55
return (self.width + self.length) * 2 # 56
# 57
if __name__ == ""__main__"": # 58
c1 = Circle(2.0) # 59
print(c1.get_area()) # 60
print(c1.get_perimeter()) # 61
print(c1) # 62"
71,GeometricObject,OOP_prepared,"[59, 34, 35, 60, 53, 61, 56, 62, 50]","import math # 1
from abc import ABC, abstractmethod # 2
# 3
class GeometricObject(ABC): # 4
@abstractmethod # 5
def get_area(self): # 6
pass # 7
# 8
@abstractmethod # 9
def get_perimeter(self): # 10
pass # 11
# 12
class Circle(GeometricObject): # 13
def __init__(self, radius=0.0): # 14
self.radius = radius # 15
# 16
def get_radius(self): # 17
return self.radius # 18
# 19
def set_radius(self, radius): # 20
self.radius = radius # 21
# 22
def __str__(self): # 23
return f""Circle[radius={self.radius}]"" # 24
# 25
def get_area(self): # 26
return self.radius * self.radius * math.pi # 27
# 28
def get_perimeter(self): # 29
return self.radius * 2 * math.pi # 30
# 31
class Rectangle(GeometricObject): # 32
def __init__(self, width=0.0, length=0.0): # 33
self.width = width # 34
self.length = length # 35
# 36
def get_width(self): # 37
return self.width # 38
# 39
def set_width(self, width): # 40
self.width = width # 41
# 42
def get_length(self): # 43
return self.length # 44
# 45
def set_length(self, length): # 46
self.length = length # 47
# 48
def __str__(self): # 49
return f""Rectangle[width={self.width}, length={self.length}]"" # 50
# 51
def get_area(self): # 52
return self.width * self.length # 53
# 54
def get_perimeter(self): # 55
return (self.width + self.length) * 2 # 56
# 57
if __name__ == ""__main__"": # 58
r1 = Rectangle(3.0, 4.0) # 59
print(r1.get_area()) # 60
print(r1.get_perimeter()) # 61
print(r1) # 62"
72,GeometricObject,OOP_prepared,"[59, 15, 60, 21, 61, 18, 62, 27, 63, 24]","import math # 1
from abc import ABC, abstractmethod # 2
# 3
class GeometricObject(ABC): # 4
@abstractmethod # 5
def get_area(self): # 6
pass # 7
# 8
@abstractmethod # 9
def get_perimeter(self): # 10
pass # 11
# 12
class Circle(GeometricObject): # 13
def __init__(self, radius=0.0): # 14
self.radius = radius # 15
# 16
def get_radius(self): # 17
return self.radius # 18
# 19
def set_radius(self, radius): # 20
self.radius = radius # 21
# 22
def __str__(self): # 23
return f""Circle[radius={self.radius}]"" # 24
# 25
def get_area(self): # 26
return self.radius * self.radius * math.pi # 27
# 28
def get_perimeter(self): # 29
return self.radius * 2 * math.pi # 30
# 31
class Rectangle(GeometricObject): # 32
def __init__(self, width=0.0, length=0.0): # 33
self.width = width # 34
self.length = length # 35
# 36
def get_width(self): # 37
return self.width # 38
# 39
def set_width(self, width): # 40
self.width = width # 41
# 42
def get_length(self): # 43
return self.length # 44
# 45
def set_length(self, length): # 46
self.length = length # 47
# 48
def __str__(self): # 49
return f""Rectangle[width={self.width}, length={self.length}]"" # 50
# 51
def get_area(self): # 52
return self.width * self.length # 53
# 54
def get_perimeter(self): # 55
return (self.width + self.length) * 2 # 56
# 57
if __name__ == ""__main__"": # 58
c2 = Circle() # 59
c2.set_radius(5.5) # 60
print(c2.get_radius()) # 61
print(c2.get_area()) # 62
print(c2) # 63"
73,GeometricObject,OOP_prepared,"[59, 34, 35, 60, 41, 61, 47, 62, 38, 63, 44, 64, 53, 65, 56]","import math # 1
from abc import ABC, abstractmethod # 2
# 3
class GeometricObject(ABC): # 4
@abstractmethod # 5
def get_area(self): # 6
pass # 7
# 8
@abstractmethod # 9
def get_perimeter(self): # 10
pass # 11
# 12
class Circle(GeometricObject): # 13
def __init__(self, radius=0.0): # 14
self.radius = radius # 15
# 16
def get_radius(self): # 17
return self.radius # 18
# 19
def set_radius(self, radius): # 20
self.radius = radius # 21
# 22
def __str__(self): # 23
return f""Circle[radius={self.radius}]"" # 24
# 25
def get_area(self): # 26
return self.radius * self.radius * math.pi # 27
# 28
def get_perimeter(self): # 29
return self.radius * 2 * math.pi # 30
# 31
class Rectangle(GeometricObject): # 32
def __init__(self, width=0.0, length=0.0): # 33
self.width = width # 34
self.length = length # 35
# 36
def get_width(self): # 37
return self.width # 38
# 39
def set_width(self, width): # 40
self.width = width # 41
# 42
def get_length(self): # 43
return self.length # 44
# 45
def set_length(self, length): # 46
self.length = length # 47
# 48
def __str__(self): # 49
return f""Rectangle[width={self.width}, length={self.length}]"" # 50
# 51
def get_area(self): # 52
return self.width * self.length # 53
# 54
def get_perimeter(self): # 55
return (self.width + self.length) * 2 # 56
# 57
if __name__ == ""__main__"": # 58
r2 = Rectangle() # 59
r2.set_width(6.0) # 60
r2.set_length(7.0) # 61
print(r2.get_width()) # 62
print(r2.get_length()) # 63
print(r2.get_area()) # 64
print(r2.get_perimeter()) # 65"
74,GeometricObject,OOP_prepared,"[59, 15, 34, 35, 60, 61, 24, 62, 27, 63, 30, 60, 61, 50, 62, 53, 63, 56, 60]","import math # 1
from abc import ABC, abstractmethod # 2
# 3
class GeometricObject(ABC): # 4
@abstractmethod # 5
def get_area(self): # 6
pass # 7
# 8
@abstractmethod # 9
def get_perimeter(self): # 10
pass # 11
# 12
class Circle(GeometricObject): # 13
def __init__(self, radius=0.0): # 14
self.radius = radius # 15
# 16
def get_radius(self): # 17
return self.radius # 18
# 19
def set_radius(self, radius): # 20
self.radius = radius # 21
# 22
def __str__(self): # 23
return f""Circle[radius={self.radius}]"" # 24
# 25
def get_area(self): # 26
return self.radius * self.radius * math.pi # 27
# 28
def get_perimeter(self): # 29
return self.radius * 2 * math.pi # 30
# 31
class Rectangle(GeometricObject): # 32
def __init__(self, width=0.0, length=0.0): # 33
self.width = width # 34
self.length = length # 35
# 36
def get_width(self): # 37
return self.width # 38
# 39
def set_width(self, width): # 40
self.width = width # 41
# 42
def get_length(self): # 43
return self.length # 44
# 45
def set_length(self, length): # 46
self.length = length # 47
# 48
def __str__(self): # 49
return f""Rectangle[width={self.width}, length={self.length}]"" # 50
# 51
def get_area(self): # 52
return self.width * self.length # 53
# 54
def get_perimeter(self): # 55
return (self.width + self.length) * 2 # 56
# 57
if __name__ == ""__main__"": # 58
shapes = [Circle(2.5), Rectangle(2.0, 3.0)] # 59
for shape in shapes: # 60
print(shape) # 61
print(""Area:"", shape.get_area()) # 62
print(""Perimeter:"", shape.get_perimeter()) # 63"
75,InvoiceItem,OOP_prepared,"[40, 3, 4, 5, 6, 41, 9, 42, 33, 43, 36]","class InvoiceItem: # 1
def __init__(self, id, desc, qty, unit_price): # 2
self.id = id # 3
self.desc = desc # 4
self.qty = qty # 5
self.unit_price = unit_price # 6
# 7
def get_id(self): # 8
return self.id # 9
# 10
def set_id(self, id): # 11
self.id = id # 12
# 13
def get_desc(self): # 14
return self.desc # 15
# 16
def set_desc(self, desc): # 17
self.desc = desc # 18
# 19
def get_qty(self): # 20
return self.qty # 21
# 22
def set_qty(self, qty): # 23
self.qty = qty # 24
# 25
def get_unit_price(self): # 26
return self.unit_price # 27
# 28
def set_unit_price(self, unit_price): # 29
self.unit_price = unit_price # 30
# 31
def get_total(self): # 32
return self.unit_price * self.qty # 33
# 34
def __str__(self): # 35
return f""InvoiceItem[id={self.id}, desc={self.desc}, qty={self.qty}, unit_price={self.unit_price}]"" # 36
# 37
# 38
if __name__ == ""__main__"": # 39
inv1 = InvoiceItem(""A101"", ""Pen"", 100, 0.5) # 40
print(inv1.get_id()) # 41
print(inv1.get_total()) # 42
print(inv1) # 43"
76,InvoiceItem,OOP_prepared,"[40, 3, 4, 5, 6, 41, 24, 42, 21, 43, 33, 44, 36]","class InvoiceItem: # 1
def __init__(self, id, desc, qty, unit_price): # 2
self.id = id # 3
self.desc = desc # 4
self.qty = qty # 5
self.unit_price = unit_price # 6
# 7
def get_id(self): # 8
return self.id # 9
# 10
def set_id(self, id): # 11
self.id = id # 12
# 13
def get_desc(self): # 14
return self.desc # 15
# 16
def set_desc(self, desc): # 17
self.desc = desc # 18
# 19
def get_qty(self): # 20
return self.qty # 21
# 22
def set_qty(self, qty): # 23
self.qty = qty # 24
# 25
def get_unit_price(self): # 26
return self.unit_price # 27
# 28
def set_unit_price(self, unit_price): # 29
self.unit_price = unit_price # 30
# 31
def get_total(self): # 32
return self.unit_price * self.qty # 33
# 34
def __str__(self): # 35
return f""InvoiceItem[id={self.id}, desc={self.desc}, qty={self.qty}, unit_price={self.unit_price}]"" # 36
# 37
# 38
if __name__ == ""__main__"": # 39
inv2 = InvoiceItem(""A102"", ""Pencil"", 200, 0.25) # 40
inv2.set_qty(250) # 41
print(inv2.get_qty()) # 42
print(inv2.get_total()) # 43
print(inv2) # 44"
77,InvoiceItem,OOP_prepared,"[40, 3, 4, 5, 6, 41, 30, 42, 27, 43, 33, 44, 36]","class InvoiceItem: # 1
def __init__(self, id, desc, qty, unit_price): # 2
self.id = id # 3
self.desc = desc # 4
self.qty = qty # 5
self.unit_price = unit_price # 6
# 7
def get_id(self): # 8
return self.id # 9
# 10
def set_id(self, id): # 11
self.id = id # 12
# 13
def get_desc(self): # 14
return self.desc # 15
# 16
def set_desc(self, desc): # 17
self.desc = desc # 18
# 19
def get_qty(self): # 20
return self.qty # 21
# 22
def set_qty(self, qty): # 23
self.qty = qty # 24
# 25
def get_unit_price(self): # 26
return self.unit_price # 27
# 28
def set_unit_price(self, unit_price): # 29
self.unit_price = unit_price # 30
# 31
def get_total(self): # 32
return self.unit_price * self.qty # 33
# 34
def __str__(self): # 35
return f""InvoiceItem[id={self.id}, desc={self.desc}, qty={self.qty}, unit_price={self.unit_price}]"" # 36
# 37
# 38
if __name__ == ""__main__"": # 39
inv3 = InvoiceItem(""A103"", ""Eraser"", 50, 0.75) # 40
inv3.set_unit_price(0.85) # 41
print(inv3.get_unit_price()) # 42
print(inv3.get_total()) # 43
print(inv3) # 44"
78,InvoiceItem,OOP_prepared,"[40, 3, 4, 5, 6, 41, 12, 42, 18, 43, 9, 44, 15, 45, 36]","class InvoiceItem: # 1
def __init__(self, id, desc, qty, unit_price): # 2
self.id = id # 3
self.desc = desc # 4
self.qty = qty # 5
self.unit_price = unit_price # 6
# 7
def get_id(self): # 8
return self.id # 9
# 10
def set_id(self, id): # 11
self.id = id # 12
# 13
def get_desc(self): # 14
return self.desc # 15
# 16
def set_desc(self, desc): # 17
self.desc = desc # 18
# 19
def get_qty(self): # 20
return self.qty # 21
# 22
def set_qty(self, qty): # 23
self.qty = qty # 24
# 25
def get_unit_price(self): # 26
return self.unit_price # 27
# 28
def set_unit_price(self, unit_price): # 29
self.unit_price = unit_price # 30
# 31
def get_total(self): # 32
return self.unit_price * self.qty # 33
# 34
def __str__(self): # 35
return f""InvoiceItem[id={self.id}, desc={self.desc}, qty={self.qty}, unit_price={self.unit_price}]"" # 36
# 37
# 38
if __name__ == ""__main__"": # 39
inv4 = InvoiceItem(""A104"", ""Ruler"", 30, 2.0) # 40
inv4.set_id(""B104"") # 41
inv4.set_desc(""Metal Ruler"") # 42
print(inv4.get_id()) # 43
print(inv4.get_desc()) # 44
print(inv4) # 45"
79,InvoiceItem,OOP_prepared,"[40, 3, 4, 5, 6, 41, 24, 42, 30, 43, 18, 44, 15, 45, 33, 46, 36]","class InvoiceItem: # 1
def __init__(self, id, desc, qty, unit_price): # 2
self.id = id # 3
self.desc = desc # 4
self.qty = qty # 5
self.unit_price = unit_price # 6
# 7
def get_id(self): # 8
return self.id # 9
# 10
def set_id(self, id): # 11
self.id = id # 12
# 13
def get_desc(self): # 14
return self.desc # 15
# 16
def set_desc(self, desc): # 17
self.desc = desc # 18
# 19
def get_qty(self): # 20
return self.qty # 21
# 22
def set_qty(self, qty): # 23
self.qty = qty # 24
# 25
def get_unit_price(self): # 26
return self.unit_price # 27
# 28
def set_unit_price(self, unit_price): # 29
self.unit_price = unit_price # 30
# 31
def get_total(self): # 32
return self.unit_price * self.qty # 33
# 34
def __str__(self): # 35
return f""InvoiceItem[id={self.id}, desc={self.desc}, qty={self.qty}, unit_price={self.unit_price}]"" # 36
# 37
# 38
if __name__ == ""__main__"": # 39
inv5 = InvoiceItem(""A105"", ""Marker"", 10, 1.0) # 40
inv5.set_qty(20) # 41
inv5.set_unit_price(1.25) # 42
inv5.set_desc(""Permanent Marker"") # 43
print(inv5.get_desc()) # 44
print(inv5.get_total()) # 45
print(inv5) # 46"
80,Invoice,OOP_prepared,"[70, 3, 4, 5, 71, 31, 32, 33, 72, 57, 14, 73, 63, 20, 74, 66, 26]","class Customer: # 1
def __init__(self, id, name, discount): # 2
self._id = id # 3
self._name = name # 4
self._discount = discount # 5
# 6
def get_id(self): # 7
return self._id # 8
# 9
def set_id(self, id): # 10
self._id = id # 11
# 12
def get_name(self): # 13
return self._name # 14
# 15
def set_name(self, name): # 16
self._name = name # 17
# 18
def get_discount(self): # 19
return self._discount # 20
# 21
def set_discount(self, discount): # 22
self._discount = discount # 23
# 24
def __str__(self): # 25
return f""{self._name}({self._id})({self._discount}%)"" # 26
# 27
# 28
class Invoice: # 29
def __init__(self, id, customer, amount): # 30
self._id = id # 31
self._customer = customer # 32
self._amount = amount # 33
# 34
def get_id(self): # 35
return self._id # 36
# 37
def set_id(self, id): # 38
self._id = id # 39
# 40
def get_customer(self): # 41
return self._customer # 42
# 43
def set_customer(self, customer): # 44
self._customer = customer # 45
# 46
def get_amount(self): # 47
return self._amount # 48
# 49
def set_amount(self, amount): # 50
self._amount = amount # 51
# 52
def get_customer_id(self): # 53
return self._customer.get_id() # 54
# 55
def get_customer_name(self): # 56
return self._customer.get_name() # 57
# 58
def get_customer_discount(self): # 59
return self._customer.get_discount() # 60
# 61
def get_amount_after_discount(self): # 62
return self._amount - ((self._amount * self._customer.get_discount()) / 100) # 63
# 64
def __str__(self): # 65
return f""Invoice[id={self._id},customer={self._customer},amount={self._amount}]"" # 66
# 67
# 68
if __name__ == ""__main__"": # 69
c1 = Customer(1, ""Alice Smith"", 10) # 70
inv1 = Invoice(101, c1, 1000) # 71
print(inv1.get_customer_name()) # 72
print(inv1.get_amount_after_discount()) # 73
print(inv1) # 74"
81,Invoice,OOP_prepared,"[70, 3, 4, 5, 71, 31, 32, 33, 72, 51, 73, 63, 20, 74, 66, 26]","class Customer: # 1
def __init__(self, id, name, discount): # 2
self._id = id # 3
self._name = name # 4
self._discount = discount # 5
# 6
def get_id(self): # 7
return self._id # 8
# 9
def set_id(self, id): # 10
self._id = id # 11
# 12
def get_name(self): # 13
return self._name # 14
# 15
def set_name(self, name): # 16
self._name = name # 17
# 18
def get_discount(self): # 19
return self._discount # 20
# 21
def set_discount(self, discount): # 22
self._discount = discount # 23
# 24
def __str__(self): # 25
return f""{self._name}({self._id})({self._discount}%)"" # 26
# 27
# 28
class Invoice: # 29
def __init__(self, id, customer, amount): # 30
self._id = id # 31
self._customer = customer # 32
self._amount = amount # 33
# 34
def get_id(self): # 35
return self._id # 36
# 37
def set_id(self, id): # 38
self._id = id # 39
# 40
def get_customer(self): # 41
return self._customer # 42
# 43
def set_customer(self, customer): # 44
self._customer = customer # 45
# 46
def get_amount(self): # 47
return self._amount # 48
# 49
def set_amount(self, amount): # 50
self._amount = amount # 51
# 52
def get_customer_id(self): # 53
return self._customer.get_id() # 54
# 55
def get_customer_name(self): # 56
return self._customer.get_name() # 57
# 58
def get_customer_discount(self): # 59
return self._customer.get_discount() # 60
# 61
def get_amount_after_discount(self): # 62
return self._amount - ((self._amount * self._customer.get_discount()) / 100) # 63
# 64
def __str__(self): # 65
return f""Invoice[id={self._id},customer={self._customer},amount={self._amount}]"" # 66
# 67
# 68
if __name__ == ""__main__"": # 69
c2 = Customer(2, ""Bob Jones"", 20) # 70
inv2 = Invoice(102, c2, 750) # 71
inv2.set_amount(1200) # 72
print(inv2.get_amount_after_discount()) # 73
print(inv2) # 74"
82,Invoice,OOP_prepared,"[70, 3, 4, 5, 71, 31, 32, 33, 72, 42, 23, 73, 60, 20, 74, 63, 20, 75, 66, 26]","class Customer: # 1
def __init__(self, id, name, discount): # 2
self._id = id # 3
self._name = name # 4
self._discount = discount # 5
# 6
def get_id(self): # 7
return self._id # 8
# 9
def set_id(self, id): # 10
self._id = id # 11
# 12
def get_name(self): # 13
return self._name # 14
# 15
def set_name(self, name): # 16
self._name = name # 17
# 18
def get_discount(self): # 19
return self._discount # 20
# 21
def set_discount(self, discount): # 22
self._discount = discount # 23
# 24
def __str__(self): # 25
return f""{self._name}({self._id})({self._discount}%)"" # 26
# 27
# 28
class Invoice: # 29
def __init__(self, id, customer, amount): # 30
self._id = id # 31
self._customer = customer # 32
self._amount = amount # 33
# 34
def get_id(self): # 35
return self._id # 36
# 37
def set_id(self, id): # 38
self._id = id # 39
# 40
def get_customer(self): # 41
return self._customer # 42
# 43
def set_customer(self, customer): # 44
self._customer = customer # 45
# 46
def get_amount(self): # 47
return self._amount # 48
# 49
def set_amount(self, amount): # 50
self._amount = amount # 51
# 52
def get_customer_id(self): # 53
return self._customer.get_id() # 54
# 55
def get_customer_name(self): # 56
return self._customer.get_name() # 57
# 58
def get_customer_discount(self): # 59
return self._customer.get_discount() # 60
# 61
def get_amount_after_discount(self): # 62
return self._amount - ((self._amount * self._customer.get_discount()) / 100) # 63
# 64
def __str__(self): # 65
return f""Invoice[id={self._id},customer={self._customer},amount={self._amount}]"" # 66
# 67
# 68
if __name__ == ""__main__"": # 69
c3 = Customer(3, ""Carol White"", 25) # 70
inv3 = Invoice(103, c3, 1500) # 71
inv3.get_customer().set_discount(30) # 72
print(inv3.get_customer_discount()) # 73
print(inv3.get_amount_after_discount()) # 74
print(inv3) # 75"
83,Invoice,OOP_prepared,"[70, 3, 4, 5, 71, 31, 32, 33, 72, 3, 4, 5, 45, 73, 42, 17, 74, 57, 14, 75, 63, 20, 76, 66, 26]","class Customer: # 1
def __init__(self, id, name, discount): # 2
self._id = id # 3
self._name = name # 4
self._discount = discount # 5
# 6
def get_id(self): # 7
return self._id # 8
# 9
def set_id(self, id): # 10
self._id = id # 11
# 12
def get_name(self): # 13
return self._name # 14
# 15
def set_name(self, name): # 16
self._name = name # 17
# 18
def get_discount(self): # 19
return self._discount # 20
# 21
def set_discount(self, discount): # 22
self._discount = discount # 23
# 24
def __str__(self): # 25
return f""{self._name}({self._id})({self._discount}%)"" # 26
# 27
# 28
class Invoice: # 29
def __init__(self, id, customer, amount): # 30
self._id = id # 31
self._customer = customer # 32
self._amount = amount # 33
# 34
def get_id(self): # 35
return self._id # 36
# 37
def set_id(self, id): # 38
self._id = id # 39
# 40
def get_customer(self): # 41
return self._customer # 42
# 43
def set_customer(self, customer): # 44
self._customer = customer # 45
# 46
def get_amount(self): # 47
return self._amount # 48
# 49
def set_amount(self, amount): # 50
self._amount = amount # 51
# 52
def get_customer_id(self): # 53
return self._customer.get_id() # 54
# 55
def get_customer_name(self): # 56
return self._customer.get_name() # 57
# 58
def get_customer_discount(self): # 59
return self._customer.get_discount() # 60
# 61
def get_amount_after_discount(self): # 62
return self._amount - ((self._amount * self._customer.get_discount()) / 100) # 63
# 64
def __str__(self): # 65
return f""Invoice[id={self._id},customer={self._customer},amount={self._amount}]"" # 66
# 67
# 68
if __name__ == ""__main__"": # 69
c4 = Customer(4, ""David Green"", 50) # 70
inv4 = Invoice(104, c4, 2000) # 71
inv4.set_customer(Customer(5, ""Eve Black"", 15)) # 72
inv4.get_customer().set_name(""Eva Black"") # 73
print(inv4.get_customer_name()) # 74
print(inv4.get_amount_after_discount()) # 75
print(inv4) # 76"
84,Invoice,OOP_prepared,"[70, 3, 4, 5, 71, 31, 32, 33, 72, 48, 51, 73, 42, 23, 74, 54, 8, 75, 60, 20, 76, 63, 20, 77, 66, 26]","class Customer: # 1
def __init__(self, id, name, discount): # 2
self._id = id # 3
self._name = name # 4
self._discount = discount # 5
# 6
def get_id(self): # 7
return self._id # 8
# 9
def set_id(self, id): # 10
self._id = id # 11
# 12
def get_name(self): # 13
return self._name # 14
# 15
def set_name(self, name): # 16
self._name = name # 17
# 18
def get_discount(self): # 19
return self._discount # 20
# 21
def set_discount(self, discount): # 22
self._discount = discount # 23
# 24
def __str__(self): # 25
return f""{self._name}({self._id})({self._discount}%)"" # 26
# 27
# 28
class Invoice: # 29
def __init__(self, id, customer, amount): # 30
self._id = id # 31
self._customer = customer # 32
self._amount = amount # 33
# 34
def get_id(self): # 35
return self._id # 36
# 37
def set_id(self, id): # 38
self._id = id # 39
# 40
def get_customer(self): # 41
return self._customer # 42
# 43
def set_customer(self, customer): # 44
self._customer = customer # 45
# 46
def get_amount(self): # 47
return self._amount # 48
# 49
def set_amount(self, amount): # 50
self._amount = amount # 51
# 52
def get_customer_id(self): # 53
return self._customer.get_id() # 54
# 55
def get_customer_name(self): # 56
return self._customer.get_name() # 57
# 58
def get_customer_discount(self): # 59
return self._customer.get_discount() # 60
# 61
def get_amount_after_discount(self): # 62
return self._amount - ((self._amount * self._customer.get_discount()) / 100) # 63
# 64
def __str__(self): # 65
return f""Invoice[id={self._id},customer={self._customer},amount={self._amount}]"" # 66
# 67
# 68
if __name__ == ""__main__"": # 69
c5 = Customer(6, ""Frank Brown"", 40) # 70
inv5 = Invoice(105, c5, 3000) # 71
inv5.set_amount(inv5.get_amount() * 1.1) # 72
inv5.get_customer().set_discount(35) # 73
print(inv5.get_customer_id()) # 74
print(inv5.get_customer_discount()) # 75
print(inv5.get_amount_after_discount()) # 76
print(inv5) # 77"
85,LineSub,OOP_prepared,"[91, 5, 6, 92, 12, 93, 15, 94, 9]","import math # 1
# 2
class Point: # 3
def __init__(self, x, y): # 4
self._x = x # 5
self._y = y # 6
# 7
def __str__(self): # 8
return f""Point:({self._x},{self._y})"" # 9
# 10
def get_x(self): # 11
return self._x # 12
# 13
def get_y(self): # 14
return self._y # 15
# 16
def set_x(self, x): # 17
self._x = x # 18
# 19
def set_y(self, y): # 20
self._y = y # 21
# 22
def set_xy(self, x, y): # 23
self._x = x # 24
self._y = y # 25
# 26
# 27
class LineSub(Point): # 28
def __init__(self, begin, end=None, end_x=None, end_y=None): # 29
if isinstance(begin, Point) and isinstance(end, Point): # 30
super().__init__(begin.get_x(), begin.get_y()) # 31
self._end = end # 32
elif isinstance(begin, int) and isinstance(end, int) and isinstance(end_x, int) and isinstance(end_y, int): # 33
super().__init__(begin, end) # 34
self._end = Point(end_x, end_y) # 35
else: # 36
raise ValueError(""Invalid arguments"") # 37
# 38
def __str__(self): # 39
return f""LineSub[begin={super().__str__()},end={self._end}]"" # 40
# 41
def get_begin(self): # 42
return Point(self.get_x(), self.get_y()) # 43
# 44
def get_end(self): # 45
return self._end # 46
# 47
def set_begin(self, begin_x, begin_y): # 48
self.set_xy(begin_x, begin_y) # 49
# 50
def set_end(self, end_x, end_y): # 51
self._end.set_xy(end_x, end_y) # 52
# 53
def get_begin_x(self): # 54
return self.get_x() # 55
# 56
def get_begin_y(self): # 57
return self.get_y() # 58
# 59
def get_end_x(self): # 60
return self._end.get_x() # 61
# 62
def get_end_y(self): # 63
return self._end.get_y() # 64
# 65
def set_begin_x(self, begin_x): # 66
self.set_x(begin_x) # 67
# 68
def set_begin_y(self, begin_y): # 69
self.set_y(begin_y) # 70
# 71
def set_begin_xy(self, begin_x, begin_y): # 72
self.set_xy(begin_x, begin_y) # 73
# 74
def set_end_x(self, end_x): # 75
self._end.set_x(end_x) # 76
# 77
def set_end_y(self, end_y): # 78
self._end.set_y(end_y) # 79
# 80
def set_end_xy(self, end_x, end_y): # 81
self._end.set_xy(end_x, end_y) # 82
# 83
def get_length(self): # 84
return int(math.sqrt((self._end.get_x() - self.get_x()) ** 2 + (self._end.get_y() - self.get_y()) ** 2)) # 85
# 86
def get_gradient(self): # 87
return math.atan2(self._end.get_y() - self.get_y(), self._end.get_x() - self.get_x()) # 88
# 89
if __name__ == ""__main__"": # 90
p1 = Point(1, 2) # 91
print(p1.get_x()) # 92
print(p1.get_y()) # 93
print(p1) # 94"
86,LineSub,OOP_prepared,"[92, 5, 6, 93, 5, 6, 94, 30, 31, 12, 15, 5, 6, 32, 95, 43, 12, 15, 5, 6, 9, 96, 46, 9, 97, 85, 12, 12, 15, 15, 98, 88, 15, 15, 12, 12]","import math # 1
# 2
class Point: # 3
def __init__(self, x, y): # 4
self._x = x # 5
self._y = y # 6
# 7
def __str__(self): # 8
return f""Point:({self._x},{self._y})"" # 9
# 10
def get_x(self): # 11
return self._x # 12
# 13
def get_y(self): # 14
return self._y # 15
# 16
def set_x(self, x): # 17
self._x = x # 18
# 19
def set_y(self, y): # 20
self._y = y # 21
# 22
def set_xy(self, x, y): # 23
self._x = x # 24
self._y = y # 25
# 26
# 27
class LineSub(Point): # 28
def __init__(self, begin, end=None, end_x=None, end_y=None): # 29
if isinstance(begin, Point) and isinstance(end, Point): # 30
super().__init__(begin.get_x(), begin.get_y()) # 31
self._end = end # 32
elif isinstance(begin, int) and isinstance(end, int) and isinstance(end_x, int) and isinstance(end_y, int): # 33
super().__init__(begin, end) # 34
self._end = Point(end_x, end_y) # 35
else: # 36
raise ValueError(""Invalid arguments"") # 37
# 38
def __str__(self): # 39
return f""LineSub[begin={super().__str__()},end={self._end}]"" # 40
# 41
def get_begin(self): # 42
return Point(self.get_x(), self.get_y()) # 43
# 44
def get_end(self): # 45
return self._end # 46
# 47
def set_begin(self, begin_x, begin_y): # 48
self.set_xy(begin_x, begin_y) # 49
# 50
def set_end(self, end_x, end_y): # 51
self._end.set_xy(end_x, end_y) # 52
# 53
def get_begin_x(self): # 54
return self.get_x() # 55
# 56
def get_begin_y(self): # 57
return self.get_y() # 58
# 59
def get_end_x(self): # 60
return self._end.get_x() # 61
# 62
def get_end_y(self): # 63
return self._end.get_y() # 64
# 65
def set_begin_x(self, begin_x): # 66
self.set_x(begin_x) # 67
# 68
def set_begin_y(self, begin_y): # 69
self.set_y(begin_y) # 70
# 71
def set_begin_xy(self, begin_x, begin_y): # 72
self.set_xy(begin_x, begin_y) # 73
# 74
def set_end_x(self, end_x): # 75
self._end.set_x(end_x) # 76
# 77
def set_end_y(self, end_y): # 78
self._end.set_y(end_y) # 79
# 80
def set_end_xy(self, end_x, end_y): # 81
self._end.set_xy(end_x, end_y) # 82
# 83
def get_length(self): # 84
return int(math.sqrt((self._end.get_x() - self.get_x()) ** 2 + (self._end.get_y() - self.get_y()) ** 2)) # 85
# 86
def get_gradient(self): # 87
return math.atan2(self._end.get_y() - self.get_y(), self._end.get_x() - self.get_x()) # 88
# 89
# 90
if __name__ == ""__main__"": # 91
begin = Point(3, 4) # 92
end = Point(6, 8) # 93
line1 = LineSub(begin, end) # 94
print(line1.get_begin()) # 95
print(line1.get_end()) # 96
print(line1.get_length()) # 97
print(line1.get_gradient()) # 98"
87,LineSub,OOP_prepared,"[93, 30, 33, 34, 5, 6, 35, 5, 6, 94, 55, 12, 95, 58, 15, 96, 61, 12, 97, 64, 15, 98, 40, 9, 9]","import math # 1
# 2
class Point: # 3
def __init__(self, x, y): # 4
self._x = x # 5
self._y = y # 6
# 7
def __str__(self): # 8
return f""Point:({self._x},{self._y})"" # 9
# 10
def get_x(self): # 11
return self._x # 12
# 13
def get_y(self): # 14
return self._y # 15
# 16
def set_x(self, x): # 17
self._x = x # 18
# 19
def set_y(self, y): # 20
self._y = y # 21
# 22
def set_xy(self, x, y): # 23
self._x = x # 24
self._y = y # 25
# 26
# 27
class LineSub(Point): # 28
def __init__(self, begin, end=None, end_x=None, end_y=None): # 29
if isinstance(begin, Point) and isinstance(end, Point): # 30
super().__init__(begin.get_x(), begin.get_y()) # 31
self._end = end # 32
elif isinstance(begin, int) and isinstance(end, int) and isinstance(end_x, int) and isinstance(end_y, int): # 33
super().__init__(begin, end) # 34
self._end = Point(end_x, end_y) # 35
else: # 36
raise ValueError(""Invalid arguments"") # 37
# 38
def __str__(self): # 39
return f""LineSub[begin={super().__str__()},end={self._end}]"" # 40
# 41
def get_begin(self): # 42
return Point(self.get_x(), self.get_y()) # 43
# 44
def get_end(self): # 45
return self._end # 46
# 47
def set_begin(self, begin_x, begin_y): # 48
self.set_xy(begin_x, begin_y) # 49
# 50
def set_end(self, end_x, end_y): # 51
self._end.set_xy(end_x, end_y) # 52
# 53
def get_begin_x(self): # 54
return self.get_x() # 55
# 56
def get_begin_y(self): # 57
return self.get_y() # 58
# 59
def get_end_x(self): # 60
return self._end.get_x() # 61
# 62
def get_end_y(self): # 63
return self._end.get_y() # 64
# 65
def set_begin_x(self, begin_x): # 66
self.set_x(begin_x) # 67
# 68
def set_begin_y(self, begin_y): # 69
self.set_y(begin_y) # 70
# 71
def set_begin_xy(self, begin_x, begin_y): # 72
self.set_xy(begin_x, begin_y) # 73
# 74
def set_end_x(self, end_x): # 75
self._end.set_x(end_x) # 76
# 77
def set_end_y(self, end_y): # 78
self._end.set_y(end_y) # 79
# 80
def set_end_xy(self, end_x, end_y): # 81
self._end.set_xy(end_x, end_y) # 82
# 83
def get_length(self): # 84
return int(math.sqrt((self._end.get_x() - self.get_x()) ** 2 + (self._end.get_y() - self.get_y()) ** 2)) # 85
# 86
def get_gradient(self): # 87
return math.atan2(self._end.get_y() - self.get_y(), self._end.get_x() - self.get_x()) # 88
# 89
# 90
# 91
if __name__ == ""__main__"": # 92
line2 = LineSub(2, 3, 5, 6) # 93
print(line2.get_begin_x()) # 94
print(line2.get_begin_y()) # 95
print(line2.get_end_x()) # 96
print(line2.get_end_y()) # 97
print(line2) # 98"
88,LineSub,OOP_prepared,"[93, 30, 33, 34, 5, 6, 35, 5, 6, 94, 49, 24, 25, 95, 52, 24, 25, 96, 85, 12, 12, 15, 15, 97, 88, 15, 15, 12, 12, 98, 40, 9, 9]","import math # 1
# 2
class Point: # 3
def __init__(self, x, y): # 4
self._x = x # 5
self._y = y # 6
# 7
def __str__(self): # 8
return f""Point:({self._x},{self._y})"" # 9
# 10
def get_x(self): # 11
return self._x # 12
# 13
def get_y(self): # 14
return self._y # 15
# 16
def set_x(self, x): # 17
self._x = x # 18
# 19
def set_y(self, y): # 20
self._y = y # 21
# 22
def set_xy(self, x, y): # 23
self._x = x # 24
self._y = y # 25
# 26
# 27
class LineSub(Point): # 28
def __init__(self, begin, end=None, end_x=None, end_y=None): # 29
if isinstance(begin, Point) and isinstance(end, Point): # 30
super().__init__(begin.get_x(), begin.get_y()) # 31
self._end = end # 32
elif isinstance(begin, int) and isinstance(end, int) and isinstance(end_x, int) and isinstance(end_y, int): # 33
super().__init__(begin, end) # 34
self._end = Point(end_x, end_y) # 35
else: # 36
raise ValueError(""Invalid arguments"") # 37
# 38
def __str__(self): # 39
return f""LineSub[begin={super().__str__()},end={self._end}]"" # 40
# 41
def get_begin(self): # 42
return Point(self.get_x(), self.get_y()) # 43
# 44
def get_end(self): # 45
return self._end # 46
# 47
def set_begin(self, begin_x, begin_y): # 48
self.set_xy(begin_x, begin_y) # 49
# 50
def set_end(self, end_x, end_y): # 51
self._end.set_xy(end_x, end_y) # 52
# 53
def get_begin_x(self): # 54
return self.get_x() # 55
# 56
def get_begin_y(self): # 57
return self.get_y() # 58
# 59
def get_end_x(self): # 60
return self._end.get_x() # 61
# 62
def get_end_y(self): # 63
return self._end.get_y() # 64
# 65
def set_begin_x(self, begin_x): # 66
self.set_x(begin_x) # 67
# 68
def set_begin_y(self, begin_y): # 69
self.set_y(begin_y) # 70
# 71
def set_begin_xy(self, begin_x, begin_y): # 72
self.set_xy(begin_x, begin_y) # 73
# 74
def set_end_x(self, end_x): # 75
self._end.set_x(end_x) # 76
# 77
def set_end_y(self, end_y): # 78
self._end.set_y(end_y) # 79
# 80
def set_end_xy(self, end_x, end_y): # 81
self._end.set_xy(end_x, end_y) # 82
# 83
def get_length(self): # 84
return int(math.sqrt((self._end.get_x() - self.get_x()) ** 2 + (self._end.get_y() - self.get_y()) ** 2)) # 85
# 86
def get_gradient(self): # 87
return math.atan2(self._end.get_y() - self.get_y(), self._end.get_x() - self.get_x()) # 88
# 89
# 90
# 91
if __name__ == ""__main__"": # 92
line2 = LineSub(2, 3, 5, 6) # 93
line2.set_begin(1, 1) # 94
line2.set_end(7, 7) # 95
print(line2.get_length()) # 96
print(line2.get_gradient()) # 97
print(line2) # 98"
89,LineSub,OOP_prepared,"[92, 5, 6, 93, 5, 6, 94, 30, 31, 12, 15, 5, 6, 32, 95, 73, 24, 25, 96, 82, 24, 25, 97, 85, 12, 12, 15, 15, 98, 88, 15, 15, 12, 12, 99, 40, 9, 9]","import math # 1
# 2
class Point: # 3
def __init__(self, x, y): # 4
self._x = x # 5
self._y = y # 6
# 7
def __str__(self): # 8
return f""Point:({self._x},{self._y})"" # 9
# 10
def get_x(self): # 11
return self._x # 12
# 13
def get_y(self): # 14
return self._y # 15
# 16
def set_x(self, x): # 17
self._x = x # 18
# 19
def set_y(self, y): # 20
self._y = y # 21
# 22
def set_xy(self, x, y): # 23
self._x = x # 24
self._y = y # 25
# 26
# 27
class LineSub(Point): # 28
def __init__(self, begin, end=None, end_x=None, end_y=None): # 29
if isinstance(begin, Point) and isinstance(end, Point): # 30
super().__init__(begin.get_x(), begin.get_y()) # 31
self._end = end # 32
elif isinstance(begin, int) and isinstance(end, int) and isinstance(end_x, int) and isinstance(end_y, int): # 33
super().__init__(begin, end) # 34
self._end = Point(end_x, end_y) # 35
else: # 36
raise ValueError(""Invalid arguments"") # 37
# 38
def __str__(self): # 39
return f""LineSub[begin={super().__str__()},end={self._end}]"" # 40
# 41
def get_begin(self): # 42
return Point(self.get_x(), self.get_y()) # 43
# 44
def get_end(self): # 45
return self._end # 46
# 47
def set_begin(self, begin_x, begin_y): # 48
self.set_xy(begin_x, begin_y) # 49
# 50
def set_end(self, end_x, end_y): # 51
self._end.set_xy(end_x, end_y) # 52
# 53
def get_begin_x(self): # 54
return self.get_x() # 55
# 56
def get_begin_y(self): # 57
return self.get_y() # 58
# 59
def get_end_x(self): # 60
return self._end.get_x() # 61
# 62
def get_end_y(self): # 63
return self._end.get_y() # 64
# 65
def set_begin_x(self, begin_x): # 66
self.set_x(begin_x) # 67
# 68
def set_begin_y(self, begin_y): # 69
self.set_y(begin_y) # 70
# 71
def set_begin_xy(self, begin_x, begin_y): # 72
self.set_xy(begin_x, begin_y) # 73
# 74
def set_end_x(self, end_x): # 75
self._end.set_x(end_x) # 76
# 77
def set_end_y(self, end_y): # 78
self._end.set_y(end_y) # 79
# 80
def set_end_xy(self, end_x, end_y): # 81
self._end.set_xy(end_x, end_y) # 82
# 83
def get_length(self): # 84
return int(math.sqrt((self._end.get_x() - self.get_x()) ** 2 + (self._end.get_y() - self.get_y()) ** 2)) # 85
# 86
def get_gradient(self): # 87
return math.atan2(self._end.get_y() - self.get_y(), self._end.get_x() - self.get_x()) # 88
# 89
# 90
if __name__ == ""__main__"": # 91
begin = Point(3, 4) # 92
end = Point(6, 8) # 93
line1 = LineSub(begin, end) # 94
line1.set_begin_xy(4, 3) # 95
line1.set_end_xy(10, 5) # 96
print(line1.get_length()) # 97
print(line1.get_gradient()) # 98
print(line1) # 99"
90,MovableCircle,OOP_prepared,"[105, 23, 24, 25, 26, 106, 53, 107, 56, 108, 53]","from abc import ABC, abstractmethod # 1
# 2
class Movable(ABC): # 3
@abstractmethod # 4
def move_up(self): # 5
pass # 6
# 7
@abstractmethod # 8
def move_down(self): # 9
pass # 10
# 11
@abstractmethod # 12
def move_left(self): # 13
pass # 14
# 15
@abstractmethod # 16
def move_right(self): # 17
pass # 18
# 19
# 20
class MovablePoint(Movable): # 21
def __init__(self, x=0, y=0, x_speed=0, y_speed=0): # 22
self.x = x # 23
self.y = y # 24
self.x_speed = x_speed # 25
self.y_speed = y_speed # 26
# 27
def get_x(self): # 28
return self.x # 29
# 30
def set_x(self, x): # 31
self.x = x # 32
# 33
def get_y(self): # 34
return self.y # 35
# 36
def set_y(self, y): # 37
self.y = y # 38
# 39
def get_x_speed(self): # 40
return self.x_speed # 41
# 42
def set_x_speed(self, x_speed): # 43
self.x_speed = x_speed # 44
# 45
def get_y_speed(self): # 46
return self.y_speed # 47
# 48
def set_y_speed(self, y_speed): # 49
self.y_speed = y_speed # 50
# 51
def __str__(self): # 52
return f""({self.x},{self.y}) speed={self.x_speed},{self.y_speed}"" # 53
# 54
def move_up(self): # 55
self.y -= self.y_speed # 56
# 57
def move_down(self): # 58
self.y += self.y_speed # 59
# 60
def move_left(self): # 61
self.x -= self.x_speed # 62
# 63
def move_right(self): # 64
self.x += self.x_speed # 65
# 66
# 67
class MovableCircle(Movable): # 68
def __init__(self, radius=0, center=None, x=0, y=0, x_speed=0, y_speed=0): # 69
self.radius = radius # 70
if center is None: # 71
self.center = MovablePoint(x, y, x_speed, y_speed) # 72
else: # 73
self.center = center # 74
# 75
def get_radius(self): # 76
return self.radius # 77
# 78
def set_radius(self, radius): # 79
self.radius = radius # 80
# 81
def get_center(self): # 82
return self.center # 83
# 84
def set_center(self, center): # 85
self.center = center # 86
# 87
def __str__(self): # 88
return f""{self.center}, radius={self.radius}"" # 89
# 90
def move_up(self): # 91
self.center.set_y(self.center.get_y() - self.center.get_y_speed()) # 92
# 93
def move_down(self): # 94
self.center.set_y(self.center.get_y() + self.center.get_y_speed()) # 95
# 96
def move_left(self): # 97
self.center.set_x(self.center.get_x() - self.center.get_x_speed()) # 98
# 99
def move_right(self): # 100
self.center.set_x(self.center.get_x() + self.center.get_x_speed()) # 101
# 102
# 103
if __name__ == ""__main__"": # 104
m1 = MovablePoint(10, 20, 5, 5) # 105
print(m1) # 106
m1.move_up() # 107
print(m1) # 108"
91,MovableCircle,OOP_prepared,"[105, 70, 71, 72, 23, 24, 25, 26, 106, 89, 53, 107, 92, 35, 47, 38, 108, 89, 53]","from abc import ABC, abstractmethod # 1
# 2
class Movable(ABC): # 3
@abstractmethod # 4
def move_up(self): # 5
pass # 6
# 7
@abstractmethod # 8
def move_down(self): # 9
pass # 10
# 11
@abstractmethod # 12
def move_left(self): # 13
pass # 14
# 15
@abstractmethod # 16
def move_right(self): # 17
pass # 18
# 19
# 20
class MovablePoint(Movable): # 21
def __init__(self, x=0, y=0, x_speed=0, y_speed=0): # 22
self.x = x # 23
self.y = y # 24
self.x_speed = x_speed # 25
self.y_speed = y_speed # 26
# 27
def get_x(self): # 28
return self.x # 29
# 30
def set_x(self, x): # 31
self.x = x # 32
# 33
def get_y(self): # 34
return self.y # 35
# 36
def set_y(self, y): # 37
self.y = y # 38
# 39
def get_x_speed(self): # 40
return self.x_speed # 41
# 42
def set_x_speed(self, x_speed): # 43
self.x_speed = x_speed # 44
# 45
def get_y_speed(self): # 46
return self.y_speed # 47
# 48
def set_y_speed(self, y_speed): # 49
self.y_speed = y_speed # 50
# 51
def __str__(self): # 52
return f""({self.x},{self.y}) speed={self.x_speed},{self.y_speed}"" # 53
# 54
def move_up(self): # 55
self.y -= self.y_speed # 56
# 57
def move_down(self): # 58
self.y += self.y_speed # 59
# 60
def move_left(self): # 61
self.x -= self.x_speed # 62
# 63
def move_right(self): # 64
self.x += self.x_speed # 65
# 66
# 67
class MovableCircle(Movable): # 68
def __init__(self, radius=0, center=None, x=0, y=0, x_speed=0, y_speed=0): # 69
self.radius = radius # 70
if center is None: # 71
self.center = MovablePoint(x, y, x_speed, y_speed) # 72
else: # 73
self.center = center # 74
# 75
def get_radius(self): # 76
return self.radius # 77
# 78
def set_radius(self, radius): # 79
self.radius = radius # 80
# 81
def get_center(self): # 82
return self.center # 83
# 84
def set_center(self, center): # 85
self.center = center # 86
# 87
def __str__(self): # 88
return f""{self.center}, radius={self.radius}"" # 89
# 90
def move_up(self): # 91
self.center.set_y(self.center.get_y() - self.center.get_y_speed()) # 92
# 93
def move_down(self): # 94
self.center.set_y(self.center.get_y() + self.center.get_y_speed()) # 95
# 96
def move_left(self): # 97
self.center.set_x(self.center.get_x() - self.center.get_x_speed()) # 98
# 99
def move_right(self): # 100
self.center.set_x(self.center.get_x() + self.center.get_x_speed()) # 101
# 102
# 103
if __name__ == ""__main__"": # 104
m2 = MovableCircle(radius=10, x=15, y=15, x_speed=4, y_speed=4) # 105
print(m2) # 106
m2.move_up() # 107
print(m2) # 108"
92,MovableCircle,OOP_prepared,"[105, 23, 24, 25, 26, 70, 71, 74, 106, 89, 53, 107, 98, 29, 41, 32, 108, 95, 35, 47, 38, 109, 89, 53]","from abc import ABC, abstractmethod # 1
# 2
class Movable(ABC): # 3
@abstractmethod # 4
def move_up(self): # 5
pass # 6
# 7
@abstractmethod # 8
def move_down(self): # 9
pass # 10
# 11
@abstractmethod # 12
def move_left(self): # 13
pass # 14
# 15
@abstractmethod # 16
def move_right(self): # 17
pass # 18
# 19
# 20
class MovablePoint(Movable): # 21
def __init__(self, x=0, y=0, x_speed=0, y_speed=0): # 22
self.x = x # 23
self.y = y # 24
self.x_speed = x_speed # 25
self.y_speed = y_speed # 26
# 27
def get_x(self): # 28
return self.x # 29
# 30
def set_x(self, x): # 31
self.x = x # 32
# 33
def get_y(self): # 34
return self.y # 35
# 36
def set_y(self, y): # 37
self.y = y # 38
# 39
def get_x_speed(self): # 40
return self.x_speed # 41
# 42
def set_x_speed(self, x_speed): # 43
self.x_speed = x_speed # 44
# 45
def get_y_speed(self): # 46
return self.y_speed # 47
# 48
def set_y_speed(self, y_speed): # 49
self.y_speed = y_speed # 50
# 51
def __str__(self): # 52
return f""({self.x},{self.y}) speed={self.x_speed},{self.y_speed}"" # 53
# 54
def move_up(self): # 55
self.y -= self.y_speed # 56
# 57
def move_down(self): # 58
self.y += self.y_speed # 59
# 60
def move_left(self): # 61
self.x -= self.x_speed # 62
# 63
def move_right(self): # 64
self.x += self.x_speed # 65
# 66
# 67
class MovableCircle(Movable): # 68
def __init__(self, radius=0, center=None, x=0, y=0, x_speed=0, y_speed=0): # 69
self.radius = radius # 70
if center is None: # 71
self.center = MovablePoint(x, y, x_speed, y_speed) # 72
else: # 73
self.center = center # 74
# 75
def get_radius(self): # 76
return self.radius # 77
# 78
def set_radius(self, radius): # 79
self.radius = radius # 80
# 81
def get_center(self): # 82
return self.center # 83
# 84
def set_center(self, center): # 85
self.center = center # 86
# 87
def __str__(self): # 88
return f""{self.center}, radius={self.radius}"" # 89
# 90
def move_up(self): # 91
self.center.set_y(self.center.get_y() - self.center.get_y_speed()) # 92
# 93
def move_down(self): # 94
self.center.set_y(self.center.get_y() + self.center.get_y_speed()) # 95
# 96
def move_left(self): # 97
self.center.set_x(self.center.get_x() - self.center.get_x_speed()) # 98
# 99
def move_right(self): # 100
self.center.set_x(self.center.get_x() + self.center.get_x_speed()) # 101
# 102
# 103
if __name__ == ""__main__"": # 104
m3 = MovableCircle(radius=5, center=MovablePoint(0, 0, 1, 1)) # 105
print(m3) # 106
m3.move_left() # 107
m3.move_down() # 108
print(m3) # 109"
93,MovableCircle,OOP_prepared,"[105, 23, 24, 25, 26, 106, 53, 107, 56, 108, 62, 109, 53]","from abc import ABC, abstractmethod # 1
# 2
class Movable(ABC): # 3
@abstractmethod # 4
def move_up(self): # 5
pass # 6
# 7
@abstractmethod # 8
def move_down(self): # 9
pass # 10
# 11
@abstractmethod # 12
def move_left(self): # 13
pass # 14
# 15
@abstractmethod # 16
def move_right(self): # 17
pass # 18
# 19
# 20
class MovablePoint(Movable): # 21
def __init__(self, x=0, y=0, x_speed=0, y_speed=0): # 22
self.x = x # 23
self.y = y # 24
self.x_speed = x_speed # 25
self.y_speed = y_speed # 26
# 27
def get_x(self): # 28
return self.x # 29
# 30
def set_x(self, x): # 31
self.x = x # 32
# 33
def get_y(self): # 34
return self.y # 35
# 36
def set_y(self, y): # 37
self.y = y # 38
# 39
def get_x_speed(self): # 40
return self.x_speed # 41
# 42
def set_x_speed(self, x_speed): # 43
self.x_speed = x_speed # 44
# 45
def get_y_speed(self): # 46
return self.y_speed # 47
# 48
def set_y_speed(self, y_speed): # 49
self.y_speed = y_speed # 50
# 51
def __str__(self): # 52
return f""({self.x},{self.y}) speed={self.x_speed},{self.y_speed}"" # 53
# 54
def move_up(self): # 55
self.y -= self.y_speed # 56
# 57
def move_down(self): # 58
self.y += self.y_speed # 59
# 60
def move_left(self): # 61
self.x -= self.x_speed # 62
# 63
def move_right(self): # 64
self.x += self.x_speed # 65
# 66
# 67
class MovableCircle(Movable): # 68
def __init__(self, radius=0, center=None, x=0, y=0, x_speed=0, y_speed=0): # 69
self.radius = radius # 70
if center is None: # 71
self.center = MovablePoint(x, y, x_speed, y_speed) # 72
else: # 73
self.center = center # 74
# 75
def get_radius(self): # 76
return self.radius # 77
# 78
def set_radius(self, radius): # 79
self.radius = radius # 80
# 81
def get_center(self): # 82
return self.center # 83
# 84
def set_center(self, center): # 85
self.center = center # 86
# 87
def __str__(self): # 88
return f""{self.center}, radius={self.radius}"" # 89
# 90
def move_up(self): # 91
self.center.set_y(self.center.get_y() - self.center.get_y_speed()) # 92
# 93
def move_down(self): # 94
self.center.set_y(self.center.get_y() + self.center.get_y_speed()) # 95
# 96
def move_left(self): # 97
self.center.set_x(self.center.get_x() - self.center.get_x_speed()) # 98
# 99
def move_right(self): # 100
self.center.set_x(self.center.get_x() + self.center.get_x_speed()) # 101
# 102
# 103
if __name__ == ""__main__"": # 104
m4 = MovablePoint(10, 10, 3, 3) # 105
print(m4) # 106
m4.move_up() # 107
m4.move_left() # 108
print(m4) # 109"
94,MovableCircle,OOP_prepared,"[105, 23, 24, 25, 26, 70, 71, 74, 106, 89, 53, 107, 95, 35, 47, 38, 108, 101, 29, 41, 32, 109, 89, 53]","from abc import ABC, abstractmethod # 1
# 2
class Movable(ABC): # 3
@abstractmethod # 4
def move_up(self): # 5
pass # 6
# 7
@abstractmethod # 8
def move_down(self): # 9
pass # 10
# 11
@abstractmethod # 12
def move_left(self): # 13
pass # 14
# 15
@abstractmethod # 16
def move_right(self): # 17
pass # 18
# 19
# 20
class MovablePoint(Movable): # 21
def __init__(self, x=0, y=0, x_speed=0, y_speed=0): # 22
self.x = x # 23
self.y = y # 24
self.x_speed = x_speed # 25
self.y_speed = y_speed # 26
# 27
def get_x(self): # 28
return self.x # 29
# 30
def set_x(self, x): # 31
self.x = x # 32
# 33
def get_y(self): # 34
return self.y # 35
# 36
def set_y(self, y): # 37
self.y = y # 38
# 39
def get_x_speed(self): # 40
return self.x_speed # 41
# 42
def set_x_speed(self, x_speed): # 43
self.x_speed = x_speed # 44
# 45
def get_y_speed(self): # 46
return self.y_speed # 47
# 48
def set_y_speed(self, y_speed): # 49
self.y_speed = y_speed # 50
# 51
def __str__(self): # 52
return f""({self.x},{self.y}) speed={self.x_speed},{self.y_speed}"" # 53
# 54
def move_up(self): # 55
self.y -= self.y_speed # 56
# 57
def move_down(self): # 58
self.y += self.y_speed # 59
# 60
def move_left(self): # 61
self.x -= self.x_speed # 62
# 63
def move_right(self): # 64
self.x += self.x_speed # 65
# 66
# 67
class MovableCircle(Movable): # 68
def __init__(self, radius=0, center=None, x=0, y=0, x_speed=0, y_speed=0): # 69
self.radius = radius # 70
if center is None: # 71
self.center = MovablePoint(x, y, x_speed, y_speed) # 72
else: # 73
self.center = center # 74
# 75
def get_radius(self): # 76
return self.radius # 77
# 78
def set_radius(self, radius): # 79
self.radius = radius # 80
# 81
def get_center(self): # 82
return self.center # 83
# 84
def set_center(self, center): # 85
self.center = center # 86
# 87
def __str__(self): # 88
return f""{self.center}, radius={self.radius}"" # 89
# 90
def move_up(self): # 91
self.center.set_y(self.center.get_y() - self.center.get_y_speed()) # 92
# 93
def move_down(self): # 94
self.center.set_y(self.center.get_y() + self.center.get_y_speed()) # 95
# 96
def move_left(self): # 97
self.center.set_x(self.center.get_x() - self.center.get_x_speed()) # 98
# 99
def move_right(self): # 100
self.center.set_x(self.center.get_x() + self.center.get_x_speed()) # 101
# 102
# 103
if __name__ == ""__main__"": # 104
m5 = MovableCircle(radius=8, center=MovablePoint(20, 20, 5, 5)) # 105
print(m5) # 106
m5.move_down() # 107
m5.move_right() # 108
print(m5) # 109"
95,MovablePoint_2,OOP_prepared,"[75, 22, 23, 24, 25, 76, 63, 77, 60]","from abc import ABC, abstractmethod # 1
# 2
class Movable(ABC): # 3
@abstractmethod # 4
def move_up(self): # 5
pass # 6
# 7
@abstractmethod # 8
def move_down(self): # 9
pass # 10
# 11
@abstractmethod # 12
def move_left(self): # 13
pass # 14
# 15
@abstractmethod # 16
def move_right(self): # 17
pass # 18
# 19
class MovablePoint(Movable): # 20
def __init__(self, x=0, y=0, x_speed=0, y_speed=0): # 21
self._x = x # 22
self._y = y # 23
self._x_speed = x_speed # 24
self._y_speed = y_speed # 25
# 26
@property # 27
def x(self): # 28
return self._x # 29
# 30
@x.setter # 31
def x(self, value): # 32
self._x = value # 33
# 34
@property # 35
def y(self): # 36
return self._y # 37
# 38
@y.setter # 39
def y(self, value): # 40
self._y = value # 41
# 42
@property # 43
def x_speed(self): # 44
return self._x_speed # 45
# 46
@x_speed.setter # 47
def x_speed(self, value): # 48
self._x_speed = value # 49
# 50
@property # 51
def y_speed(self): # 52
return self._y_speed # 53
# 54
@y_speed.setter # 55
def y_speed(self, value): # 56
self._y_speed = value # 57
# 58
def __str__(self): # 59
return f""({self._x},{self._y}) speed={self._x_speed},{self._y_speed}"" # 60
# 61
def move_up(self): # 62
self._y -= self._y_speed # 63
# 64
def move_down(self): # 65
self._y += self._y_speed # 66
# 67
def move_left(self): # 68
self._x -= self._x_speed # 69
# 70
def move_right(self): # 71
self._x += self._x_speed # 72
# 73
if __name__ == ""__main__"": # 74
point = MovablePoint(5, 5, 2, 3) # 75
point.move_up() # 76
print(point) # 77"
96,MovablePoint_2,OOP_prepared,"[76, 22, 23, 24, 25, 77, 69, 78, 60]","from abc import ABC, abstractmethod # 1
# 2
class Movable(ABC): # 3
@abstractmethod # 4
def move_up(self): # 5
pass # 6
# 7
@abstractmethod # 8
def move_down(self): # 9
pass # 10
# 11
@abstractmethod # 12
def move_left(self): # 13
pass # 14
# 15
@abstractmethod # 16
def move_right(self): # 17
pass # 18
# 19
class MovablePoint(Movable): # 20
def __init__(self, x=0, y=0, x_speed=0, y_speed=0): # 21
self._x = x # 22
self._y = y # 23
self._x_speed = x_speed # 24
self._y_speed = y_speed # 25
# 26
@property # 27
def x(self): # 28
return self._x # 29
# 30
@x.setter # 31
def x(self, value): # 32
self._x = value # 33
# 34
@property # 35
def y(self): # 36
return self._y # 37
# 38
@y.setter # 39
def y(self, value): # 40
self._y = value # 41
# 42
@property # 43
def x_speed(self): # 44
return self._x_speed # 45
# 46
@x_speed.setter # 47
def x_speed(self, value): # 48
self._x_speed = value # 49
# 50
@property # 51
def y_speed(self): # 52
return self._y_speed # 53
# 54
@y_speed.setter # 55
def y_speed(self, value): # 56
self._y_speed = value # 57
# 58
def __str__(self): # 59
return f""({self._x},{self._y}) speed={self._x_speed},{self._y_speed}"" # 60
# 61
def move_up(self): # 62
self._y -= self._y_speed # 63
# 64
def move_down(self): # 65
self._y += self._y_speed # 66
# 67
def move_left(self): # 68
self._x -= self._x_speed # 69
# 70
def move_right(self): # 71
self._x += self._x_speed # 72
# 73
# 74
if __name__ == ""__main__"": # 75
p2 = MovablePoint(0, 0, 1, 1) # 76
p2.move_left() # 77
print(p2) # 78"
97,MovablePoint_2,OOP_prepared,"[76, 22, 23, 24, 25, 77, 72, 78, 66, 79, 60]","from abc import ABC, abstractmethod # 1
# 2
class Movable(ABC): # 3
@abstractmethod # 4
def move_up(self): # 5
pass # 6
# 7
@abstractmethod # 8
def move_down(self): # 9
pass # 10
# 11
@abstractmethod # 12
def move_left(self): # 13
pass # 14
# 15
@abstractmethod # 16
def move_right(self): # 17
pass # 18
# 19
class MovablePoint(Movable): # 20
def __init__(self, x=0, y=0, x_speed=0, y_speed=0): # 21
self._x = x # 22
self._y = y # 23
self._x_speed = x_speed # 24
self._y_speed = y_speed # 25
# 26
@property # 27
def x(self): # 28
return self._x # 29
# 30
@x.setter # 31
def x(self, value): # 32
self._x = value # 33
# 34
@property # 35
def y(self): # 36
return self._y # 37
# 38
@y.setter # 39
def y(self, value): # 40
self._y = value # 41
# 42
@property # 43
def x_speed(self): # 44
return self._x_speed # 45
# 46
@x_speed.setter # 47
def x_speed(self, value): # 48
self._x_speed = value # 49
# 50
@property # 51
def y_speed(self): # 52
return self._y_speed # 53
# 54
@y_speed.setter # 55
def y_speed(self, value): # 56
self._y_speed = value # 57
# 58
def __str__(self): # 59
return f""({self._x},{self._y}) speed={self._x_speed},{self._y_speed}"" # 60
# 61
def move_up(self): # 62
self._y -= self._y_speed # 63
# 64
def move_down(self): # 65
self._y += self._y_speed # 66
# 67
def move_left(self): # 68
self._x -= self._x_speed # 69
# 70
def move_right(self): # 71
self._x += self._x_speed # 72
# 73
# 74
if __name__ == ""__main__"": # 75
p3 = MovablePoint(10, 10, 3, 3) # 76
p3.move_right() # 77
p3.move_down() # 78
print(p3) # 79"
98,MovablePoint_2,OOP_prepared,"[75, 22, 23, 24, 25, 76, 63, 77, 69, 78, 60]","from abc import ABC, abstractmethod # 1
# 2
class Movable(ABC): # 3
@abstractmethod # 4
def move_up(self): # 5
pass # 6
# 7
@abstractmethod # 8
def move_down(self): # 9
pass # 10
# 11
@abstractmethod # 12
def move_left(self): # 13
pass # 14
# 15
@abstractmethod # 16
def move_right(self): # 17
pass # 18
# 19
class MovablePoint(Movable): # 20
def __init__(self, x=0, y=0, x_speed=0, y_speed=0): # 21
self._x = x # 22
self._y = y # 23
self._x_speed = x_speed # 24
self._y_speed = y_speed # 25
# 26
@property # 27
def x(self): # 28
return self._x # 29
# 30
@x.setter # 31
def x(self, value): # 32
self._x = value # 33
# 34
@property # 35
def y(self): # 36
return self._y # 37
# 38
@y.setter # 39
def y(self, value): # 40
self._y = value # 41
# 42
@property # 43
def x_speed(self): # 44
return self._x_speed # 45
# 46
@x_speed.setter # 47
def x_speed(self, value): # 48
self._x_speed = value # 49
# 50
@property # 51
def y_speed(self): # 52
return self._y_speed # 53
# 54
@y_speed.setter # 55
def y_speed(self, value): # 56
self._y_speed = value # 57
# 58
def __str__(self): # 59
return f""({self._x},{self._y}) speed={self._x_speed},{self._y_speed}"" # 60
# 61
def move_up(self): # 62
self._y -= self._y_speed # 63
# 64
def move_down(self): # 65
self._y += self._y_speed # 66
# 67
def move_left(self): # 68
self._x -= self._x_speed # 69
# 70
def move_right(self): # 71
self._x += self._x_speed # 72
# 73
if __name__ == ""__main__"": # 74
p4 = MovablePoint(7, 7, 1, 2) # 75
p4.move_up() # 76
p4.move_left() # 77
print(p4) # 78"
99,MovablePoint_2,OOP_prepared,"[76, 22, 23, 24, 25, 77, 66, 78, 33, 79, 57, 80, 63, 81, 60]","from abc import ABC, abstractmethod # 1
# 2
class Movable(ABC): # 3
@abstractmethod # 4
def move_up(self): # 5
pass # 6
# 7
@abstractmethod # 8
def move_down(self): # 9
pass # 10
# 11
@abstractmethod # 12
def move_left(self): # 13
pass # 14
# 15
@abstractmethod # 16
def move_right(self): # 17
pass # 18
# 19
class MovablePoint(Movable): # 20
def __init__(self, x=0, y=0, x_speed=0, y_speed=0): # 21
self._x = x # 22
self._y = y # 23
self._x_speed = x_speed # 24
self._y_speed = y_speed # 25
# 26
@property # 27
def x(self): # 28
return self._x # 29
# 30
@x.setter # 31
def x(self, value): # 32
self._x = value # 33
# 34
@property # 35
def y(self): # 36
return self._y # 37
# 38
@y.setter # 39
def y(self, value): # 40
self._y = value # 41
# 42
@property # 43
def x_speed(self): # 44
return self._x_speed # 45
# 46
@x_speed.setter # 47
def x_speed(self, value): # 48
self._x_speed = value # 49
# 50
@property # 51
def y_speed(self): # 52
return self._y_speed # 53
# 54
@y_speed.setter # 55
def y_speed(self, value): # 56
self._y_speed = value # 57
# 58
def __str__(self): # 59
return f""({self._x},{self._y}) speed={self._x_speed},{self._y_speed}"" # 60
# 61
def move_up(self): # 62
self._y -= self._y_speed # 63
# 64
def move_down(self): # 65
self._y += self._y_speed # 66
# 67
def move_left(self): # 68
self._x -= self._x_speed # 69
# 70
def move_right(self): # 71
self._x += self._x_speed # 72
# 73
# 74
if __name__ == ""__main__"": # 75
p5 = MovablePoint(3, 3, 0, 5) # 76
p5.move_down() # 77
p5.x = 10 # 78
p5.y_speed = 3 # 79
p5.move_up() # 80
print(p5) # 81"
100,MovablePoint,OOP_prepared,"[72, 35, 3, 4, 36, 37, 73, 66, 8, 12, 67, 16, 20, 68, 63, 30]","class Point: # 1
def __init__(self, x=0.0, y=0.0): # 2
self._x = x # 3
self._y = y # 4
# 5
@property # 6
def x(self): # 7
return self._x # 8
# 9
@x.setter # 10
def x(self, x): # 11
self._x = x # 12
# 13
@property # 14
def y(self): # 15
return self._y # 16
# 17
@y.setter # 18
def y(self, y): # 19
self._y = y # 20
# 21
def setXY(self, x, y): # 22
self._x = x # 23
self._y = y # 24
# 25
def getXY(self): # 26
return [self._x, self._y] # 27
# 28
def __str__(self): # 29
return f""({self._x},{self._y})"" # 30
# 31
# 32
class MovablePoint(Point): # 33
def __init__(self, x=0.0, y=0.0, xSpeed=0.0, ySpeed=0.0): # 34
super().__init__(x, y) # 35
self._xSpeed = xSpeed # 36
self._ySpeed = ySpeed # 37
# 38
@property # 39
def xSpeed(self): # 40
return self._xSpeed # 41
# 42
@xSpeed.setter # 43
def xSpeed(self, xSpeed): # 44
self._xSpeed = xSpeed # 45
# 46
@property # 47
def ySpeed(self): # 48
return self._ySpeed # 49
# 50
@ySpeed.setter # 51
def ySpeed(self, ySpeed): # 52
self._ySpeed = ySpeed # 53
# 54
def setSpeed(self, xSpeed, ySpeed): # 55
self._xSpeed = xSpeed # 56
self._ySpeed = ySpeed # 57
# 58
def getSpeed(self): # 59
return [self._xSpeed, self._ySpeed] # 60
# 61
def __str__(self): # 62
return super().__str__() + f"",speed=({self._xSpeed},{self._ySpeed})"" # 63
# 64
def move(self): # 65
self.x += self._xSpeed # 66
self.y += self._ySpeed # 67
return self # 68
# 69
# 70
if __name__ == ""__main__"": # 71
m = MovablePoint(1, 1, 2, 2) # 72
print(m.move()) # 73"
101,MovablePoint,OOP_prepared,"[72, 3, 4, 73, 23, 24, 74, 30]","class Point: # 1
def __init__(self, x=0.0, y=0.0): # 2
self._x = x # 3
self._y = y # 4
# 5
@property # 6
def x(self): # 7
return self._x # 8
# 9
@x.setter # 10
def x(self, x): # 11
self._x = x # 12
# 13
@property # 14
def y(self): # 15
return self._y # 16
# 17
@y.setter # 18
def y(self, y): # 19
self._y = y # 20
# 21
def setXY(self, x, y): # 22
self._x = x # 23
self._y = y # 24
# 25
def getXY(self): # 26
return [self._x, self._y] # 27
# 28
def __str__(self): # 29
return f""({self._x},{self._y})"" # 30
# 31
# 32
class MovablePoint(Point): # 33
def __init__(self, x=0.0, y=0.0, xSpeed=0.0, ySpeed=0.0): # 34
super().__init__(x, y) # 35
self._xSpeed = xSpeed # 36
self._ySpeed = ySpeed # 37
# 38
@property # 39
def xSpeed(self): # 40
return self._xSpeed # 41
# 42
@xSpeed.setter # 43
def xSpeed(self, xSpeed): # 44
self._xSpeed = xSpeed # 45
# 46
@property # 47
def ySpeed(self): # 48
return self._ySpeed # 49
# 50
@ySpeed.setter # 51
def ySpeed(self, ySpeed): # 52
self._ySpeed = ySpeed # 53
# 54
def setSpeed(self, xSpeed, ySpeed): # 55
self._xSpeed = xSpeed # 56
self._ySpeed = ySpeed # 57
# 58
def getSpeed(self): # 59
return [self._xSpeed, self._ySpeed] # 60
# 61
def __str__(self): # 62
return super().__str__() + f"",speed=({self._xSpeed},{self._ySpeed})"" # 63
# 64
def move(self): # 65
self.x += self._xSpeed # 66
self.y += self._ySpeed # 67
return self # 68
# 69
# 70
if __name__ == ""__main__"": # 71
p2 = Point() # 72
p2.setXY(3.0, 4.0) # 73
print(p2) # 74"
102,MovablePoint,OOP_prepared,"[72, 35, 3, 4, 36, 37, 73, 60]","class Point: # 1
def __init__(self, x=0.0, y=0.0): # 2
self._x = x # 3
self._y = y # 4
# 5
@property # 6
def x(self): # 7
return self._x # 8
# 9
@x.setter # 10
def x(self, x): # 11
self._x = x # 12
# 13
@property # 14
def y(self): # 15
return self._y # 16
# 17
@y.setter # 18
def y(self, y): # 19
self._y = y # 20
# 21
def setXY(self, x, y): # 22
self._x = x # 23
self._y = y # 24
# 25
def getXY(self): # 26
return [self._x, self._y] # 27
# 28
def __str__(self): # 29
return f""({self._x},{self._y})"" # 30
# 31
# 32
class MovablePoint(Point): # 33
def __init__(self, x=0.0, y=0.0, xSpeed=0.0, ySpeed=0.0): # 34
super().__init__(x, y) # 35
self._xSpeed = xSpeed # 36
self._ySpeed = ySpeed # 37
# 38
@property # 39
def xSpeed(self): # 40
return self._xSpeed # 41
# 42
@xSpeed.setter # 43
def xSpeed(self, xSpeed): # 44
self._xSpeed = xSpeed # 45
# 46
@property # 47
def ySpeed(self): # 48
return self._ySpeed # 49
# 50
@ySpeed.setter # 51
def ySpeed(self, ySpeed): # 52
self._ySpeed = ySpeed # 53
# 54
def setSpeed(self, xSpeed, ySpeed): # 55
self._xSpeed = xSpeed # 56
self._ySpeed = ySpeed # 57
# 58
def getSpeed(self): # 59
return [self._xSpeed, self._ySpeed] # 60
# 61
def __str__(self): # 62
return super().__str__() + f"",speed=({self._xSpeed},{self._ySpeed})"" # 63
# 64
def move(self): # 65
self.x += self._xSpeed # 66
self.y += self._ySpeed # 67
return self # 68
# 69
# 70
if __name__ == ""__main__"": # 71
m1 = MovablePoint(2.0, 3.0, 1.0, 1.0) # 72
print(m1.getSpeed()) # 73"
103,MovablePoint,OOP_prepared,"[72, 35, 3, 4, 36, 37, 73, 66, 8, 12, 67, 16, 20, 68, 74, 63, 30]","class Point: # 1
def __init__(self, x=0.0, y=0.0): # 2
self._x = x # 3
self._y = y # 4
# 5
@property # 6
def x(self): # 7
return self._x # 8
# 9
@x.setter # 10
def x(self, x): # 11
self._x = x # 12
# 13
@property # 14
def y(self): # 15
return self._y # 16
# 17
@y.setter # 18
def y(self, y): # 19
self._y = y # 20
# 21
def setXY(self, x, y): # 22
self._x = x # 23
self._y = y # 24
# 25
def getXY(self): # 26
return [self._x, self._y] # 27
# 28
def __str__(self): # 29
return f""({self._x},{self._y})"" # 30
# 31
# 32
class MovablePoint(Point): # 33
def __init__(self, x=0.0, y=0.0, xSpeed=0.0, ySpeed=0.0): # 34
super().__init__(x, y) # 35
self._xSpeed = xSpeed # 36
self._ySpeed = ySpeed # 37
# 38
@property # 39
def xSpeed(self): # 40
return self._xSpeed # 41
# 42
@xSpeed.setter # 43
def xSpeed(self, xSpeed): # 44
self._xSpeed = xSpeed # 45
# 46
@property # 47
def ySpeed(self): # 48
return self._ySpeed # 49
# 50
@ySpeed.setter # 51
def ySpeed(self, ySpeed): # 52
self._ySpeed = ySpeed # 53
# 54
def setSpeed(self, xSpeed, ySpeed): # 55
self._xSpeed = xSpeed # 56
self._ySpeed = ySpeed # 57
# 58
def getSpeed(self): # 59
return [self._xSpeed, self._ySpeed] # 60
# 61
def __str__(self): # 62
return super().__str__() + f"",speed=({self._xSpeed},{self._ySpeed})"" # 63
# 64
def move(self): # 65
self.x += self._xSpeed # 66
self.y += self._ySpeed # 67
return self # 68
# 69
# 70
if __name__ == ""__main__"": # 71
m2 = MovablePoint(0.0, 0.0, 3.0, 3.0) # 72
m2.move() # 73
print(m2) # 74"
104,MovablePoint,OOP_prepared,"[72, 35, 3, 4, 36, 37, 73, 56, 57, 74, 66, 8, 12, 67, 16, 20, 68, 75, 63, 30]","class Point: # 1
def __init__(self, x=0.0, y=0.0): # 2
self._x = x # 3
self._y = y # 4
# 5
@property # 6
def x(self): # 7
return self._x # 8
# 9
@x.setter # 10
def x(self, x): # 11
self._x = x # 12
# 13
@property # 14
def y(self): # 15
return self._y # 16
# 17
@y.setter # 18
def y(self, y): # 19
self._y = y # 20
# 21
def setXY(self, x, y): # 22
self._x = x # 23
self._y = y # 24
# 25
def getXY(self): # 26
return [self._x, self._y] # 27
# 28
def __str__(self): # 29
return f""({self._x},{self._y})"" # 30
# 31
# 32
class MovablePoint(Point): # 33
def __init__(self, x=0.0, y=0.0, xSpeed=0.0, ySpeed=0.0): # 34
super().__init__(x, y) # 35
self._xSpeed = xSpeed # 36
self._ySpeed = ySpeed # 37
# 38
@property # 39
def xSpeed(self): # 40
return self._xSpeed # 41
# 42
@xSpeed.setter # 43
def xSpeed(self, xSpeed): # 44
self._xSpeed = xSpeed # 45
# 46
@property # 47
def ySpeed(self): # 48
return self._ySpeed # 49
# 50
@ySpeed.setter # 51
def ySpeed(self, ySpeed): # 52
self._ySpeed = ySpeed # 53
# 54
def setSpeed(self, xSpeed, ySpeed): # 55
self._xSpeed = xSpeed # 56
self._ySpeed = ySpeed # 57
# 58
def getSpeed(self): # 59
return [self._xSpeed, self._ySpeed] # 60
# 61
def __str__(self): # 62
return super().__str__() + f"",speed=({self._xSpeed},{self._ySpeed})"" # 63
# 64
def move(self): # 65
self.x += self._xSpeed # 66
self.y += self._ySpeed # 67
return self # 68
# 69
# 70
if __name__ == ""__main__"": # 71
m3 = MovablePoint(5.0, 5.0, 1.0, 1.0) # 72
m3.setSpeed(2.0, 3.0) # 73
m3.move() # 74
print(m3) # 75"
105,MovableRectangle,OOP_prepared,"[106, 23, 24, 25, 26, 107, 56, 108, 53]","from abc import ABC, abstractmethod # 1
# 2
class Movable(ABC): # 3
@abstractmethod # 4
def move_up(self): # 5
pass # 6
# 7
@abstractmethod # 8
def move_down(self): # 9
pass # 10
# 11
@abstractmethod # 12
def move_left(self): # 13
pass # 14
# 15
@abstractmethod # 16
def move_right(self): # 17
pass # 18
# 19
# 20
class MovablePoint(Movable): # 21
def __init__(self, x=0, y=0, x_speed=0, y_speed=0): # 22
self.x = x # 23
self.y = y # 24
self.x_speed = x_speed # 25
self.y_speed = y_speed # 26
# 27
def get_x(self): # 28
return self.x # 29
# 30
def set_x(self, x): # 31
self.x = x # 32
# 33
def get_y(self): # 34
return self.y # 35
# 36
def set_y(self, y): # 37
self.y = y # 38
# 39
def get_x_speed(self): # 40
return self.x_speed # 41
# 42
def set_x_speed(self, x_speed): # 43
self.x_speed = x_speed # 44
# 45
def get_y_speed(self): # 46
return self.y_speed # 47
# 48
def set_y_speed(self, y_speed): # 49
self.y_speed = y_speed # 50
# 51
def __str__(self): # 52
return f""({self.x},{self.y}) speed={self.x_speed},{self.y_speed}"" # 53
# 54
def move_up(self): # 55
self.y -= self.y_speed # 56
# 57
def move_down(self): # 58
self.y += self.y_speed # 59
# 60
def move_left(self): # 61
self.x -= self.x_speed # 62
# 63
def move_right(self): # 64
self.x += self.x_speed # 65
# 66
# 67
class MovableRectangle(Movable): # 68
def __init__(self, top_left=None, bottom_right=None): # 69
self.top_left = top_left if top_left else MovablePoint() # 70
self.bottom_right = bottom_right if bottom_right else MovablePoint() # 71
# 72
def get_top_left(self): # 73
return self.top_left # 74
# 75
def set_top_left(self, top_left): # 76
self.top_left = top_left # 77
# 78
def get_bottom_right(self): # 79
return self.bottom_right # 80
# 81
def set_bottom_right(self, bottom_right): # 82
self.bottom_right = bottom_right # 83
# 84
def __str__(self): # 85
return f""MovableRectangle[topLeft={self.top_left}, bottomRight={self.bottom_right}]"" # 86
# 87
def move_up(self): # 88
self.top_left.set_y(self.top_left.get_y() - self.top_left.get_y_speed()) # 89
self.bottom_right.set_y(self.bottom_right.get_y() - self.bottom_right.get_y_speed()) # 90
# 91
def move_down(self): # 92
self.top_left.set_y(self.top_left.get_y() + self.top_left.get_y_speed()) # 93
self.bottom_right.set_y(self.bottom_right.get_y() + self.bottom_right.get_y_speed()) # 94
# 95
def move_left(self): # 96
self.top_left.set_x(self.top_left.get_x() - self.top_left.get_x_speed()) # 97
self.bottom_right.set_x(self.bottom_right.get_x() - self.bottom_right.get_x_speed()) # 98
# 99
def move_right(self): # 100
self.top_left.set_x(self.top_left.get_x() + self.top_left.get_x_speed()) # 101
self.bottom_right.set_x(self.bottom_right.get_x() + self.bottom_right.get_x_speed()) # 102
# 103
# 104
if __name__ == ""__main__"": # 105
point = MovablePoint(5, 5, 1, 1) # 106
point.move_up() # 107
print(point) # 108"
106,MovableRectangle,OOP_prepared,"[107, 23, 24, 25, 26, 108, 59, 109, 62, 110, 53]","from abc import ABC, abstractmethod # 1
# 2
class Movable(ABC): # 3
@abstractmethod # 4
def move_up(self): # 5
pass # 6
# 7
@abstractmethod # 8
def move_down(self): # 9
pass # 10
# 11
@abstractmethod # 12
def move_left(self): # 13
pass # 14
# 15
@abstractmethod # 16
def move_right(self): # 17
pass # 18
# 19
# 20
class MovablePoint(Movable): # 21
def __init__(self, x=0, y=0, x_speed=0, y_speed=0): # 22
self.x = x # 23
self.y = y # 24
self.x_speed = x_speed # 25
self.y_speed = y_speed # 26
# 27
def get_x(self): # 28
return self.x # 29
# 30
def set_x(self, x): # 31
self.x = x # 32
# 33
def get_y(self): # 34
return self.y # 35
# 36
def set_y(self, y): # 37
self.y = y # 38
# 39
def get_x_speed(self): # 40
return self.x_speed # 41
# 42
def set_x_speed(self, x_speed): # 43
self.x_speed = x_speed # 44
# 45
def get_y_speed(self): # 46
return self.y_speed # 47
# 48
def set_y_speed(self, y_speed): # 49
self.y_speed = y_speed # 50
# 51
def __str__(self): # 52
return f""({self.x},{self.y}) speed={self.x_speed},{self.y_speed}"" # 53
# 54
def move_up(self): # 55
self.y -= self.y_speed # 56
# 57
def move_down(self): # 58
self.y += self.y_speed # 59
# 60
def move_left(self): # 61
self.x -= self.x_speed # 62
# 63
def move_right(self): # 64
self.x += self.x_speed # 65
# 66
# 67
class MovableRectangle(Movable): # 68
def __init__(self, top_left=None, bottom_right=None): # 69
self.top_left = top_left if top_left else MovablePoint() # 70
self.bottom_right = bottom_right if bottom_right else MovablePoint() # 71
# 72
def get_top_left(self): # 73
return self.top_left # 74
# 75
def set_top_left(self, top_left): # 76
self.top_left = top_left # 77
# 78
def get_bottom_right(self): # 79
return self.bottom_right # 80
# 81
def set_bottom_right(self, bottom_right): # 82
self.bottom_right = bottom_right # 83
# 84
def __str__(self): # 85
return f""MovableRectangle[topLeft={self.top_left}, bottomRight={self.bottom_right}]"" # 86
# 87
def move_up(self): # 88
self.top_left.set_y(self.top_left.get_y() - self.top_left.get_y_speed()) # 89
self.bottom_right.set_y(self.bottom_right.get_y() - self.bottom_right.get_y_speed()) # 90
# 91
def move_down(self): # 92
self.top_left.set_y(self.top_left.get_y() + self.top_left.get_y_speed()) # 93
self.bottom_right.set_y(self.bottom_right.get_y() + self.bottom_right.get_y_speed()) # 94
# 95
def move_left(self): # 96
self.top_left.set_x(self.top_left.get_x() - self.top_left.get_x_speed()) # 97
self.bottom_right.set_x(self.bottom_right.get_x() - self.bottom_right.get_x_speed()) # 98
# 99
def move_right(self): # 100
self.top_left.set_x(self.top_left.get_x() + self.top_left.get_x_speed()) # 101
self.bottom_right.set_x(self.bottom_right.get_x() + self.bottom_right.get_x_speed()) # 102
# 103
# 104
# 105
if __name__ == ""__main__"": # 106
point2 = MovablePoint(2, 3, 2, 2) # 107
point2.move_down() # 108
point2.move_left() # 109
print(point2) # 110"
107,MovableRectangle,OOP_prepared,"[107, 23, 24, 25, 26, 23, 24, 25, 26, 70, 71, 108, 89, 35, 47, 38, 90, 35, 47, 38, 109, 86, 53, 53]","from abc import ABC, abstractmethod # 1
# 2
class Movable(ABC): # 3
@abstractmethod # 4
def move_up(self): # 5
pass # 6
# 7
@abstractmethod # 8
def move_down(self): # 9
pass # 10
# 11
@abstractmethod # 12
def move_left(self): # 13
pass # 14
# 15
@abstractmethod # 16
def move_right(self): # 17
pass # 18
# 19
# 20
class MovablePoint(Movable): # 21
def __init__(self, x=0, y=0, x_speed=0, y_speed=0): # 22
self.x = x # 23
self.y = y # 24
self.x_speed = x_speed # 25
self.y_speed = y_speed # 26
# 27
def get_x(self): # 28
return self.x # 29
# 30
def set_x(self, x): # 31
self.x = x # 32
# 33
def get_y(self): # 34
return self.y # 35
# 36
def set_y(self, y): # 37
self.y = y # 38
# 39
def get_x_speed(self): # 40
return self.x_speed # 41
# 42
def set_x_speed(self, x_speed): # 43
self.x_speed = x_speed # 44
# 45
def get_y_speed(self): # 46
return self.y_speed # 47
# 48
def set_y_speed(self, y_speed): # 49
self.y_speed = y_speed # 50
# 51
def __str__(self): # 52
return f""({self.x},{self.y}) speed={self.x_speed},{self.y_speed}"" # 53
# 54
def move_up(self): # 55
self.y -= self.y_speed # 56
# 57
def move_down(self): # 58
self.y += self.y_speed # 59
# 60
def move_left(self): # 61
self.x -= self.x_speed # 62
# 63
def move_right(self): # 64
self.x += self.x_speed # 65
# 66
# 67
class MovableRectangle(Movable): # 68
def __init__(self, top_left=None, bottom_right=None): # 69
self.top_left = top_left if top_left else MovablePoint() # 70
self.bottom_right = bottom_right if bottom_right else MovablePoint() # 71
# 72
def get_top_left(self): # 73
return self.top_left # 74
# 75
def set_top_left(self, top_left): # 76
self.top_left = top_left # 77
# 78
def get_bottom_right(self): # 79
return self.bottom_right # 80
# 81
def set_bottom_right(self, bottom_right): # 82
self.bottom_right = bottom_right # 83
# 84
def __str__(self): # 85
return f""MovableRectangle[topLeft={self.top_left}, bottomRight={self.bottom_right}]"" # 86
# 87
def move_up(self): # 88
self.top_left.set_y(self.top_left.get_y() - self.top_left.get_y_speed()) # 89
self.bottom_right.set_y(self.bottom_right.get_y() - self.bottom_right.get_y_speed()) # 90
# 91
def move_down(self): # 92
self.top_left.set_y(self.top_left.get_y() + self.top_left.get_y_speed()) # 93
self.bottom_right.set_y(self.bottom_right.get_y() + self.bottom_right.get_y_speed()) # 94
# 95
def move_left(self): # 96
self.top_left.set_x(self.top_left.get_x() - self.top_left.get_x_speed()) # 97
self.bottom_right.set_x(self.bottom_right.get_x() - self.bottom_right.get_x_speed()) # 98
# 99
def move_right(self): # 100
self.top_left.set_x(self.top_left.get_x() + self.top_left.get_x_speed()) # 101
self.bottom_right.set_x(self.bottom_right.get_x() + self.bottom_right.get_x_speed()) # 102
# 103
# 104
# 105
if __name__ == ""__main__"": # 106
rectangle = MovableRectangle(MovablePoint(1, 1, 1, 1), MovablePoint(4, 4, 1, 1)) # 107
rectangle.move_up() # 108
print(rectangle) # 109"
108,MovableRectangle,OOP_prepared,"[107, 23, 24, 25, 26, 23, 24, 25, 26, 70, 71, 108, 97, 29, 41, 32, 98, 29, 41, 32, 109, 93, 35, 47, 38, 94, 35, 47, 38, 110, 86, 53, 53]","from abc import ABC, abstractmethod # 1
# 2
class Movable(ABC): # 3
@abstractmethod # 4
def move_up(self): # 5
pass # 6
# 7
@abstractmethod # 8
def move_down(self): # 9
pass # 10
# 11
@abstractmethod # 12
def move_left(self): # 13
pass # 14
# 15
@abstractmethod # 16
def move_right(self): # 17
pass # 18
# 19
# 20
class MovablePoint(Movable): # 21
def __init__(self, x=0, y=0, x_speed=0, y_speed=0): # 22
self.x = x # 23
self.y = y # 24
self.x_speed = x_speed # 25
self.y_speed = y_speed # 26
# 27
def get_x(self): # 28
return self.x # 29
# 30
def set_x(self, x): # 31
self.x = x # 32
# 33
def get_y(self): # 34
return self.y # 35
# 36
def set_y(self, y): # 37
self.y = y # 38
# 39
def get_x_speed(self): # 40
return self.x_speed # 41
# 42
def set_x_speed(self, x_speed): # 43
self.x_speed = x_speed # 44
# 45
def get_y_speed(self): # 46
return self.y_speed # 47
# 48
def set_y_speed(self, y_speed): # 49
self.y_speed = y_speed # 50
# 51
def __str__(self): # 52
return f""({self.x},{self.y}) speed={self.x_speed},{self.y_speed}"" # 53
# 54
def move_up(self): # 55
self.y -= self.y_speed # 56
# 57
def move_down(self): # 58
self.y += self.y_speed # 59
# 60
def move_left(self): # 61
self.x -= self.x_speed # 62
# 63
def move_right(self): # 64
self.x += self.x_speed # 65
# 66
# 67
class MovableRectangle(Movable): # 68
def __init__(self, top_left=None, bottom_right=None): # 69
self.top_left = top_left if top_left else MovablePoint() # 70
self.bottom_right = bottom_right if bottom_right else MovablePoint() # 71
# 72
def get_top_left(self): # 73
return self.top_left # 74
# 75
def set_top_left(self, top_left): # 76
self.top_left = top_left # 77
# 78
def get_bottom_right(self): # 79
return self.bottom_right # 80
# 81
def set_bottom_right(self, bottom_right): # 82
self.bottom_right = bottom_right # 83
# 84
def __str__(self): # 85
return f""MovableRectangle[topLeft={self.top_left}, bottomRight={self.bottom_right}]"" # 86
# 87
def move_up(self): # 88
self.top_left.set_y(self.top_left.get_y() - self.top_left.get_y_speed()) # 89
self.bottom_right.set_y(self.bottom_right.get_y() - self.bottom_right.get_y_speed()) # 90
# 91
def move_down(self): # 92
self.top_left.set_y(self.top_left.get_y() + self.top_left.get_y_speed()) # 93
self.bottom_right.set_y(self.bottom_right.get_y() + self.bottom_right.get_y_speed()) # 94
# 95
def move_left(self): # 96
self.top_left.set_x(self.top_left.get_x() - self.top_left.get_x_speed()) # 97
self.bottom_right.set_x(self.bottom_right.get_x() - self.bottom_right.get_x_speed()) # 98
# 99
def move_right(self): # 100
self.top_left.set_x(self.top_left.get_x() + self.top_left.get_x_speed()) # 101
self.bottom_right.set_x(self.bottom_right.get_x() + self.bottom_right.get_x_speed()) # 102
# 103
# 104
# 105
if __name__ == ""__main__"": # 106
rectangle2 = MovableRectangle(MovablePoint(0, 0, 2, 2), MovablePoint(5, 5, 2, 2)) # 107
rectangle2.move_left() # 108
rectangle2.move_down() # 109
print(rectangle2) # 110"
109,MovableRectangle,OOP_prepared,"[106, 23, 24, 25, 26, 107, 56, 108, 62, 109, 32, 110, 38, 111, 53]","from abc import ABC, abstractmethod # 1
# 2
class Movable(ABC): # 3
@abstractmethod # 4
def move_up(self): # 5
pass # 6
# 7
@abstractmethod # 8
def move_down(self): # 9
pass # 10
# 11
@abstractmethod # 12
def move_left(self): # 13
pass # 14
# 15
@abstractmethod # 16
def move_right(self): # 17
pass # 18
# 19
# 20
class MovablePoint(Movable): # 21
def __init__(self, x=0, y=0, x_speed=0, y_speed=0): # 22
self.x = x # 23
self.y = y # 24
self.x_speed = x_speed # 25
self.y_speed = y_speed # 26
# 27
def get_x(self): # 28
return self.x # 29
# 30
def set_x(self, x): # 31
self.x = x # 32
# 33
def get_y(self): # 34
return self.y # 35
# 36
def set_y(self, y): # 37
self.y = y # 38
# 39
def get_x_speed(self): # 40
return self.x_speed # 41
# 42
def set_x_speed(self, x_speed): # 43
self.x_speed = x_speed # 44
# 45
def get_y_speed(self): # 46
return self.y_speed # 47
# 48
def set_y_speed(self, y_speed): # 49
self.y_speed = y_speed # 50
# 51
def __str__(self): # 52
return f""({self.x},{self.y}) speed={self.x_speed},{self.y_speed}"" # 53
# 54
def move_up(self): # 55
self.y -= self.y_speed # 56
# 57
def move_down(self): # 58
self.y += self.y_speed # 59
# 60
def move_left(self): # 61
self.x -= self.x_speed # 62
# 63
def move_right(self): # 64
self.x += self.x_speed # 65
# 66
# 67
class MovableRectangle(Movable): # 68
def __init__(self, top_left=None, bottom_right=None): # 69
self.top_left = top_left if top_left else MovablePoint() # 70
self.bottom_right = bottom_right if bottom_right else MovablePoint() # 71
# 72
def get_top_left(self): # 73
return self.top_left # 74
# 75
def set_top_left(self, top_left): # 76
self.top_left = top_left # 77
# 78
def get_bottom_right(self): # 79
return self.bottom_right # 80
# 81
def set_bottom_right(self, bottom_right): # 82
self.bottom_right = bottom_right # 83
# 84
def __str__(self): # 85
return f""MovableRectangle[topLeft={self.top_left}, bottomRight={self.bottom_right}]"" # 86
# 87
def move_up(self): # 88
self.top_left.set_y(self.top_left.get_y() - self.top_left.get_y_speed()) # 89
self.bottom_right.set_y(self.bottom_right.get_y() - self.bottom_right.get_y_speed()) # 90
# 91
def move_down(self): # 92
self.top_left.set_y(self.top_left.get_y() + self.top_left.get_y_speed()) # 93
self.bottom_right.set_y(self.bottom_right.get_y() + self.bottom_right.get_y_speed()) # 94
# 95
def move_left(self): # 96
self.top_left.set_x(self.top_left.get_x() - self.top_left.get_x_speed()) # 97
self.bottom_right.set_x(self.bottom_right.get_x() - self.bottom_right.get_x_speed()) # 98
# 99
def move_right(self): # 100
self.top_left.set_x(self.top_left.get_x() + self.top_left.get_x_speed()) # 101
self.bottom_right.set_x(self.bottom_right.get_x() + self.bottom_right.get_x_speed()) # 102
# 103
# 104
if __name__ == ""__main__"": # 105
point3 = MovablePoint(0, 0, 3, 3) # 106
point3.move_up() # 107
point3.move_left() # 108
point3.set_x(10) # 109
point3.set_y(20) # 110
print(point3) # 111"
110,MyCircle,OOP_prepared,"[93, 5, 6, 41, 42, 47, 94, 5, 6, 41, 42, 47, 86, 28, 30, 33]","import math # 1
# 2
class MyPoint: # 3
def __init__(self, x=0, y=0): # 4
self.x = x # 5
self.y = y # 6
# 7
def get_x(self): # 8
return self.x # 9
# 10
def set_x(self, x): # 11
self.x = x # 12
# 13
def get_y(self): # 14
return self.y # 15
# 16
def set_y(self, y): # 17
self.y = y # 18
# 19
def get_xy(self): # 20
return [self.x, self.y] # 21
# 22
def set_xy(self, x, y): # 23
self.x = x # 24
self.y = y # 25
# 26
def distance(self, x=None, y=None, another=None): # 27
if another is not None: # 28
return math.sqrt((another.x - self.x) ** 2 + (another.y - self.y) ** 2) # 29
elif x is not None and y is not None: # 30
return math.sqrt((x - self.x) ** 2 + (y - self.y) ** 2) # 31
else: # 32
return math.sqrt(self.x ** 2 + self.y ** 2) # 33
# 34
def __str__(self): # 35
return f""({self.x},{self.y})"" # 36
# 37
# 38
class MyCircle: # 39
def __init__(self, center=None, radius=1): # 40
if isinstance(center, MyPoint): # 41
self.center = center # 42
elif isinstance(center, (list, tuple)) and len(center) == 2: # 43
self.center = MyPoint(center[0], center[1]) # 44
else: # 45
self.center = MyPoint() # 46
self.radius = radius # 47
# 48
def get_center(self): # 49
return self.center # 50
# 51
def set_center(self, center): # 52
self.center = center # 53
# 54
def get_radius(self): # 55
return self.radius # 56
# 57
def set_radius(self, radius): # 58
self.radius = radius # 59
# 60
def get_center_x(self): # 61
return self.center.get_x() # 62
# 63
def get_center_y(self): # 64
return self.center.get_y() # 65
# 66
def set_center_x(self, x): # 67
self.center.set_x(x) # 68
# 69
def set_center_y(self, y): # 70
self.center.set_y(y) # 71
# 72
def get_center_xy(self): # 73
return self.center.get_xy() # 74
# 75
def set_center_xy(self, x, y): # 76
self.center.set_xy(x, y) # 77
# 78
def get_area(self): # 79
return math.pi * self.radius ** 2 # 80
# 81
def get_circumference(self): # 82
return 2 * math.pi * self.radius # 83
# 84
def distance(self, another): # 85
return self.center.distance(another.center) # 86
# 87
def __str__(self): # 88
return f""MyCircle[radius={self.radius},center={self.center}]"" # 89
# 90
# 91
if __name__ == ""__main__"": # 92
my_circle = MyCircle(MyPoint(1, 1), 3) # 93
print(my_circle.distance(MyCircle(MyPoint(4, 5), 2))) # 94"
111,MyCircle,OOP_prepared,"[93, 5, 6, 41, 42, 47, 94, 5, 6, 41, 42, 47, 86, 28, 30, 33]","import math # 1
# 2
class MyPoint: # 3
def __init__(self, x=0, y=0): # 4
self.x = x # 5
self.y = y # 6
# 7
def get_x(self): # 8
return self.x # 9
# 10
def set_x(self, x): # 11
self.x = x # 12
# 13
def get_y(self): # 14
return self.y # 15
# 16
def set_y(self, y): # 17
self.y = y # 18
# 19
def get_xy(self): # 20
return [self.x, self.y] # 21
# 22
def set_xy(self, x, y): # 23
self.x = x # 24
self.y = y # 25
# 26
def distance(self, x=None, y=None, another=None): # 27
if another is not None: # 28
return math.sqrt((another.x - self.x) ** 2 + (another.y - self.y) ** 2) # 29
elif x is not None and y is not None: # 30
return math.sqrt((x - self.x) ** 2 + (y - self.y) ** 2) # 31
else: # 32
return math.sqrt(self.x ** 2 + self.y ** 2) # 33
# 34
def __str__(self): # 35
return f""({self.x},{self.y})"" # 36
# 37
# 38
class MyCircle: # 39
def __init__(self, center=None, radius=1): # 40
if isinstance(center, MyPoint): # 41
self.center = center # 42
elif isinstance(center, (list, tuple)) and len(center) == 2: # 43
self.center = MyPoint(center[0], center[1]) # 44
else: # 45
self.center = MyPoint() # 46
self.radius = radius # 47
# 48
def get_center(self): # 49
return self.center # 50
# 51
def set_center(self, center): # 52
self.center = center # 53
# 54
def get_radius(self): # 55
return self.radius # 56
# 57
def set_radius(self, radius): # 58
self.radius = radius # 59
# 60
def get_center_x(self): # 61
return self.center.get_x() # 62
# 63
def get_center_y(self): # 64
return self.center.get_y() # 65
# 66
def set_center_x(self, x): # 67
self.center.set_x(x) # 68
# 69
def set_center_y(self, y): # 70
self.center.set_y(y) # 71
# 72
def get_center_xy(self): # 73
return self.center.get_xy() # 74
# 75
def set_center_xy(self, x, y): # 76
self.center.set_xy(x, y) # 77
# 78
def get_area(self): # 79
return math.pi * self.radius ** 2 # 80
# 81
def get_circumference(self): # 82
return 2 * math.pi * self.radius # 83
# 84
def distance(self, another): # 85
return self.center.distance(another.center) # 86
# 87
def __str__(self): # 88
return f""MyCircle[radius={self.radius},center={self.center}]"" # 89
# 90
# 91
if __name__ == ""__main__"": # 92
my_circle = MyCircle(MyPoint(2, 3), 4) # 93
print(my_circle.distance(MyCircle(MyPoint(6, 9), 5))) # 94"
112,MyCircle,OOP_prepared,"[93, 5, 6, 41, 42, 47, 94, 62, 9, 95, 65, 15, 96, 80]","import math # 1
# 2
class MyPoint: # 3
def __init__(self, x=0, y=0): # 4
self.x = x # 5
self.y = y # 6
# 7
def get_x(self): # 8
return self.x # 9
# 10
def set_x(self, x): # 11
self.x = x # 12
# 13
def get_y(self): # 14
return self.y # 15
# 16
def set_y(self, y): # 17
self.y = y # 18
# 19
def get_xy(self): # 20
return [self.x, self.y] # 21
# 22
def set_xy(self, x, y): # 23
self.x = x # 24
self.y = y # 25
# 26
def distance(self, x=None, y=None, another=None): # 27
if another is not None: # 28
return math.sqrt((another.x - self.x) ** 2 + (another.y - self.y) ** 2) # 29
elif x is not None and y is not None: # 30
return math.sqrt((x - self.x) ** 2 + (y - self.y) ** 2) # 31
else: # 32
return math.sqrt(self.x ** 2 + self.y ** 2) # 33
# 34
def __str__(self): # 35
return f""({self.x},{self.y})"" # 36
# 37
# 38
class MyCircle: # 39
def __init__(self, center=None, radius=1): # 40
if isinstance(center, MyPoint): # 41
self.center = center # 42
elif isinstance(center, (list, tuple)) and len(center) == 2: # 43
self.center = MyPoint(center[0], center[1]) # 44
else: # 45
self.center = MyPoint() # 46
self.radius = radius # 47
# 48
def get_center(self): # 49
return self.center # 50
# 51
def set_center(self, center): # 52
self.center = center # 53
# 54
def get_radius(self): # 55
return self.radius # 56
# 57
def set_radius(self, radius): # 58
self.radius = radius # 59
# 60
def get_center_x(self): # 61
return self.center.get_x() # 62
# 63
def get_center_y(self): # 64
return self.center.get_y() # 65
# 66
def set_center_x(self, x): # 67
self.center.set_x(x) # 68
# 69
def set_center_y(self, y): # 70
self.center.set_y(y) # 71
# 72
def get_center_xy(self): # 73
return self.center.get_xy() # 74
# 75
def set_center_xy(self, x, y): # 76
self.center.set_xy(x, y) # 77
# 78
def get_area(self): # 79
return math.pi * self.radius ** 2 # 80
# 81
def get_circumference(self): # 82
return 2 * math.pi * self.radius # 83
# 84
def distance(self, another): # 85
return self.center.distance(another.center) # 86
# 87
def __str__(self): # 88
return f""MyCircle[radius={self.radius},center={self.center}]"" # 89
# 90
# 91
if __name__ == ""__main__"": # 92
circle1 = MyCircle(MyPoint(0, 0), 5) # 93
print(circle1.get_center_x()) # 94
print(circle1.get_center_y()) # 95
print(circle1.get_area()) # 96"
113,MyCircle,OOP_prepared,"[93, 5, 6, 41, 42, 47, 94, 41, 43, 44, 5, 6, 47, 95, 86, 28, 30, 33]","import math # 1
# 2
class MyPoint: # 3
def __init__(self, x=0, y=0): # 4
self.x = x # 5
self.y = y # 6
# 7
def get_x(self): # 8
return self.x # 9
# 10
def set_x(self, x): # 11
self.x = x # 12
# 13
def get_y(self): # 14
return self.y # 15
# 16
def set_y(self, y): # 17
self.y = y # 18
# 19
def get_xy(self): # 20
return [self.x, self.y] # 21
# 22
def set_xy(self, x, y): # 23
self.x = x # 24
self.y = y # 25
# 26
def distance(self, x=None, y=None, another=None): # 27
if another is not None: # 28
return math.sqrt((another.x - self.x) ** 2 + (another.y - self.y) ** 2) # 29
elif x is not None and y is not None: # 30
return math.sqrt((x - self.x) ** 2 + (y - self.y) ** 2) # 31
else: # 32
return math.sqrt(self.x ** 2 + self.y ** 2) # 33
# 34
def __str__(self): # 35
return f""({self.x},{self.y})"" # 36
# 37
# 38
class MyCircle: # 39
def __init__(self, center=None, radius=1): # 40
if isinstance(center, MyPoint): # 41
self.center = center # 42
elif isinstance(center, (list, tuple)) and len(center) == 2: # 43
self.center = MyPoint(center[0], center[1]) # 44
else: # 45
self.center = MyPoint() # 46
self.radius = radius # 47
# 48
def get_center(self): # 49
return self.center # 50
# 51
def set_center(self, center): # 52
self.center = center # 53
# 54
def get_radius(self): # 55
return self.radius # 56
# 57
def set_radius(self, radius): # 58
self.radius = radius # 59
# 60
def get_center_x(self): # 61
return self.center.get_x() # 62
# 63
def get_center_y(self): # 64
return self.center.get_y() # 65
# 66
def set_center_x(self, x): # 67
self.center.set_x(x) # 68
# 69
def set_center_y(self, y): # 70
self.center.set_y(y) # 71
# 72
def get_center_xy(self): # 73
return self.center.get_xy() # 74
# 75
def set_center_xy(self, x, y): # 76
self.center.set_xy(x, y) # 77
# 78
def get_area(self): # 79
return math.pi * self.radius ** 2 # 80
# 81
def get_circumference(self): # 82
return 2 * math.pi * self.radius # 83
# 84
def distance(self, another): # 85
return self.center.distance(another.center) # 86
# 87
def __str__(self): # 88
return f""MyCircle[radius={self.radius},center={self.center}]"" # 89
# 90
# 91
if __name__ == ""__main__"": # 92
circle1 = MyCircle(MyPoint(0, 0), 5) # 93
circle2 = MyCircle([2, 2], 4) # 94
print(circle1.distance(circle2)) # 95"
114,MyCircle,OOP_prepared,"[93, 41, 43, 46, 5, 6, 47, 94, 77, 24, 25, 95, 59, 96, 83]","import math # 1
# 2
class MyPoint: # 3
def __init__(self, x=0, y=0): # 4
self.x = x # 5
self.y = y # 6
# 7
def get_x(self): # 8
return self.x # 9
# 10
def set_x(self, x): # 11
self.x = x # 12
# 13
def get_y(self): # 14
return self.y # 15
# 16
def set_y(self, y): # 17
self.y = y # 18
# 19
def get_xy(self): # 20
return [self.x, self.y] # 21
# 22
def set_xy(self, x, y): # 23
self.x = x # 24
self.y = y # 25
# 26
def distance(self, x=None, y=None, another=None): # 27
if another is not None: # 28
return math.sqrt((another.x - self.x) ** 2 + (another.y - self.y) ** 2) # 29
elif x is not None and y is not None: # 30
return math.sqrt((x - self.x) ** 2 + (y - self.y) ** 2) # 31
else: # 32
return math.sqrt(self.x ** 2 + self.y ** 2) # 33
# 34
def __str__(self): # 35
return f""({self.x},{self.y})"" # 36
# 37
# 38
class MyCircle: # 39
def __init__(self, center=None, radius=1): # 40
if isinstance(center, MyPoint): # 41
self.center = center # 42
elif isinstance(center, (list, tuple)) and len(center) == 2: # 43
self.center = MyPoint(center[0], center[1]) # 44
else: # 45
self.center = MyPoint() # 46
self.radius = radius # 47
# 48
def get_center(self): # 49
return self.center # 50
# 51
def set_center(self, center): # 52
self.center = center # 53
# 54
def get_radius(self): # 55
return self.radius # 56
# 57
def set_radius(self, radius): # 58
self.radius = radius # 59
# 60
def get_center_x(self): # 61
return self.center.get_x() # 62
# 63
def get_center_y(self): # 64
return self.center.get_y() # 65
# 66
def set_center_x(self, x): # 67
self.center.set_x(x) # 68
# 69
def set_center_y(self, y): # 70
self.center.set_y(y) # 71
# 72
def get_center_xy(self): # 73
return self.center.get_xy() # 74
# 75
def set_center_xy(self, x, y): # 76
self.center.set_xy(x, y) # 77
# 78
def get_area(self): # 79
return math.pi * self.radius ** 2 # 80
# 81
def get_circumference(self): # 82
return 2 * math.pi * self.radius # 83
# 84
def distance(self, another): # 85
return self.center.distance(another.center) # 86
# 87
def __str__(self): # 88
return f""MyCircle[radius={self.radius},center={self.center}]"" # 89
# 90
# 91
if __name__ == ""__main__"": # 92
circle3 = MyCircle() # 93
circle3.set_center_xy(3, 3) # 94
circle3.set_radius(7) # 95
print(circle3.get_circumference()) # 96"
115,MyComplex,OOP_prepared,"[82, 5, 6, 83, 5, 6, 84, 47, 48, 49, 85, 21]","import math # 1
# 2
class MyComplex: # 3
def __init__(self, real=0.0, imag=0.0): # 4
self.real = real # 5
self.imag = imag # 6
# 7
def get_real(self): # 8
return self.real # 9
# 10
def set_real(self, real): # 11
self.real = real # 12
# 13
def get_imag(self): # 14
return self.imag # 15
# 16
def set_imag(self, imag): # 17
self.imag = imag # 18
# 19
def __str__(self): # 20
return f""({self.real}+{self.imag}i)"" # 21
# 22
def is_real(self): # 23
return self.real == 0 # 24
# 25
def is_imaginary(self): # 26
return self.imag == 0 # 27
# 28
def equals(self, real, imag): # 29
return self.real == real and self.imag == imag # 30
# 31
def equals_complex(self, another): # 32
return self.real == another.real and self.imag == another.imag # 33
# 34
def magnitude(self): # 35
return math.sqrt(self.real**2 + self.imag**2) # 36
# 37
def argument(self): # 38
return math.atan2(self.imag, self.real) # 39
# 40
def add_into(self, right): # 41
self.real += right.real # 42
self.imag += right.imag # 43
return self # 44
# 45
def add(self, right): # 46
self.real += right.real # 47
self.imag += right.imag # 48
return self # 49
# 50
def add_new(self, right): # 51
return MyComplex(self.real + right.real, self.imag + right.imag) # 52
# 53
def subtract(self, right): # 54
self.real -= right.real # 55
self.imag -= right.imag # 56
return self # 57
# 58
def subtract_new(self, right): # 59
return MyComplex(self.real - right.real, self.imag - right.imag) # 60
# 61
def multiply(self, right): # 62
real = self.real * right.real - self.imag * right.imag # 63
imag = self.real * right.imag + self.imag * right.real # 64
self.real = real # 65
self.imag = imag # 66
return self # 67
# 68
def divide(self, right): # 69
denominator = right.real**2 + right.imag**2 # 70
real = (self.real * right.real + self.imag * right.imag) / denominator # 71
imag = (self.imag * right.real - self.real * right.imag) / denominator # 72
self.real = real # 73
self.imag = imag # 74
return self # 75
# 76
def conjugate(self): # 77
self.imag *= -1 # 78
return self # 79
# 80
if __name__ == ""__main__"": # 81
c1 = MyComplex(3, 4) # 82
c2 = MyComplex(1, 2) # 83
c1.add(c2) # 84
print(c1) # 85"
116,MyComplex,OOP_prepared,"[82, 5, 6, 83, 5, 6, 84, 27, 85, 24, 86, 30, 87, 33]","import math # 1
# 2
class MyComplex: # 3
def __init__(self, real=0.0, imag=0.0): # 4
self.real = real # 5
self.imag = imag # 6
# 7
def get_real(self): # 8
return self.real # 9
# 10
def set_real(self, real): # 11
self.real = real # 12
# 13
def get_imag(self): # 14
return self.imag # 15
# 16
def set_imag(self, imag): # 17
self.imag = imag # 18
# 19
def __str__(self): # 20
return f""({self.real}+{self.imag}i)"" # 21
# 22
def is_real(self): # 23
return self.real == 0 # 24
# 25
def is_imaginary(self): # 26
return self.imag == 0 # 27
# 28
def equals(self, real, imag): # 29
return self.real == real and self.imag == imag # 30
# 31
def equals_complex(self, another): # 32
return self.real == another.real and self.imag == another.imag # 33
# 34
def magnitude(self): # 35
return math.sqrt(self.real**2 + self.imag**2) # 36
# 37
def argument(self): # 38
return math.atan2(self.imag, self.real) # 39
# 40
def add_into(self, right): # 41
self.real += right.real # 42
self.imag += right.imag # 43
return self # 44
# 45
def add(self, right): # 46
self.real += right.real # 47
self.imag += right.imag # 48
return self # 49
# 50
def add_new(self, right): # 51
return MyComplex(self.real + right.real, self.imag + right.imag) # 52
# 53
def subtract(self, right): # 54
self.real -= right.real # 55
self.imag -= right.imag # 56
return self # 57
# 58
def subtract_new(self, right): # 59
return MyComplex(self.real - right.real, self.imag - right.imag) # 60
# 61
def multiply(self, right): # 62
real = self.real * right.real - self.imag * right.imag # 63
imag = self.real * right.imag + self.imag * right.real # 64
self.real = real # 65
self.imag = imag # 66
return self # 67
# 68
def divide(self, right): # 69
denominator = right.real**2 + right.imag**2 # 70
real = (self.real * right.real + self.imag * right.imag) / denominator # 71
imag = (self.imag * right.real - self.real * right.imag) / denominator # 72
self.real = real # 73
self.imag = imag # 74
return self # 75
# 76
def conjugate(self): # 77
self.imag *= -1 # 78
return self # 79
# 80
if __name__ == ""__main__"": # 81
c3 = MyComplex(0, 5) # 82
c4 = MyComplex(0, 0) # 83
print(f""Test 2 - Is imaginary (c3): {c3.is_imaginary()}"") # 84
print(f""Test 2 - Is real (c4): {c4.is_real()}"") # 85
print(f""Test 2 - Equals (c3): {c3.equals(0, 5)}"") # 86
print(f""Test 2 - Equals complex (c4): {c4.equals_complex(c4)}"") # 87"
117,MyComplex,OOP_prepared,"[82, 5, 6, 83, 5, 6, 84, 52, 5, 6]","import math # 1
# 2
class MyComplex: # 3
def __init__(self, real=0.0, imag=0.0): # 4
self.real = real # 5
self.imag = imag # 6
# 7
def get_real(self): # 8
return self.real # 9
# 10
def set_real(self, real): # 11
self.real = real # 12
# 13
def get_imag(self): # 14
return self.imag # 15
# 16
def set_imag(self, imag): # 17
self.imag = imag # 18
# 19
def __str__(self): # 20
return f""({self.real}+{self.imag}i)"" # 21
# 22
def is_real(self): # 23
return self.real == 0 # 24
# 25
def is_imaginary(self): # 26
return self.imag == 0 # 27
# 28
def equals(self, real, imag): # 29
return self.real == real and self.imag == imag # 30
# 31
def equals_complex(self, another): # 32
return self.real == another.real and self.imag == another.imag # 33
# 34
def magnitude(self): # 35
return math.sqrt(self.real**2 + self.imag**2) # 36
# 37
def argument(self): # 38
return math.atan2(self.imag, self.real) # 39
# 40
def add_into(self, right): # 41
self.real += right.real # 42
self.imag += right.imag # 43
return self # 44
# 45
def add(self, right): # 46
self.real += right.real # 47
self.imag += right.imag # 48
return self # 49
# 50
def add_new(self, right): # 51
return MyComplex(self.real + right.real, self.imag + right.imag) # 52
# 53
def subtract(self, right): # 54
self.real -= right.real # 55
self.imag -= right.imag # 56
return self # 57
# 58
def subtract_new(self, right): # 59
return MyComplex(self.real - right.real, self.imag - right.imag) # 60
# 61
def multiply(self, right): # 62
real = self.real * right.real - self.imag * right.imag # 63
imag = self.real * right.imag + self.imag * right.real # 64
self.real = real # 65
self.imag = imag # 66
return self # 67
# 68
def divide(self, right): # 69
denominator = right.real**2 + right.imag**2 # 70
real = (self.real * right.real + self.imag * right.imag) / denominator # 71
imag = (self.imag * right.real - self.real * right.imag) / denominator # 72
self.real = real # 73
self.imag = imag # 74
return self # 75
# 76
def conjugate(self): # 77
self.imag *= -1 # 78
return self # 79
# 80
if __name__ == ""__main__"": # 81
c5 = MyComplex(1, 1) # 82
c6 = MyComplex(2, 3) # 83
result = c5.add_new(c6) # 84"
118,MyComplex,OOP_prepared,"[82, 5, 6, 83, 5, 6, 84, 60, 5, 6]","import math # 1
# 2
class MyComplex: # 3
def __init__(self, real=0.0, imag=0.0): # 4
self.real = real # 5
self.imag = imag # 6
# 7
def get_real(self): # 8
return self.real # 9
# 10
def set_real(self, real): # 11
self.real = real # 12
# 13
def get_imag(self): # 14
return self.imag # 15
# 16
def set_imag(self, imag): # 17
self.imag = imag # 18
# 19
def __str__(self): # 20
return f""({self.real}+{self.imag}i)"" # 21
# 22
def is_real(self): # 23
return self.real == 0 # 24
# 25
def is_imaginary(self): # 26
return self.imag == 0 # 27
# 28
def equals(self, real, imag): # 29
return self.real == real and self.imag == imag # 30
# 31
def equals_complex(self, another): # 32
return self.real == another.real and self.imag == another.imag # 33
# 34
def magnitude(self): # 35
return math.sqrt(self.real**2 + self.imag**2) # 36
# 37
def argument(self): # 38
return math.atan2(self.imag, self.real) # 39
# 40
def add_into(self, right): # 41
self.real += right.real # 42
self.imag += right.imag # 43
return self # 44
# 45
def add(self, right): # 46
self.real += right.real # 47
self.imag += right.imag # 48
return self # 49
# 50
def add_new(self, right): # 51
return MyComplex(self.real + right.real, self.imag + right.imag) # 52
# 53
def subtract(self, right): # 54
self.real -= right.real # 55
self.imag -= right.imag # 56
return self # 57
# 58
def subtract_new(self, right): # 59
return MyComplex(self.real - right.real, self.imag - right.imag) # 60
# 61
def multiply(self, right): # 62
real = self.real * right.real - self.imag * right.imag # 63
imag = self.real * right.imag + self.imag * right.real # 64
self.real = real # 65
self.imag = imag # 66
return self # 67
# 68
def divide(self, right): # 69
denominator = right.real**2 + right.imag**2 # 70
real = (self.real * right.real + self.imag * right.imag) / denominator # 71
imag = (self.imag * right.real - self.real * right.imag) / denominator # 72
self.real = real # 73
self.imag = imag # 74
return self # 75
# 76
def conjugate(self): # 77
self.imag *= -1 # 78
return self # 79
# 80
if __name__ == ""__main__"": # 81
c7 = MyComplex(3, 4) # 82
c8 = MyComplex(1, 2) # 83
result = c7.subtract_new(c8) # 84"
119,MyComplex,OOP_prepared,"[82, 5, 6, 83, 5, 6, 84, 63, 64, 65, 66, 67, 85, 21]","import math # 1
# 2
class MyComplex: # 3
def __init__(self, real=0.0, imag=0.0): # 4
self.real = real # 5
self.imag = imag # 6
# 7
def get_real(self): # 8
return self.real # 9
# 10
def set_real(self, real): # 11
self.real = real # 12
# 13
def get_imag(self): # 14
return self.imag # 15
# 16
def set_imag(self, imag): # 17
self.imag = imag # 18
# 19
def __str__(self): # 20
return f""({self.real}+{self.imag}i)"" # 21
# 22
def is_real(self): # 23
return self.real == 0 # 24
# 25
def is_imaginary(self): # 26
return self.imag == 0 # 27
# 28
def equals(self, real, imag): # 29
return self.real == real and self.imag == imag # 30
# 31
def equals_complex(self, another): # 32
return self.real == another.real and self.imag == another.imag # 33
# 34
def magnitude(self): # 35
return math.sqrt(self.real**2 + self.imag**2) # 36
# 37
def argument(self): # 38
return math.atan2(self.imag, self.real) # 39
# 40
def add_into(self, right): # 41
self.real += right.real # 42
self.imag += right.imag # 43
return self # 44
# 45
def add(self, right): # 46
self.real += right.real # 47
self.imag += right.imag # 48
return self # 49
# 50
def add_new(self, right): # 51
return MyComplex(self.real + right.real, self.imag + right.imag) # 52
# 53
def subtract(self, right): # 54
self.real -= right.real # 55
self.imag -= right.imag # 56
return self # 57
# 58
def subtract_new(self, right): # 59
return MyComplex(self.real - right.real, self.imag - right.imag) # 60
# 61
def multiply(self, right): # 62
real = self.real * right.real - self.imag * right.imag # 63
imag = self.real * right.imag + self.imag * right.real # 64
self.real = real # 65
self.imag = imag # 66
return self # 67
# 68
def divide(self, right): # 69
denominator = right.real**2 + right.imag**2 # 70
real = (self.real * right.real + self.imag * right.imag) / denominator # 71
imag = (self.imag * right.real - self.real * right.imag) / denominator # 72
self.real = real # 73
self.imag = imag # 74
return self # 75
# 76
def conjugate(self): # 77
self.imag *= -1 # 78
return self # 79
# 80
if __name__ == ""__main__"": # 81
c9 = MyComplex(1, 2) # 82
c10 = MyComplex(3, 4) # 83
result = c9.multiply(c10) # 84
print(f""Test 5 - Multiply: {result}"") # 85"
120,MyDate,OOP_prepared,"[90, 6, 7, 8, 91, 46, 47, 29, 30, 31, 35]","from datetime import datetime, timedelta # 1
import logging # 2
# 3
class MyDate: # 4
def __init__(self, year, month, day): # 5
self.year = year # 6
self.month = month # 7
self.day = day # 8
# 9
def get_year(self): # 10
return self.year # 11
# 12
def set_year(self, year): # 13
self.year = year # 14
# 15
def get_month(self): # 16
return self.month # 17
# 18
def set_month(self, month): # 19
self.month = month # 20
# 21
def get_day(self): # 22
return self.day # 23
# 24
def set_day(self, day): # 25
self.day = day # 26
# 27
def __str__(self): # 28
date_string = f""{self.year}-{self.month}-{self.day}"" # 29
try: # 30
date = datetime.strptime(date_string, ""%Y-%m-%d"") # 31
except ValueError as ex: # 32
logging.error(""Error parsing date: %s"", ex) # 33
return """" # 34
return date.strftime(""%A %d %b %Y"") # 35
# 36
def next_year(self): # 37
self.year += 1 # 38
return self # 39
# 40
def next_month(self): # 41
self.month += 1 # 42
return self # 43
# 44
def next_day(self): # 45
self.day += 1 # 46
return self # 47
# 48
def previous_year(self): # 49
self.year -= 1 # 50
return self # 51
# 52
def previous_month(self): # 53
self.month -= 1 # 54
return self # 55
# 56
def previous_day(self): # 57
self.day -= 1 # 58
return self # 59
# 60
class TestMyDate: # 61
@staticmethod # 62
def is_leap_year(year): # 63
if year % 400 == 0: # 64
return True # 65
if year % 4 == 0 and year % 100 != 0: # 66
return True # 67
return False # 68
# 69
@staticmethod # 70
def is_valid_date(year, month, day): # 71
try: # 72
datetime(year, month, day) # 73
except ValueError: # 74
return False # 75
return True # 76
# 77
@staticmethod # 78
def get_day_of_week(year, month, day): # 79
weeks = [""Sunday"", ""Monday"", ""Tuesday"", ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday""] # 80
try: # 81
date = datetime(year, month, day) # 82
except ValueError as ex: # 83
logging.error(""Error parsing date: %s"", ex) # 84
return -1 # 85
day_of_week = date.strftime(""%A"") # 86
return weeks.index(day_of_week) # 87
# 88
if __name__ == ""__main__"": # 89
d = MyDate(2023, 3, 15) # 90
print(d.next_day()) # 91"
121,MyDate,OOP_prepared,"[90, 80, 81, 82, 86, 87]","from datetime import datetime, timedelta # 1
import logging # 2
# 3
class MyDate: # 4
def __init__(self, year, month, day): # 5
self.year = year # 6
self.month = month # 7
self.day = day # 8
# 9
def get_year(self): # 10
return self.year # 11
# 12
def set_year(self, year): # 13
self.year = year # 14
# 15
def get_month(self): # 16
return self.month # 17
# 18
def set_month(self, month): # 19
self.month = month # 20
# 21
def get_day(self): # 22
return self.day # 23
# 24
def set_day(self, day): # 25
self.day = day # 26
# 27
def __str__(self): # 28
date_string = f""{self.year}-{self.month}-{self.day}"" # 29
try: # 30
date = datetime.strptime(date_string, ""%Y-%m-%d"") # 31
except ValueError as ex: # 32
logging.error(""Error parsing date: %s"", ex) # 33
return """" # 34
return date.strftime(""%A %d %b %Y"") # 35
# 36
def next_year(self): # 37
self.year += 1 # 38
return self # 39
# 40
def next_month(self): # 41
self.month += 1 # 42
return self # 43
# 44
def next_day(self): # 45
self.day += 1 # 46
return self # 47
# 48
def previous_year(self): # 49
self.year -= 1 # 50
return self # 51
# 52
def previous_month(self): # 53
self.month -= 1 # 54
return self # 55
# 56
def previous_day(self): # 57
self.day -= 1 # 58
return self # 59
# 60
class TestMyDate: # 61
@staticmethod # 62
def is_leap_year(year): # 63
if year % 400 == 0: # 64
return True # 65
if year % 4 == 0 and year % 100 != 0: # 66
return True # 67
return False # 68
# 69
@staticmethod # 70
def is_valid_date(year, month, day): # 71
try: # 72
datetime(year, month, day) # 73
except ValueError: # 74
return False # 75
return True # 76
# 77
@staticmethod # 78
def get_day_of_week(year, month, day): # 79
weeks = [""Sunday"", ""Monday"", ""Tuesday"", ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday""] # 80
try: # 81
date = datetime(year, month, day) # 82
except ValueError as ex: # 83
logging.error(""Error parsing date: %s"", ex) # 84
return -1 # 85
day_of_week = date.strftime(""%A"") # 86
return weeks.index(day_of_week) # 87
# 88
if __name__ == ""__main__"": # 89
d = TestMyDate.get_day_of_week(2022, 12, 31) # 90"
122,MyDate,OOP_prepared,"[90, 72, 73, 76]","from datetime import datetime, timedelta # 1
import logging # 2
# 3
class MyDate: # 4
def __init__(self, year, month, day): # 5
self.year = year # 6
self.month = month # 7
self.day = day # 8
# 9
def get_year(self): # 10
return self.year # 11
# 12
def set_year(self, year): # 13
self.year = year # 14
# 15
def get_month(self): # 16
return self.month # 17
# 18
def set_month(self, month): # 19
self.month = month # 20
# 21
def get_day(self): # 22
return self.day # 23
# 24
def set_day(self, day): # 25
self.day = day # 26
# 27
def __str__(self): # 28
date_string = f""{self.year}-{self.month}-{self.day}"" # 29
try: # 30
date = datetime.strptime(date_string, ""%Y-%m-%d"") # 31
except ValueError as ex: # 32
logging.error(""Error parsing date: %s"", ex) # 33
return """" # 34
return date.strftime(""%A %d %b %Y"") # 35
# 36
def next_year(self): # 37
self.year += 1 # 38
return self # 39
# 40
def next_month(self): # 41
self.month += 1 # 42
return self # 43
# 44
def next_day(self): # 45
self.day += 1 # 46
return self # 47
# 48
def previous_year(self): # 49
self.year -= 1 # 50
return self # 51
# 52
def previous_month(self): # 53
self.month -= 1 # 54
return self # 55
# 56
def previous_day(self): # 57
self.day -= 1 # 58
return self # 59
# 60
class TestMyDate: # 61
@staticmethod # 62
def is_leap_year(year): # 63
if year % 400 == 0: # 64
return True # 65
if year % 4 == 0 and year % 100 != 0: # 66
return True # 67
return False # 68
# 69
@staticmethod # 70
def is_valid_date(year, month, day): # 71
try: # 72
datetime(year, month, day) # 73
except ValueError: # 74
return False # 75
return True # 76
# 77
@staticmethod # 78
def get_day_of_week(year, month, day): # 79
weeks = [""Sunday"", ""Monday"", ""Tuesday"", ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday""] # 80
try: # 81
date = datetime(year, month, day) # 82
except ValueError as ex: # 83
logging.error(""Error parsing date: %s"", ex) # 84
return -1 # 85
day_of_week = date.strftime(""%A"") # 86
return weeks.index(day_of_week) # 87
# 88
if __name__ == ""__main__"": # 89
d = TestMyDate.is_valid_date(2020, 2, 29) # 90"
123,MyDate,OOP_prepared,"[90, 64, 66, 68]","from datetime import datetime, timedelta # 1
import logging # 2
# 3
class MyDate: # 4
def __init__(self, year, month, day): # 5
self.year = year # 6
self.month = month # 7
self.day = day # 8
# 9
def get_year(self): # 10
return self.year # 11
# 12
def set_year(self, year): # 13
self.year = year # 14
# 15
def get_month(self): # 16
return self.month # 17
# 18
def set_month(self, month): # 19
self.month = month # 20
# 21
def get_day(self): # 22
return self.day # 23
# 24
def set_day(self, day): # 25
self.day = day # 26
# 27
def __str__(self): # 28
date_string = f""{self.year}-{self.month}-{self.day}"" # 29
try: # 30
date = datetime.strptime(date_string, ""%Y-%m-%d"") # 31
except ValueError as ex: # 32
logging.error(""Error parsing date: %s"", ex) # 33
return """" # 34
return date.strftime(""%A %d %b %Y"") # 35
# 36
def next_year(self): # 37
self.year += 1 # 38
return self # 39
# 40
def next_month(self): # 41
self.month += 1 # 42
return self # 43
# 44
def next_day(self): # 45
self.day += 1 # 46
return self # 47
# 48
def previous_year(self): # 49
self.year -= 1 # 50
return self # 51
# 52
def previous_month(self): # 53
self.month -= 1 # 54
return self # 55
# 56
def previous_day(self): # 57
self.day -= 1 # 58
return self # 59
# 60
class TestMyDate: # 61
@staticmethod # 62
def is_leap_year(year): # 63
if year % 400 == 0: # 64
return True # 65
if year % 4 == 0 and year % 100 != 0: # 66
return True # 67
return False # 68
# 69
@staticmethod # 70
def is_valid_date(year, month, day): # 71
try: # 72
datetime(year, month, day) # 73
except ValueError: # 74
return False # 75
return True # 76
# 77
@staticmethod # 78
def get_day_of_week(year, month, day): # 79
weeks = [""Sunday"", ""Monday"", ""Tuesday"", ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday""] # 80
try: # 81
date = datetime(year, month, day) # 82
except ValueError as ex: # 83
logging.error(""Error parsing date: %s"", ex) # 84
return -1 # 85
day_of_week = date.strftime(""%A"") # 86
return weeks.index(day_of_week) # 87
# 88
if __name__ == ""__main__"": # 89
d = TestMyDate.is_leap_year(2021) # 90"
124,MyDate,OOP_prepared,"[90, 6, 7, 8, 91, 46, 47, 29, 30, 31, 32, 33, 34, 92, 46, 47, 93, 38, 39]","from datetime import datetime, timedelta # 1
import logging # 2
# 3
class MyDate: # 4
def __init__(self, year, month, day): # 5
self.year = year # 6
self.month = month # 7
self.day = day # 8
# 9
def get_year(self): # 10
return self.year # 11
# 12
def set_year(self, year): # 13
self.year = year # 14
# 15
def get_month(self): # 16
return self.month # 17
# 18
def set_month(self, month): # 19
self.month = month # 20
# 21
def get_day(self): # 22
return self.day # 23
# 24
def set_day(self, day): # 25
self.day = day # 26
# 27
def __str__(self): # 28
date_string = f""{self.year}-{self.month}-{self.day}"" # 29
try: # 30
date = datetime.strptime(date_string, ""%Y-%m-%d"") # 31
except ValueError as ex: # 32
logging.error(""Error parsing date: %s"", ex) # 33
return """" # 34
return date.strftime(""%A %d %b %Y"") # 35
# 36
def next_year(self): # 37
self.year += 1 # 38
return self # 39
# 40
def next_month(self): # 41
self.month += 1 # 42
return self # 43
# 44
def next_day(self): # 45
self.day += 1 # 46
return self # 47
# 48
def previous_year(self): # 49
self.year -= 1 # 50
return self # 51
# 52
def previous_month(self): # 53
self.month -= 1 # 54
return self # 55
# 56
def previous_day(self): # 57
self.day -= 1 # 58
return self # 59
# 60
class TestMyDate: # 61
@staticmethod # 62
def is_leap_year(year): # 63
if year % 400 == 0: # 64
return True # 65
if year % 4 == 0 and year % 100 != 0: # 66
return True # 67
return False # 68
# 69
@staticmethod # 70
def is_valid_date(year, month, day): # 71
try: # 72
datetime(year, month, day) # 73
except ValueError: # 74
return False # 75
return True # 76
# 77
@staticmethod # 78
def get_day_of_week(year, month, day): # 79
weeks = [""Sunday"", ""Monday"", ""Tuesday"", ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday""] # 80
try: # 81
date = datetime(year, month, day) # 82
except ValueError as ex: # 83
logging.error(""Error parsing date: %s"", ex) # 84
return -1 # 85
day_of_week = date.strftime(""%A"") # 86
return weeks.index(day_of_week) # 87
# 88
if __name__ == ""__main__"": # 89
d = MyDate(2023, 2, 28) # 90
print(d.next_day()) # 91
d.next_day() # 92
d.next_year() # 93"
125,MyLine,OOP_prepared,"[107, 5, 6, 5, 6, 41, 42, 43, 108, 97, 28, 29]","import math # 1
# 2
class MyPoint: # 3
def __init__(self, x=0, y=0): # 4
self.x = x # 5
self.y = y # 6
# 7
def get_x(self): # 8
return self.x # 9
# 10
def set_x(self, x): # 11
self.x = x # 12
# 13
def get_y(self): # 14
return self.y # 15
# 16
def set_y(self, y): # 17
self.y = y # 18
# 19
def get_xy(self): # 20
return [self.x, self.y] # 21
# 22
def set_xy(self, x, y): # 23
self.x = x # 24
self.y = y # 25
# 26
def distance(self, x=None, y=None, another=None): # 27
if another is not None: # 28
return math.sqrt((another.x - self.x) ** 2 + (another.y - self.y) ** 2) # 29
elif x is not None and y is not None: # 30
return math.sqrt((x - self.x) ** 2 + (y - self.y) ** 2) # 31
else: # 32
return math.sqrt(self.x ** 2 + self.y ** 2) # 33
# 34
def __str__(self): # 35
return f""({self.x}, {self.y})"" # 36
# 37
# 38
class MyLine: # 39
def __init__(self, x1=None, y1=None, x2=None, y2=None, begin=None, end=None): # 40
if begin is not None and end is not None: # 41
self.begin = begin # 42
self.end = end # 43
else: # 44
self.begin = MyPoint(x1, y1) # 45
self.end = MyPoint(x2, y2) # 46
# 47
def get_begin(self): # 48
return self.begin # 49
# 50
def set_begin(self, begin): # 51
self.begin = begin # 52
# 53
def get_end(self): # 54
return self.end # 55
# 56
def set_end(self, end): # 57
self.end = end # 58
# 59
def set_begin_x(self, x): # 60
self.begin.set_x(x) # 61
# 62
def get_begin_x(self): # 63
return self.begin.get_x() # 64
# 65
def set_begin_y(self, y): # 66
self.begin.set_y(y) # 67
# 68
def get_begin_y(self): # 69
return self.begin.get_y() # 70
# 71
def set_end_x(self, x): # 72
self.end.set_x(x) # 73
# 74
def get_end_x(self): # 75
return self.end.get_x() # 76
# 77
def set_end_y(self, y): # 78
self.end.set_y(y) # 79
# 80
def get_end_y(self): # 81
return self.end.get_y() # 82
# 83
def set_begin_xy(self, x, y): # 84
self.begin.set_xy(x, y) # 85
# 86
def get_begin_xy(self): # 87
return self.begin.get_xy() # 88
# 89
def set_end_xy(self, x, y): # 90
self.end.set_xy(x, y) # 91
# 92
def get_end_xy(self): # 93
return self.end.get_xy() # 94
# 95
def get_length(self): # 96
return self.begin.distance(another=self.end) # 97
# 98
def get_gradient(self): # 99
return math.atan2(self.end.get_y() - self.begin.get_y(), self.end.get_x() - self.begin.get_x()) # 100
# 101
def __str__(self): # 102
return f""MyLine[begin={self.begin}, end={self.end}]"" # 103
# 104
# 105
if __name__ == ""__main__"": # 106
my_line = MyLine(begin=MyPoint(1, 2), end=MyPoint(4, 6)) # 107
print(my_line.get_length()) # 108"
126,MyLine,OOP_prepared,"[107, 5, 6, 108, 24, 25, 109, 9, 15]","import math # 1
# 2
class MyPoint: # 3
def __init__(self, x=0, y=0): # 4
self.x = x # 5
self.y = y # 6
# 7
def get_x(self): # 8
return self.x # 9
# 10
def set_x(self, x): # 11
self.x = x # 12
# 13
def get_y(self): # 14
return self.y # 15
# 16
def set_y(self, y): # 17
self.y = y # 18
# 19
def get_xy(self): # 20
return [self.x, self.y] # 21
# 22
def set_xy(self, x, y): # 23
self.x = x # 24
self.y = y # 25
# 26
def distance(self, x=None, y=None, another=None): # 27
if another is not None: # 28
return math.sqrt((another.x - self.x) ** 2 + (another.y - self.y) ** 2) # 29
elif x is not None and y is not None: # 30
return math.sqrt((x - self.x) ** 2 + (y - self.y) ** 2) # 31
else: # 32
return math.sqrt(self.x ** 2 + self.y ** 2) # 33
# 34
def __str__(self): # 35
return f""({self.x}, {self.y})"" # 36
# 37
# 38
class MyLine: # 39
def __init__(self, x1=None, y1=None, x2=None, y2=None, begin=None, end=None): # 40
if begin is not None and end is not None: # 41
self.begin = begin # 42
self.end = end # 43
else: # 44
self.begin = MyPoint(x1, y1) # 45
self.end = MyPoint(x2, y2) # 46
# 47
def get_begin(self): # 48
return self.begin # 49
# 50
def set_begin(self, begin): # 51
self.begin = begin # 52
# 53
def get_end(self): # 54
return self.end # 55
# 56
def set_end(self, end): # 57
self.end = end # 58
# 59
def set_begin_x(self, x): # 60
self.begin.set_x(x) # 61
# 62
def get_begin_x(self): # 63
return self.begin.get_x() # 64
# 65
def set_begin_y(self, y): # 66
self.begin.set_y(y) # 67
# 68
def get_begin_y(self): # 69
return self.begin.get_y() # 70
# 71
def set_end_x(self, x): # 72
self.end.set_x(x) # 73
# 74
def get_end_x(self): # 75
return self.end.get_x() # 76
# 77
def set_end_y(self, y): # 78
self.end.set_y(y) # 79
# 80
def get_end_y(self): # 81
return self.end.get_y() # 82
# 83
def set_begin_xy(self, x, y): # 84
self.begin.set_xy(x, y) # 85
# 86
def get_begin_xy(self): # 87
return self.begin.get_xy() # 88
# 89
def set_end_xy(self, x, y): # 90
self.end.set_xy(x, y) # 91
# 92
def get_end_xy(self): # 93
return self.end.get_xy() # 94
# 95
def get_length(self): # 96
return self.begin.distance(another=self.end) # 97
# 98
def get_gradient(self): # 99
return math.atan2(self.end.get_y() - self.begin.get_y(), self.end.get_x() - self.begin.get_x()) # 100
# 101
def __str__(self): # 102
return f""MyLine[begin={self.begin}, end={self.end}]"" # 103
# 104
# 105
if __name__ == ""__main__"": # 106
point2 = MyPoint() # 107
point2.set_xy(7, 8) # 108
print(point2.get_x(), point2.get_y()) # 109"
127,MyLine,OOP_prepared,"[114, 41, 45, 5, 6, 46, 5, 6, 115, 97, 28, 29]","import math # 1
# 2
class MyPoint: # 3
def __init__(self, x=0, y=0): # 4
self.x = x # 5
self.y = y # 6
# 7
def get_x(self): # 8
return self.x # 9
# 10
def set_x(self, x): # 11
self.x = x # 12
# 13
def get_y(self): # 14
return self.y # 15
# 16
def set_y(self, y): # 17
self.y = y # 18
# 19
def get_xy(self): # 20
return [self.x, self.y] # 21
# 22
def set_xy(self, x, y): # 23
self.x = x # 24
self.y = y # 25
# 26
def distance(self, x=None, y=None, another=None): # 27
if another is not None: # 28
return math.sqrt((another.x - self.x) ** 2 + (another.y - self.y) ** 2) # 29
elif x is not None and y is not None: # 30
return math.sqrt((x - self.x) ** 2 + (y - self.y) ** 2) # 31
else: # 32
return math.sqrt(self.x ** 2 + self.y ** 2) # 33
# 34
def __str__(self): # 35
return f""({self.x}, {self.y})"" # 36
# 37
# 38
class MyLine: # 39
def __init__(self, x1=None, y1=None, x2=None, y2=None, begin=None, end=None): # 40
if begin is not None and end is not None: # 41
self.begin = begin # 42
self.end = end # 43
else: # 44
self.begin = MyPoint(x1, y1) # 45
self.end = MyPoint(x2, y2) # 46
# 47
def get_begin(self): # 48
return self.begin # 49
# 50
def set_begin(self, begin): # 51
self.begin = begin # 52
# 53
def get_end(self): # 54
return self.end # 55
# 56
def set_end(self, end): # 57
self.end = end # 58
# 59
def set_begin_x(self, x): # 60
self.begin.set_x(x) # 61
# 62
def get_begin_x(self): # 63
return self.begin.get_x() # 64
# 65
def set_begin_y(self, y): # 66
self.begin.set_y(y) # 67
# 68
def get_begin_y(self): # 69
return self.begin.get_y() # 70
# 71
def set_end_x(self, x): # 72
self.end.set_x(x) # 73
# 74
def get_end_x(self): # 75
return self.end.get_x() # 76
# 77
def set_end_y(self, y): # 78
self.end.set_y(y) # 79
# 80
def get_end_y(self): # 81
return self.end.get_y() # 82
# 83
def set_begin_xy(self, x, y): # 84
self.begin.set_xy(x, y) # 85
# 86
def get_begin_xy(self): # 87
return self.begin.get_xy() # 88
# 89
def set_end_xy(self, x, y): # 90
self.end.set_xy(x, y) # 91
# 92
def get_end_xy(self): # 93
return self.end.get_xy() # 94
# 95
def get_length(self): # 96
return self.begin.distance(another=self.end) # 97
# 98
def get_gradient(self): # 99
return math.atan2(self.end.get_y() - self.begin.get_y(), self.end.get_x() - self.begin.get_x()) # 100
# 101
def __str__(self): # 102
return f""MyLine[begin={self.begin}, end={self.end}]"" # 103
# 104
# 105
class TestMyLine: # 106
@staticmethod # 107
def main(): # 108
my_line = MyLine(begin=MyPoint(3, 4), end=MyPoint(6, 8)) # 109
print(my_line.get_length()) # 110
# 111
# 112
if __name__ == ""__main__"": # 113
line1 = MyLine(1, 2, 3, 4) # 114
print(line1.get_length()) # 115"
128,MyLine,OOP_prepared,"[106, 5, 6, 107, 5, 6, 108, 41, 42, 43, 109, 100, 15, 15, 9, 9]","import math # 1
# 2
class MyPoint: # 3
def __init__(self, x=0, y=0): # 4
self.x = x # 5
self.y = y # 6
# 7
def get_x(self): # 8
return self.x # 9
# 10
def set_x(self, x): # 11
self.x = x # 12
# 13
def get_y(self): # 14
return self.y # 15
# 16
def set_y(self, y): # 17
self.y = y # 18
# 19
def get_xy(self): # 20
return [self.x, self.y] # 21
# 22
def set_xy(self, x, y): # 23
self.x = x # 24
self.y = y # 25
# 26
def distance(self, x=None, y=None, another=None): # 27
if another is not None: # 28
return math.sqrt((another.x - self.x) ** 2 + (another.y - self.y) ** 2) # 29
elif x is not None and y is not None: # 30
return math.sqrt((x - self.x) ** 2 + (y - self.y) ** 2) # 31
else: # 32
return math.sqrt(self.x ** 2 + self.y ** 2) # 33
# 34
def __str__(self): # 35
return f""({self.x}, {self.y})"" # 36
# 37
# 38
class MyLine: # 39
def __init__(self, x1=None, y1=None, x2=None, y2=None, begin=None, end=None): # 40
if begin is not None and end is not None: # 41
self.begin = begin # 42
self.end = end # 43
else: # 44
self.begin = MyPoint(x1, y1) # 45
self.end = MyPoint(x2, y2) # 46
# 47
def get_begin(self): # 48
return self.begin # 49
# 50
def set_begin(self, begin): # 51
self.begin = begin # 52
# 53
def get_end(self): # 54
return self.end # 55
# 56
def set_end(self, end): # 57
self.end = end # 58
# 59
def set_begin_x(self, x): # 60
self.begin.set_x(x) # 61
# 62
def get_begin_x(self): # 63
return self.begin.get_x() # 64
# 65
def set_begin_y(self, y): # 66
self.begin.set_y(y) # 67
# 68
def get_begin_y(self): # 69
return self.begin.get_y() # 70
# 71
def set_end_x(self, x): # 72
self.end.set_x(x) # 73
# 74
def get_end_x(self): # 75
return self.end.get_x() # 76
# 77
def set_end_y(self, y): # 78
self.end.set_y(y) # 79
# 80
def get_end_y(self): # 81
return self.end.get_y() # 82
# 83
def set_begin_xy(self, x, y): # 84
self.begin.set_xy(x, y) # 85
# 86
def get_begin_xy(self): # 87
return self.begin.get_xy() # 88
# 89
def set_end_xy(self, x, y): # 90
self.end.set_xy(x, y) # 91
# 92
def get_end_xy(self): # 93
return self.end.get_xy() # 94
# 95
def get_length(self): # 96
return self.begin.distance(another=self.end) # 97
# 98
def get_gradient(self): # 99
return math.atan2(self.end.get_y() - self.begin.get_y(), self.end.get_x() - self.begin.get_x()) # 100
# 101
def __str__(self): # 102
return f""MyLine[begin={self.begin}, end={self.end}]"" # 103
# 104
if __name__ == ""__main__"": # 105
point3 = MyPoint(1, 1) # 106
point4 = MyPoint(4, 5) # 107
line2 = MyLine(begin=point3, end=point4) # 108
print(line2.get_gradient()) # 109"
129,MyLine,OOP_prepared,"[106, 41, 45, 5, 6, 46, 5, 6, 107, 97, 28, 29]","import math # 1
# 2
class MyPoint: # 3
def __init__(self, x=0, y=0): # 4
self.x = x # 5
self.y = y # 6
# 7
def get_x(self): # 8
return self.x # 9
# 10
def set_x(self, x): # 11
self.x = x # 12
# 13
def get_y(self): # 14
return self.y # 15
# 16
def set_y(self, y): # 17
self.y = y # 18
# 19
def get_xy(self): # 20
return [self.x, self.y] # 21
# 22
def set_xy(self, x, y): # 23
self.x = x # 24
self.y = y # 25
# 26
def distance(self, x=None, y=None, another=None): # 27
if another is not None: # 28
return math.sqrt((another.x - self.x) ** 2 + (another.y - self.y) ** 2) # 29
elif x is not None and y is not None: # 30
return math.sqrt((x - self.x) ** 2 + (y - self.y) ** 2) # 31
else: # 32
return math.sqrt(self.x ** 2 + self.y ** 2) # 33
# 34
def __str__(self): # 35
return f""({self.x}, {self.y})"" # 36
# 37
# 38
class MyLine: # 39
def __init__(self, x1=None, y1=None, x2=None, y2=None, begin=None, end=None): # 40
if begin is not None and end is not None: # 41
self.begin = begin # 42
self.end = end # 43
else: # 44
self.begin = MyPoint(x1, y1) # 45
self.end = MyPoint(x2, y2) # 46
# 47
def get_begin(self): # 48
return self.begin # 49
# 50
def set_begin(self, begin): # 51
self.begin = begin # 52
# 53
def get_end(self): # 54
return self.end # 55
# 56
def set_end(self, end): # 57
self.end = end # 58
# 59
def set_begin_x(self, x): # 60
self.begin.set_x(x) # 61
# 62
def get_begin_x(self): # 63
return self.begin.get_x() # 64
# 65
def set_begin_y(self, y): # 66
self.begin.set_y(y) # 67
# 68
def get_begin_y(self): # 69
return self.begin.get_y() # 70
# 71
def set_end_x(self, x): # 72
self.end.set_x(x) # 73
# 74
def get_end_x(self): # 75
return self.end.get_x() # 76
# 77
def set_end_y(self, y): # 78
self.end.set_y(y) # 79
# 80
def get_end_y(self): # 81
return self.end.get_y() # 82
# 83
def set_begin_xy(self, x, y): # 84
self.begin.set_xy(x, y) # 85
# 86
def get_begin_xy(self): # 87
return self.begin.get_xy() # 88
# 89
def set_end_xy(self, x, y): # 90
self.end.set_xy(x, y) # 91
# 92
def get_end_xy(self): # 93
return self.end.get_xy() # 94
# 95
def get_length(self): # 96
return self.begin.distance(another=self.end) # 97
# 98
def get_gradient(self): # 99
return math.atan2(self.end.get_y() - self.begin.get_y(), self.end.get_x() - self.begin.get_x()) # 100
# 101
def __str__(self): # 102
return f""MyLine[begin={self.begin}, end={self.end}]"" # 103
# 104
if __name__ == ""__main__"": # 105
line3 = MyLine(x1=0, y1=0, x2=5, y2=5) # 106
print(line3.get_length()) # 107"
130,MyPoint,OOP_prepared,"[39, 5, 6, 40, 5, 6, 41, 28, 29]","import math # 1
# 2
class MyPoint: # 3
def __init__(self, x=0, y=0): # 4
self.x = x # 5
self.y = y # 6
# 7
def get_x(self): # 8
return self.x # 9
# 10
def set_x(self, x): # 11
self.x = x # 12
# 13
def get_y(self): # 14
return self.y # 15
# 16
def set_y(self, y): # 17
self.y = y # 18
# 19
def get_xy(self): # 20
return [self.x, self.y] # 21
# 22
def set_xy(self, x, y): # 23
self.x = x # 24
self.y = y # 25
# 26
def distance(self, x=None, y=None, another=None): # 27
if another is not None: # 28
return math.sqrt((another.x - self.x) ** 2 + (another.y - self.y) ** 2) # 29
elif x is not None and y is not None: # 30
return math.sqrt((x - self.x) ** 2 + (y - self.y) ** 2) # 31
else: # 32
return math.sqrt(self.x ** 2 + self.y ** 2) # 33
# 34
def __str__(self): # 35
return f""({self.x},{self.y})"" # 36
# 37
if __name__ == ""__main__"": # 38
p1 = MyPoint(1, 2) # 39
p2 = MyPoint(4, 6) # 40
print(p1.distance(another=p2)) # 41"
131,MyPoint,OOP_prepared,"[39, 5, 6, 40, 28, 30, 31]","import math # 1
# 2
class MyPoint: # 3
def __init__(self, x=0, y=0): # 4
self.x = x # 5
self.y = y # 6
# 7
def get_x(self): # 8
return self.x # 9
# 10
def set_x(self, x): # 11
self.x = x # 12
# 13
def get_y(self): # 14
return self.y # 15
# 16
def set_y(self, y): # 17
self.y = y # 18
# 19
def get_xy(self): # 20
return [self.x, self.y] # 21
# 22
def set_xy(self, x, y): # 23
self.x = x # 24
self.y = y # 25
# 26
def distance(self, x=None, y=None, another=None): # 27
if another is not None: # 28
return math.sqrt((another.x - self.x) ** 2 + (another.y - self.y) ** 2) # 29
elif x is not None and y is not None: # 30
return math.sqrt((x - self.x) ** 2 + (y - self.y) ** 2) # 31
else: # 32
return math.sqrt(self.x ** 2 + self.y ** 2) # 33
# 34
def __str__(self): # 35
return f""({self.x},{self.y})"" # 36
# 37
if __name__ == ""__main__"": # 38
p1 = MyPoint(3, 4) # 39
print(p1.distance(0, 0)) # 40"
132,MyPoint,OOP_prepared,"[39, 5, 6, 40, 5, 6, 41, 28, 29]","import math # 1
# 2
class MyPoint: # 3
def __init__(self, x=0, y=0): # 4
self.x = x # 5
self.y = y # 6
# 7
def get_x(self): # 8
return self.x # 9
# 10
def set_x(self, x): # 11
self.x = x # 12
# 13
def get_y(self): # 14
return self.y # 15
# 16
def set_y(self, y): # 17
self.y = y # 18
# 19
def get_xy(self): # 20
return [self.x, self.y] # 21
# 22
def set_xy(self, x, y): # 23
self.x = x # 24
self.y = y # 25
# 26
def distance(self, x=None, y=None, another=None): # 27
if another is not None: # 28
return math.sqrt((another.x - self.x) ** 2 + (another.y - self.y) ** 2) # 29
elif x is not None and y is not None: # 30
return math.sqrt((x - self.x) ** 2 + (y - self.y) ** 2) # 31
else: # 32
return math.sqrt(self.x ** 2 + self.y ** 2) # 33
# 34
def __str__(self): # 35
return f""({self.x},{self.y})"" # 36
# 37
if __name__ == ""__main__"": # 38
p3 = MyPoint(1, 1) # 39
p4 = MyPoint(4, 5) # 40
print(p3.distance(another=p4)) # 41"
133,MyPoint,OOP_prepared,"[39, 5, 6, 40, 28, 30, 31]","import math # 1
# 2
class MyPoint: # 3
def __init__(self, x=0, y=0): # 4
self.x = x # 5
self.y = y # 6
# 7
def get_x(self): # 8
return self.x # 9
# 10
def set_x(self, x): # 11
self.x = x # 12
# 13
def get_y(self): # 14
return self.y # 15
# 16
def set_y(self, y): # 17
self.y = y # 18
# 19
def get_xy(self): # 20
return [self.x, self.y] # 21
# 22
def set_xy(self, x, y): # 23
self.x = x # 24
self.y = y # 25
# 26
def distance(self, x=None, y=None, another=None): # 27
if another is not None: # 28
return math.sqrt((another.x - self.x) ** 2 + (another.y - self.y) ** 2) # 29
elif x is not None and y is not None: # 30
return math.sqrt((x - self.x) ** 2 + (y - self.y) ** 2) # 31
else: # 32
return math.sqrt(self.x ** 2 + self.y ** 2) # 33
# 34
def __str__(self): # 35
return f""({self.x},{self.y})"" # 36
# 37
if __name__ == ""__main__"": # 38
p5 = MyPoint(0, 0) # 39
print(p5.distance(3, 4)) # 40"
134,MyPoint,OOP_prepared,"[39, 5, 6, 40, 24, 25, 41, 28, 30, 33]","import math # 1
# 2
class MyPoint: # 3
def __init__(self, x=0, y=0): # 4
self.x = x # 5
self.y = y # 6
# 7
def get_x(self): # 8
return self.x # 9
# 10
def set_x(self, x): # 11
self.x = x # 12
# 13
def get_y(self): # 14
return self.y # 15
# 16
def set_y(self, y): # 17
self.y = y # 18
# 19
def get_xy(self): # 20
return [self.x, self.y] # 21
# 22
def set_xy(self, x, y): # 23
self.x = x # 24
self.y = y # 25
# 26
def distance(self, x=None, y=None, another=None): # 27
if another is not None: # 28
return math.sqrt((another.x - self.x) ** 2 + (another.y - self.y) ** 2) # 29
elif x is not None and y is not None: # 30
return math.sqrt((x - self.x) ** 2 + (y - self.y) ** 2) # 31
else: # 32
return math.sqrt(self.x ** 2 + self.y ** 2) # 33
# 34
def __str__(self): # 35
return f""({self.x},{self.y})"" # 36
# 37
if __name__ == ""__main__"": # 38
p6 = MyPoint(2, 3) # 39
p6.set_xy(6, 8) # 40
print(p6.distance()) # 41"
135,MyPolynomial,OOP_prepared,"[64, 3, 65, 3, 66, 3, 67, 38, 12, 39, 41, 42, 43, 12, 44, 45, 12, 46, 47, 41, 42, 43, 12, 44, 45, 12, 46, 47, 41, 42, 43, 12, 44, 45, 12, 46, 47, 41, 49, 3, 15, 16, 17, 19, 20, 25, 26, 16, 17, 19, 22, 23, 25, 27, 28, 16, 17, 19, 22, 23, 25, 27, 16, 29]","class MyPolynomial: # 1
def __init__(self, *coeffs): # 2
self.coeffs = coeffs # 3
# 4
def get_coeffs(self): # 5
return self.coeffs # 6
# 7
def set_coeffs(self, coeffs): # 8
self.coeffs = coeffs # 9
# 10
def get_degree(self): # 11
return len(self.coeffs) - 1 # 12
# 13
def __str__(self): # 14
coeffs_string = """" # 15
for degree in range(len(self.coeffs) - 1, -1, -1): # 16
if self.coeffs[degree] == 0: # 17
continue # 18
if degree == len(self.coeffs) - 1: # 19
coeffs_string += str(round(self.coeffs[degree], 2)) # 20
else: # 21
coeffs_string += "" + "" if self.coeffs[degree] > 0 else "" - "" # 22
coeffs_string += str(abs(round(self.coeffs[degree], 2))) # 23
# 24
if degree >= 2: # 25
coeffs_string += f""x^{degree}"" # 26
elif degree == 1: # 27
coeffs_string += ""x"" # 28
return coeffs_string # 29
# 30
def evaluate(self, x): # 31
ans = 0 # 32
for degree in range(len(self.coeffs)): # 33
ans += (self.coeffs[degree] * (x ** degree)) # 34
return ans # 35
# 36
def add(self, another): # 37
size = max(len(self.coeffs), another.get_degree() + 1) # 38
ans = [0] * size # 39
# 40
for degree in range(size): # 41
add = 0 # 42
if degree <= self.get_degree(): # 43
add += self.coeffs[degree] # 44
if degree <= another.get_degree(): # 45
add += another.coeffs[degree] # 46
ans[degree] = add # 47
# 48
return MyPolynomial(*ans) # 49
# 50
def multiply(self, another): # 51
size = self.get_degree() + another.get_degree() + 1 # 52
ans = [0] * size # 53
# 54
for deg1 in range(len(self.coeffs)): # 55
for deg2 in range(len(another.coeffs)): # 56
num = self.coeffs[deg1] * another.coeffs[deg2] # 57
ans[deg1 + deg2] += num # 58
# 59
return MyPolynomial(*ans) # 60
# 61
# 62
if __name__ == ""__main__"": # 63
p1 = MyPolynomial(1.1, 2.2, 3.3) # 64
p2 = MyPolynomial(1.1, 2.2, 3.3, 4.4, 5.5) # 65
p3 = MyPolynomial(0.5, 1.5, 2.5) # 66
print(p1.add(p3)) # 67"
136,MyPolynomial,OOP_prepared,"[63, 3, 64, 9, 65, 6, 66, 15, 16, 17, 19, 20, 25, 26, 16, 17, 18, 16, 17, 19, 22, 23, 25, 27, 28, 16, 17, 18, 16, 29]","class MyPolynomial: # 1
def __init__(self, *coeffs): # 2
self.coeffs = coeffs # 3
# 4
def get_coeffs(self): # 5
return self.coeffs # 6
# 7
def set_coeffs(self, coeffs): # 8
self.coeffs = coeffs # 9
# 10
def get_degree(self): # 11
return len(self.coeffs) - 1 # 12
# 13
def __str__(self): # 14
coeffs_string = """" # 15
for degree in range(len(self.coeffs) - 1, -1, -1): # 16
if self.coeffs[degree] == 0: # 17
continue # 18
if degree == len(self.coeffs) - 1: # 19
coeffs_string += str(round(self.coeffs[degree], 2)) # 20
else: # 21
coeffs_string += "" + "" if self.coeffs[degree] > 0 else "" - "" # 22
coeffs_string += str(abs(round(self.coeffs[degree], 2))) # 23
# 24
if degree >= 2: # 25
coeffs_string += f""x^{degree}"" # 26
elif degree == 1: # 27
coeffs_string += ""x"" # 28
return coeffs_string # 29
# 30
def evaluate(self, x): # 31
ans = 0 # 32
for degree in range(len(self.coeffs)): # 33
ans += (self.coeffs[degree] * (x ** degree)) # 34
return ans # 35
# 36
def add(self, another): # 37
size = max(len(self.coeffs), another.get_degree() + 1) # 38
ans = [0] * size # 39
# 40
for degree in range(size): # 41
add = 0 # 42
if degree <= self.get_degree(): # 43
add += self.coeffs[degree] # 44
if degree <= another.get_degree(): # 45
add += another.coeffs[degree] # 46
ans[degree] = add # 47
# 48
return MyPolynomial(*ans) # 49
# 50
def multiply(self, another): # 51
size = self.get_degree() + another.get_degree() + 1 # 52
ans = [0] * size # 53
# 54
for deg1 in range(len(self.coeffs)): # 55
for deg2 in range(len(another.coeffs)): # 56
num = self.coeffs[deg1] * another.coeffs[deg2] # 57
ans[deg1 + deg2] += num # 58
# 59
return MyPolynomial(*ans) # 60
# 61
if __name__ == ""__main__"": # 62
p2 = MyPolynomial(1.0, 0.0, 5.0, 0.0) # 63
p2.set_coeffs([0.0, 3.0, 0.0, 2.0]) # 64
print(p2.get_coeffs()) # 65
print(p2) # 66"
137,MyPolynomial,OOP_prepared,"[64, 3, 65, 32, 33, 34, 33, 34, 33, 34, 33, 35, 66, 15, 16, 17, 19, 20, 25, 26, 16, 17, 19, 22, 23, 25, 27, 28, 16, 17, 19, 22, 23, 25, 27, 16, 29]","class MyPolynomial: # 1
def __init__(self, *coeffs): # 2
self.coeffs = coeffs # 3
# 4
def get_coeffs(self): # 5
return self.coeffs # 6
# 7
def set_coeffs(self, coeffs): # 8
self.coeffs = coeffs # 9
# 10
def get_degree(self): # 11
return len(self.coeffs) - 1 # 12
# 13
def __str__(self): # 14
coeffs_string = """" # 15
for degree in range(len(self.coeffs) - 1, -1, -1): # 16
if self.coeffs[degree] == 0: # 17
continue # 18
if degree == len(self.coeffs) - 1: # 19
coeffs_string += str(round(self.coeffs[degree], 2)) # 20
else: # 21
coeffs_string += "" + "" if self.coeffs[degree] > 0 else "" - "" # 22
coeffs_string += str(abs(round(self.coeffs[degree], 2))) # 23
# 24
if degree >= 2: # 25
coeffs_string += f""x^{degree}"" # 26
elif degree == 1: # 27
coeffs_string += ""x"" # 28
return coeffs_string # 29
# 30
def evaluate(self, x): # 31
ans = 0 # 32
for degree in range(len(self.coeffs)): # 33
ans += (self.coeffs[degree] * (x ** degree)) # 34
return ans # 35
# 36
def add(self, another): # 37
size = max(len(self.coeffs), another.get_degree() + 1) # 38
ans = [0] * size # 39
# 40
for degree in range(size): # 41
add = 0 # 42
if degree <= self.get_degree(): # 43
add += self.coeffs[degree] # 44
if degree <= another.get_degree(): # 45
add += another.coeffs[degree] # 46
ans[degree] = add # 47
# 48
return MyPolynomial(*ans) # 49
# 50
def multiply(self, another): # 51
size = self.get_degree() + another.get_degree() + 1 # 52
ans = [0] * size # 53
# 54
for deg1 in range(len(self.coeffs)): # 55
for deg2 in range(len(another.coeffs)): # 56
num = self.coeffs[deg1] * another.coeffs[deg2] # 57
ans[deg1 + deg2] += num # 58
# 59
return MyPolynomial(*ans) # 60
# 61
# 62
if __name__ == ""__main__"": # 63
p3 = MyPolynomial(2.0, -3.0, 4.0) # 64
print(p3.evaluate(2)) # 65
print(p3) # 66"
138,MyPolynomial,OOP_prepared,"[64, 3, 65, 3, 66, 38, 12, 39, 41, 42, 43, 12, 44, 45, 12, 46, 47, 41, 42, 43, 12, 44, 45, 12, 46, 47, 41, 42, 43, 12, 45, 12, 46, 47, 41, 49, 3, 15, 16, 17, 19, 20, 25, 26, 16, 17, 19, 22, 23, 25, 27, 28, 16, 17, 19, 22, 23, 25, 27, 16, 29, 67, 15, 16, 17, 19, 20, 25, 27, 28, 16, 17, 19, 22, 23, 25, 27, 16, 29]","class MyPolynomial: # 1
def __init__(self, *coeffs): # 2
self.coeffs = coeffs # 3
# 4
def get_coeffs(self): # 5
return self.coeffs # 6
# 7
def set_coeffs(self, coeffs): # 8
self.coeffs = coeffs # 9
# 10
def get_degree(self): # 11
return len(self.coeffs) - 1 # 12
# 13
def __str__(self): # 14
coeffs_string = """" # 15
for degree in range(len(self.coeffs) - 1, -1, -1): # 16
if self.coeffs[degree] == 0: # 17
continue # 18
if degree == len(self.coeffs) - 1: # 19
coeffs_string += str(round(self.coeffs[degree], 2)) # 20
else: # 21
coeffs_string += "" + "" if self.coeffs[degree] > 0 else "" - "" # 22
coeffs_string += str(abs(round(self.coeffs[degree], 2))) # 23
# 24
if degree >= 2: # 25
coeffs_string += f""x^{degree}"" # 26
elif degree == 1: # 27
coeffs_string += ""x"" # 28
return coeffs_string # 29
# 30
def evaluate(self, x): # 31
ans = 0 # 32
for degree in range(len(self.coeffs)): # 33
ans += (self.coeffs[degree] * (x ** degree)) # 34
return ans # 35
# 36
def add(self, another): # 37
size = max(len(self.coeffs), another.get_degree() + 1) # 38
ans = [0] * size # 39
# 40
for degree in range(size): # 41
add = 0 # 42
if degree <= self.get_degree(): # 43
add += self.coeffs[degree] # 44
if degree <= another.get_degree(): # 45
add += another.coeffs[degree] # 46
ans[degree] = add # 47
# 48
return MyPolynomial(*ans) # 49
# 50
def multiply(self, another): # 51
size = self.get_degree() + another.get_degree() + 1 # 52
ans = [0] * size # 53
# 54
for deg1 in range(len(self.coeffs)): # 55
for deg2 in range(len(another.coeffs)): # 56
num = self.coeffs[deg1] * another.coeffs[deg2] # 57
ans[deg1 + deg2] += num # 58
# 59
return MyPolynomial(*ans) # 60
# 61
# 62
if __name__ == ""__main__"": # 63
p4 = MyPolynomial(1.0, -1.0) # 64
p5 = MyPolynomial(1.0, 2.0, -1.0) # 65
print(p4.add(p5)) # 66
print(p4) # 67"
139,MyPolynomial,OOP_prepared,"[64, 3, 65, 3, 66, 52, 12, 12, 53, 55, 56, 57, 58, 56, 57, 58, 56, 55, 56, 57, 58, 56, 57, 58, 56, 55, 56, 57, 58, 56, 57, 58, 56, 55, 60, 3, 15, 16, 17, 19, 20, 25, 26, 16, 17, 19, 22, 23, 25, 26, 16, 17, 19, 22, 23, 25, 27, 28, 16, 17, 19, 22, 23, 25, 27, 16, 29, 67, 15, 16, 17, 19, 20, 25, 27, 28, 16, 17, 19, 22, 23, 25, 27, 16, 29]","class MyPolynomial: # 1
def __init__(self, *coeffs): # 2
self.coeffs = coeffs # 3
# 4
def get_coeffs(self): # 5
return self.coeffs # 6
# 7
def set_coeffs(self, coeffs): # 8
self.coeffs = coeffs # 9
# 10
def get_degree(self): # 11
return len(self.coeffs) - 1 # 12
# 13
def __str__(self): # 14
coeffs_string = """" # 15
for degree in range(len(self.coeffs) - 1, -1, -1): # 16
if self.coeffs[degree] == 0: # 17
continue # 18
if degree == len(self.coeffs) - 1: # 19
coeffs_string += str(round(self.coeffs[degree], 2)) # 20
else: # 21
coeffs_string += "" + "" if self.coeffs[degree] > 0 else "" - "" # 22
coeffs_string += str(abs(round(self.coeffs[degree], 2))) # 23
# 24
if degree >= 2: # 25
coeffs_string += f""x^{degree}"" # 26
elif degree == 1: # 27
coeffs_string += ""x"" # 28
return coeffs_string # 29
# 30
def evaluate(self, x): # 31
ans = 0 # 32
for degree in range(len(self.coeffs)): # 33
ans += (self.coeffs[degree] * (x ** degree)) # 34
return ans # 35
# 36
def add(self, another): # 37
size = max(len(self.coeffs), another.get_degree() + 1) # 38
ans = [0] * size # 39
# 40
for degree in range(size): # 41
add = 0 # 42
if degree <= self.get_degree(): # 43
add += self.coeffs[degree] # 44
if degree <= another.get_degree(): # 45
add += another.coeffs[degree] # 46
ans[degree] = add # 47
# 48
return MyPolynomial(*ans) # 49
# 50
def multiply(self, another): # 51
size = self.get_degree() + another.get_degree() + 1 # 52
ans = [0] * size # 53
# 54
for deg1 in range(len(self.coeffs)): # 55
for deg2 in range(len(another.coeffs)): # 56
num = self.coeffs[deg1] * another.coeffs[deg2] # 57
ans[deg1 + deg2] += num # 58
# 59
return MyPolynomial(*ans) # 60
# 61
# 62
if __name__ == ""__main__"": # 63
p6 = MyPolynomial(3.0, 0.0, -2.0) # 64
p7 = MyPolynomial(1.0, 1.0) # 65
print(p6.multiply(p7)) # 66
print(p7) # 67"
140,MyRectangle,OOP_prepared,"[122, 5, 6, 5, 6, 41, 42, 43, 123, 112, 103, 9, 15, 5, 6, 28, 29, 103, 9, 15, 5, 6, 28, 29]","import math # 1
# 2
class MyPoint: # 3
def __init__(self, x=0, y=0): # 4
self.x = x # 5
self.y = y # 6
# 7
def get_x(self): # 8
return self.x # 9
# 10
def set_x(self, x): # 11
self.x = x # 12
# 13
def get_y(self): # 14
return self.y # 15
# 16
def set_y(self, y): # 17
self.y = y # 18
# 19
def get_xy(self): # 20
return [self.x, self.y] # 21
# 22
def set_xy(self, x, y): # 23
self.x = x # 24
self.y = y # 25
# 26
def distance(self, x=None, y=None, another=None): # 27
if another is not None: # 28
return math.sqrt((another.x - self.x) ** 2 + (another.y - self.y) ** 2) # 29
elif x is not None and y is not None: # 30
return math.sqrt((x - self.x) ** 2 + (y - self.y) ** 2) # 31
else: # 32
return math.sqrt((0 - self.x) ** 2 + (0 - self.y) ** 2) # 33
# 34
def __str__(self): # 35
return f""({self.x},{self.y})"" # 36
# 37
# 38
class MyRectangle: # 39
def __init__(self, top_left=None, bottom_right=None, x1=None, y1=None, x2=None, y2=None): # 40
if top_left is not None and bottom_right is not None: # 41
self.top_left = top_left # 42
self.bottom_right = bottom_right # 43
elif x1 is not None and y1 is not None and x2 is not None and y2 is not None: # 44
self.top_left = MyPoint(x1, y1) # 45
self.bottom_right = MyPoint(x2, y2) # 46
else: # 47
self.top_left = MyPoint() # 48
self.bottom_right = MyPoint() # 49
# 50
def get_top_left(self): # 51
return self.top_left # 52
# 53
def set_top_left(self, top_left): # 54
self.top_left = top_left # 55
# 56
def get_bottom_right(self): # 57
return self.bottom_right # 58
# 59
def set_bottom_right(self, bottom_right): # 60
self.bottom_right = bottom_right # 61
# 62
def set_top_left_x(self, x): # 63
self.top_left.set_x(x) # 64
# 65
def get_top_left_x(self): # 66
return self.top_left.get_x() # 67
# 68
def set_top_left_y(self, y): # 69
self.top_left.set_y(y) # 70
# 71
def get_top_left_y(self): # 72
return self.top_left.get_y() # 73
# 74
def set_top_left_xy(self, x, y): # 75
self.top_left.set_xy(x, y) # 76
# 77
def get_top_left_xy(self): # 78
return [self.top_left.get_x(), self.top_left.get_y()] # 79
# 80
def set_bottom_right_x(self, x): # 81
self.bottom_right.set_x(x) # 82
# 83
def get_bottom_right_x(self): # 84
return self.bottom_right.get_x() # 85
# 86
def set_bottom_right_y(self, y): # 87
self.bottom_right.set_y(y) # 88
# 89
def get_bottom_right_y(self): # 90
return self.bottom_right.get_y() # 91
# 92
def set_bottom_right_xy(self, x, y): # 93
self.bottom_right.set_xy(x, y) # 94
# 95
def get_bottom_right_xy(self): # 96
return [self.bottom_right.get_x(), self.bottom_right.get_y()] # 97
# 98
def get_bottom_left(self): # 99
return MyPoint(self.top_left.get_x(), self.bottom_right.get_y()) # 100
# 101
def get_top_right(self): # 102
return MyPoint(self.bottom_right.get_x(), self.top_left.get_y()) # 103
# 104
def get_diagonal(self): # 105
return self.top_left.distance(another=self.bottom_right) # 106
# 107
def get_full_point(self): # 108
return f""MyRectangle[topLeft={self.top_left},bottomLeft={self.get_bottom_left()},bottomRight={self.bottom_right},topRight={self.get_top_right()}]"" # 109
# 110
def get_area(self): # 111
return int(self.top_left.distance(another=self.get_top_right()) * self.bottom_right.distance(another=self.get_top_right())) # 112
# 113
def get_perimeter(self): # 114
return int((self.top_left.distance(another=self.get_top_right()) + self.bottom_right.distance(another=self.get_top_right())) * 2) # 115
# 116
def __str__(self): # 117
return f""MyRectangle[topLeft={self.top_left},bottomRight={self.bottom_right}]"" # 118
# 119
# 120
if __name__ == ""__main__"": # 121
my_rectangle = MyRectangle(MyPoint(1, 5), MyPoint(6, 1)) # 122
print(my_rectangle.get_area()) # 123"
141,MyRectangle,OOP_prepared,"[121, 5, 6, 122, 5, 6, 123, 28, 29]","import math # 1
# 2
class MyPoint: # 3
def __init__(self, x=0, y=0): # 4
self.x = x # 5
self.y = y # 6
# 7
def get_x(self): # 8
return self.x # 9
# 10
def set_x(self, x): # 11
self.x = x # 12
# 13
def get_y(self): # 14
return self.y # 15
# 16
def set_y(self, y): # 17
self.y = y # 18
# 19
def get_xy(self): # 20
return [self.x, self.y] # 21
# 22
def set_xy(self, x, y): # 23
self.x = x # 24
self.y = y # 25
# 26
def distance(self, x=None, y=None, another=None): # 27
if another is not None: # 28
return math.sqrt((another.x - self.x) ** 2 + (another.y - self.y) ** 2) # 29
elif x is not None and y is not None: # 30
return math.sqrt((x - self.x) ** 2 + (y - self.y) ** 2) # 31
else: # 32
return math.sqrt((0 - self.x) ** 2 + (0 - self.y) ** 2) # 33
# 34
def __str__(self): # 35
return f""({self.x},{self.y})"" # 36
# 37
# 38
class MyRectangle: # 39
def __init__(self, top_left=None, bottom_right=None, x1=None, y1=None, x2=None, y2=None): # 40
if top_left is not None and bottom_right is not None: # 41
self.top_left = top_left # 42
self.bottom_right = bottom_right # 43
elif x1 is not None and y1 is not None and x2 is not None and y2 is not None: # 44
self.top_left = MyPoint(x1, y1) # 45
self.bottom_right = MyPoint(x2, y2) # 46
else: # 47
self.top_left = MyPoint() # 48
self.bottom_right = MyPoint() # 49
# 50
def get_top_left(self): # 51
return self.top_left # 52
# 53
def set_top_left(self, top_left): # 54
self.top_left = top_left # 55
# 56
def get_bottom_right(self): # 57
return self.bottom_right # 58
# 59
def set_bottom_right(self, bottom_right): # 60
self.bottom_right = bottom_right # 61
# 62
def set_top_left_x(self, x): # 63
self.top_left.set_x(x) # 64
# 65
def get_top_left_x(self): # 66
return self.top_left.get_x() # 67
# 68
def set_top_left_y(self, y): # 69
self.top_left.set_y(y) # 70
# 71
def get_top_left_y(self): # 72
return self.top_left.get_y() # 73
# 74
def set_top_left_xy(self, x, y): # 75
self.top_left.set_xy(x, y) # 76
# 77
def get_top_left_xy(self): # 78
return [self.top_left.get_x(), self.top_left.get_y()] # 79
# 80
def set_bottom_right_x(self, x): # 81
self.bottom_right.set_x(x) # 82
# 83
def get_bottom_right_x(self): # 84
return self.bottom_right.get_x() # 85
# 86
def set_bottom_right_y(self, y): # 87
self.bottom_right.set_y(y) # 88
# 89
def get_bottom_right_y(self): # 90
return self.bottom_right.get_y() # 91
# 92
def set_bottom_right_xy(self, x, y): # 93
self.bottom_right.set_xy(x, y) # 94
# 95
def get_bottom_right_xy(self): # 96
return [self.bottom_right.get_x(), self.bottom_right.get_y()] # 97
# 98
def get_bottom_left(self): # 99
return MyPoint(self.top_left.get_x(), self.bottom_right.get_y()) # 100
# 101
def get_top_right(self): # 102
return MyPoint(self.bottom_right.get_x(), self.top_left.get_y()) # 103
# 104
def get_diagonal(self): # 105
return self.top_left.distance(another=self.bottom_right) # 106
# 107
def get_full_point(self): # 108
return f""MyRectangle[topLeft={self.top_left},bottomLeft={self.get_bottom_left()},bottomRight={self.bottom_right},topRight={self.get_top_right()}]"" # 109
# 110
def get_area(self): # 111
return int(self.top_left.distance(another=self.get_top_right()) * self.bottom_right.distance(another=self.get_top_right())) # 112
# 113
def get_perimeter(self): # 114
return int((self.top_left.distance(another=self.get_top_right()) + self.bottom_right.distance(another=self.get_top_right())) * 2) # 115
# 116
def __str__(self): # 117
return f""MyRectangle[topLeft={self.top_left},bottomRight={self.bottom_right}]"" # 118
# 119
if __name__ == ""__main__"": # 120
p2 = MyPoint(5, 7) # 121
p3 = MyPoint(1, 1) # 122
print(p2.distance(another=p3)) # 123"
142,MyRectangle,OOP_prepared,"[122, 5, 6, 5, 6, 41, 42, 43, 123, 112, 103, 9, 15, 5, 6, 28, 29, 103, 9, 15, 5, 6, 28, 29, 124, 115, 103, 9, 15, 5, 6, 28, 29, 103, 9, 15, 5, 6, 28, 29]","import math # 1
# 2
class MyPoint: # 3
def __init__(self, x=0, y=0): # 4
self.x = x # 5
self.y = y # 6
# 7
def get_x(self): # 8
return self.x # 9
# 10
def set_x(self, x): # 11
self.x = x # 12
# 13
def get_y(self): # 14
return self.y # 15
# 16
def set_y(self, y): # 17
self.y = y # 18
# 19
def get_xy(self): # 20
return [self.x, self.y] # 21
# 22
def set_xy(self, x, y): # 23
self.x = x # 24
self.y = y # 25
# 26
def distance(self, x=None, y=None, another=None): # 27
if another is not None: # 28
return math.sqrt((another.x - self.x) ** 2 + (another.y - self.y) ** 2) # 29
elif x is not None and y is not None: # 30
return math.sqrt((x - self.x) ** 2 + (y - self.y) ** 2) # 31
else: # 32
return math.sqrt((0 - self.x) ** 2 + (0 - self.y) ** 2) # 33
# 34
def __str__(self): # 35
return f""({self.x},{self.y})"" # 36
# 37
# 38
class MyRectangle: # 39
def __init__(self, top_left=None, bottom_right=None, x1=None, y1=None, x2=None, y2=None): # 40
if top_left is not None and bottom_right is not None: # 41
self.top_left = top_left # 42
self.bottom_right = bottom_right # 43
elif x1 is not None and y1 is not None and x2 is not None and y2 is not None: # 44
self.top_left = MyPoint(x1, y1) # 45
self.bottom_right = MyPoint(x2, y2) # 46
else: # 47
self.top_left = MyPoint() # 48
self.bottom_right = MyPoint() # 49
# 50
def get_top_left(self): # 51
return self.top_left # 52
# 53
def set_top_left(self, top_left): # 54
self.top_left = top_left # 55
# 56
def get_bottom_right(self): # 57
return self.bottom_right # 58
# 59
def set_bottom_right(self, bottom_right): # 60
self.bottom_right = bottom_right # 61
# 62
def set_top_left_x(self, x): # 63
self.top_left.set_x(x) # 64
# 65
def get_top_left_x(self): # 66
return self.top_left.get_x() # 67
# 68
def set_top_left_y(self, y): # 69
self.top_left.set_y(y) # 70
# 71
def get_top_left_y(self): # 72
return self.top_left.get_y() # 73
# 74
def set_top_left_xy(self, x, y): # 75
self.top_left.set_xy(x, y) # 76
# 77
def get_top_left_xy(self): # 78
return [self.top_left.get_x(), self.top_left.get_y()] # 79
# 80
def set_bottom_right_x(self, x): # 81
self.bottom_right.set_x(x) # 82
# 83
def get_bottom_right_x(self): # 84
return self.bottom_right.get_x() # 85
# 86
def set_bottom_right_y(self, y): # 87
self.bottom_right.set_y(y) # 88
# 89
def get_bottom_right_y(self): # 90
return self.bottom_right.get_y() # 91
# 92
def set_bottom_right_xy(self, x, y): # 93
self.bottom_right.set_xy(x, y) # 94
# 95
def get_bottom_right_xy(self): # 96
return [self.bottom_right.get_x(), self.bottom_right.get_y()] # 97
# 98
def get_bottom_left(self): # 99
return MyPoint(self.top_left.get_x(), self.bottom_right.get_y()) # 100
# 101
def get_top_right(self): # 102
return MyPoint(self.bottom_right.get_x(), self.top_left.get_y()) # 103
# 104
def get_diagonal(self): # 105
return self.top_left.distance(another=self.bottom_right) # 106
# 107
def get_full_point(self): # 108
return f""MyRectangle[topLeft={self.top_left},bottomLeft={self.get_bottom_left()},bottomRight={self.bottom_right},topRight={self.get_top_right()}]"" # 109
# 110
def get_area(self): # 111
return int(self.top_left.distance(another=self.get_top_right()) * self.bottom_right.distance(another=self.get_top_right())) # 112
# 113
def get_perimeter(self): # 114
return int((self.top_left.distance(another=self.get_top_right()) + self.bottom_right.distance(another=self.get_top_right())) * 2) # 115
# 116
def __str__(self): # 117
return f""MyRectangle[topLeft={self.top_left},bottomRight={self.bottom_right}]"" # 118
# 119
# 120
if __name__ == ""__main__"": # 121
rect1 = MyRectangle(MyPoint(0, 4), MyPoint(3, 0)) # 122
print(rect1.get_area()) # 123
print(rect1.get_perimeter()) # 124"
143,MyRectangle,OOP_prepared,"[122, 41, 44, 45, 5, 6, 46, 5, 6, 123, 109, 36, 100, 9, 15, 5, 6, 36, 36, 103, 9, 15, 5, 6, 36]","import math # 1
# 2
class MyPoint: # 3
def __init__(self, x=0, y=0): # 4
self.x = x # 5
self.y = y # 6
# 7
def get_x(self): # 8
return self.x # 9
# 10
def set_x(self, x): # 11
self.x = x # 12
# 13
def get_y(self): # 14
return self.y # 15
# 16
def set_y(self, y): # 17
self.y = y # 18
# 19
def get_xy(self): # 20
return [self.x, self.y] # 21
# 22
def set_xy(self, x, y): # 23
self.x = x # 24
self.y = y # 25
# 26
def distance(self, x=None, y=None, another=None): # 27
if another is not None: # 28
return math.sqrt((another.x - self.x) ** 2 + (another.y - self.y) ** 2) # 29
elif x is not None and y is not None: # 30
return math.sqrt((x - self.x) ** 2 + (y - self.y) ** 2) # 31
else: # 32
return math.sqrt((0 - self.x) ** 2 + (0 - self.y) ** 2) # 33
# 34
def __str__(self): # 35
return f""({self.x},{self.y})"" # 36
# 37
# 38
class MyRectangle: # 39
def __init__(self, top_left=None, bottom_right=None, x1=None, y1=None, x2=None, y2=None): # 40
if top_left is not None and bottom_right is not None: # 41
self.top_left = top_left # 42
self.bottom_right = bottom_right # 43
elif x1 is not None and y1 is not None and x2 is not None and y2 is not None: # 44
self.top_left = MyPoint(x1, y1) # 45
self.bottom_right = MyPoint(x2, y2) # 46
else: # 47
self.top_left = MyPoint() # 48
self.bottom_right = MyPoint() # 49
# 50
def get_top_left(self): # 51
return self.top_left # 52
# 53
def set_top_left(self, top_left): # 54
self.top_left = top_left # 55
# 56
def get_bottom_right(self): # 57
return self.bottom_right # 58
# 59
def set_bottom_right(self, bottom_right): # 60
self.bottom_right = bottom_right # 61
# 62
def set_top_left_x(self, x): # 63
self.top_left.set_x(x) # 64
# 65
def get_top_left_x(self): # 66
return self.top_left.get_x() # 67
# 68
def set_top_left_y(self, y): # 69
self.top_left.set_y(y) # 70
# 71
def get_top_left_y(self): # 72
return self.top_left.get_y() # 73
# 74
def set_top_left_xy(self, x, y): # 75
self.top_left.set_xy(x, y) # 76
# 77
def get_top_left_xy(self): # 78
return [self.top_left.get_x(), self.top_left.get_y()] # 79
# 80
def set_bottom_right_x(self, x): # 81
self.bottom_right.set_x(x) # 82
# 83
def get_bottom_right_x(self): # 84
return self.bottom_right.get_x() # 85
# 86
def set_bottom_right_y(self, y): # 87
self.bottom_right.set_y(y) # 88
# 89
def get_bottom_right_y(self): # 90
return self.bottom_right.get_y() # 91
# 92
def set_bottom_right_xy(self, x, y): # 93
self.bottom_right.set_xy(x, y) # 94
# 95
def get_bottom_right_xy(self): # 96
return [self.bottom_right.get_x(), self.bottom_right.get_y()] # 97
# 98
def get_bottom_left(self): # 99
return MyPoint(self.top_left.get_x(), self.bottom_right.get_y()) # 100
# 101
def get_top_right(self): # 102
return MyPoint(self.bottom_right.get_x(), self.top_left.get_y()) # 103
# 104
def get_diagonal(self): # 105
return self.top_left.distance(another=self.bottom_right) # 106
# 107
def get_full_point(self): # 108
return f""MyRectangle[topLeft={self.top_left},bottomLeft={self.get_bottom_left()},bottomRight={self.bottom_right},topRight={self.get_top_right()}]"" # 109
# 110
def get_area(self): # 111
return int(self.top_left.distance(another=self.get_top_right()) * self.bottom_right.distance(another=self.get_top_right())) # 112
# 113
def get_perimeter(self): # 114
return int((self.top_left.distance(another=self.get_top_right()) + self.bottom_right.distance(another=self.get_top_right())) * 2) # 115
# 116
def __str__(self): # 117
return f""MyRectangle[topLeft={self.top_left},bottomRight={self.bottom_right}]"" # 118
# 119
# 120
if __name__ == ""__main__"": # 121
rect2 = MyRectangle(x1=0, y1=0, x2=4, y2=3) # 122
print(rect2.get_full_point()) # 123"
144,MyRectangle,OOP_prepared,"[121, 41, 44, 48, 5, 6, 49, 5, 6, 122, 76, 24, 25, 123, 94, 24, 25, 124, 112, 103, 9, 15, 5, 6, 28, 29, 103, 9, 15, 5, 6, 28, 29, 125, 115, 103, 9, 15, 5, 6, 28, 29, 103, 9, 15, 5, 6, 28, 29]","import math # 1
# 2
class MyPoint: # 3
def __init__(self, x=0, y=0): # 4
self.x = x # 5
self.y = y # 6
# 7
def get_x(self): # 8
return self.x # 9
# 10
def set_x(self, x): # 11
self.x = x # 12
# 13
def get_y(self): # 14
return self.y # 15
# 16
def set_y(self, y): # 17
self.y = y # 18
# 19
def get_xy(self): # 20
return [self.x, self.y] # 21
# 22
def set_xy(self, x, y): # 23
self.x = x # 24
self.y = y # 25
# 26
def distance(self, x=None, y=None, another=None): # 27
if another is not None: # 28
return math.sqrt((another.x - self.x) ** 2 + (another.y - self.y) ** 2) # 29
elif x is not None and y is not None: # 30
return math.sqrt((x - self.x) ** 2 + (y - self.y) ** 2) # 31
else: # 32
return math.sqrt((0 - self.x) ** 2 + (0 - self.y) ** 2) # 33
# 34
def __str__(self): # 35
return f""({self.x},{self.y})"" # 36
# 37
# 38
class MyRectangle: # 39
def __init__(self, top_left=None, bottom_right=None, x1=None, y1=None, x2=None, y2=None): # 40
if top_left is not None and bottom_right is not None: # 41
self.top_left = top_left # 42
self.bottom_right = bottom_right # 43
elif x1 is not None and y1 is not None and x2 is not None and y2 is not None: # 44
self.top_left = MyPoint(x1, y1) # 45
self.bottom_right = MyPoint(x2, y2) # 46
else: # 47
self.top_left = MyPoint() # 48
self.bottom_right = MyPoint() # 49
# 50
def get_top_left(self): # 51
return self.top_left # 52
# 53
def set_top_left(self, top_left): # 54
self.top_left = top_left # 55
# 56
def get_bottom_right(self): # 57
return self.bottom_right # 58
# 59
def set_bottom_right(self, bottom_right): # 60
self.bottom_right = bottom_right # 61
# 62
def set_top_left_x(self, x): # 63
self.top_left.set_x(x) # 64
# 65
def get_top_left_x(self): # 66
return self.top_left.get_x() # 67
# 68
def set_top_left_y(self, y): # 69
self.top_left.set_y(y) # 70
# 71
def get_top_left_y(self): # 72
return self.top_left.get_y() # 73
# 74
def set_top_left_xy(self, x, y): # 75
self.top_left.set_xy(x, y) # 76
# 77
def get_top_left_xy(self): # 78
return [self.top_left.get_x(), self.top_left.get_y()] # 79
# 80
def set_bottom_right_x(self, x): # 81
self.bottom_right.set_x(x) # 82
# 83
def get_bottom_right_x(self): # 84
return self.bottom_right.get_x() # 85
# 86
def set_bottom_right_y(self, y): # 87
self.bottom_right.set_y(y) # 88
# 89
def get_bottom_right_y(self): # 90
return self.bottom_right.get_y() # 91
# 92
def set_bottom_right_xy(self, x, y): # 93
self.bottom_right.set_xy(x, y) # 94
# 95
def get_bottom_right_xy(self): # 96
return [self.bottom_right.get_x(), self.bottom_right.get_y()] # 97
# 98
def get_bottom_left(self): # 99
return MyPoint(self.top_left.get_x(), self.bottom_right.get_y()) # 100
# 101
def get_top_right(self): # 102
return MyPoint(self.bottom_right.get_x(), self.top_left.get_y()) # 103
# 104
def get_diagonal(self): # 105
return self.top_left.distance(another=self.bottom_right) # 106
# 107
def get_full_point(self): # 108
return f""MyRectangle[topLeft={self.top_left},bottomLeft={self.get_bottom_left()},bottomRight={self.bottom_right},topRight={self.get_top_right()}]"" # 109
# 110
def get_area(self): # 111
return int(self.top_left.distance(another=self.get_top_right()) * self.bottom_right.distance(another=self.get_top_right())) # 112
# 113
def get_perimeter(self): # 114
return int((self.top_left.distance(another=self.get_top_right()) + self.bottom_right.distance(another=self.get_top_right())) * 2) # 115
# 116
def __str__(self): # 117
return f""MyRectangle[topLeft={self.top_left},bottomRight={self.bottom_right}]"" # 118
# 119
if __name__ == '__main__': # 120
rect3 = MyRectangle() # 121
rect3.set_top_left_xy(2, 3) # 122
rect3.set_bottom_right_xy(6, 1) # 123
print(rect3.get_area()) # 124
print(rect3.get_perimeter()) # 125"
145,MyTime,OOP_prepared,"[74, 5, 6, 7, 75, 33, 34, 35, 39, 76, 52, 53, 55, 77, 33, 34, 35, 39]","from datetime import datetime, timedelta # 1
# 2
class MyTime: # 3
def __init__(self, hour, minute, second): # 4
self.hour = hour # 5
self.minute = minute # 6
self.second = second # 7
# 8
def get_hour(self): # 9
return self.hour # 10
# 11
def set_hour(self, hour): # 12
self.hour = hour # 13
# 14
def get_minute(self): # 15
return self.minute # 16
# 17
def set_minute(self, minute): # 18
self.minute = minute # 19
# 20
def get_second(self): # 21
return self.second # 22
# 23
def set_second(self, second): # 24
self.second = second # 25
# 26
def set_time(self, hour, minute, second): # 27
self.hour = hour # 28
self.minute = minute # 29
self.second = second # 30
# 31
def __str__(self): # 32
time_string = f""{self.hour:02}:{self.minute:02}:{self.second:02}"" # 33
try: # 34
time = datetime.strptime(time_string, ""%H:%M:%S"") # 35
except ValueError as ex: # 36
print(f""Error parsing time: {ex}"") # 37
return """" # 38
return time.strftime(""%H:%M:%S"") # 39
# 40
def next_hour(self): # 41
self.hour = (self.hour + 1) % 24 # 42
return self # 43
# 44
def next_minute(self): # 45
self.minute = (self.minute + 1) % 60 # 46
if self.minute == 0: # 47
self.next_hour() # 48
return self # 49
# 50
def next_second(self): # 51
self.second = (self.second + 1) % 60 # 52
if self.second == 0: # 53
self.next_minute() # 54
return self # 55
# 56
def previous_hour(self): # 57
self.hour = (self.hour - 1) % 24 # 58
return self # 59
# 60
def previous_minute(self): # 61
self.minute = (self.minute - 1) % 60 # 62
if self.minute == 59: # 63
self.previous_hour() # 64
return self # 65
# 66
def previous_second(self): # 67
self.second = (self.second - 1) % 60 # 68
if self.second == 59: # 69
self.previous_minute() # 70
return self # 71
# 72
if __name__ == ""__main__"": # 73
my_time = MyTime(10, 30, 45) # 74
print(my_time) # 75
my_time.next_second() # 76
print(my_time) # 77"
146,MyTime,OOP_prepared,"[74, 5, 6, 7, 75, 52, 53, 54, 46, 47, 48, 42, 43, 49, 55, 76, 33, 34, 35, 39]","from datetime import datetime, timedelta # 1
# 2
class MyTime: # 3
def __init__(self, hour, minute, second): # 4
self.hour = hour # 5
self.minute = minute # 6
self.second = second # 7
# 8
def get_hour(self): # 9
return self.hour # 10
# 11
def set_hour(self, hour): # 12
self.hour = hour # 13
# 14
def get_minute(self): # 15
return self.minute # 16
# 17
def set_minute(self, minute): # 18
self.minute = minute # 19
# 20
def get_second(self): # 21
return self.second # 22
# 23
def set_second(self, second): # 24
self.second = second # 25
# 26
def set_time(self, hour, minute, second): # 27
self.hour = hour # 28
self.minute = minute # 29
self.second = second # 30
# 31
def __str__(self): # 32
time_string = f""{self.hour:02}:{self.minute:02}:{self.second:02}"" # 33
try: # 34
time = datetime.strptime(time_string, ""%H:%M:%S"") # 35
except ValueError as ex: # 36
print(f""Error parsing time: {ex}"") # 37
return """" # 38
return time.strftime(""%H:%M:%S"") # 39
# 40
def next_hour(self): # 41
self.hour = (self.hour + 1) % 24 # 42
return self # 43
# 44
def next_minute(self): # 45
self.minute = (self.minute + 1) % 60 # 46
if self.minute == 0: # 47
self.next_hour() # 48
return self # 49
# 50
def next_second(self): # 51
self.second = (self.second + 1) % 60 # 52
if self.second == 0: # 53
self.next_minute() # 54
return self # 55
# 56
def previous_hour(self): # 57
self.hour = (self.hour - 1) % 24 # 58
return self # 59
# 60
def previous_minute(self): # 61
self.minute = (self.minute - 1) % 60 # 62
if self.minute == 59: # 63
self.previous_hour() # 64
return self # 65
# 66
def previous_second(self): # 67
self.second = (self.second - 1) % 60 # 68
if self.second == 59: # 69
self.previous_minute() # 70
return self # 71
# 72
if __name__ == ""__main__"": # 73
t2 = MyTime(23, 59, 59) # 74
t2.next_second() # 75
print(t2) # 76"
147,MyTime,OOP_prepared,"[74, 5, 6, 7, 75, 28, 29, 30, 76, 33, 34, 35, 39]","from datetime import datetime, timedelta # 1
# 2
class MyTime: # 3
def __init__(self, hour, minute, second): # 4
self.hour = hour # 5
self.minute = minute # 6
self.second = second # 7
# 8
def get_hour(self): # 9
return self.hour # 10
# 11
def set_hour(self, hour): # 12
self.hour = hour # 13
# 14
def get_minute(self): # 15
return self.minute # 16
# 17
def set_minute(self, minute): # 18
self.minute = minute # 19
# 20
def get_second(self): # 21
return self.second # 22
# 23
def set_second(self, second): # 24
self.second = second # 25
# 26
def set_time(self, hour, minute, second): # 27
self.hour = hour # 28
self.minute = minute # 29
self.second = second # 30
# 31
def __str__(self): # 32
time_string = f""{self.hour:02}:{self.minute:02}:{self.second:02}"" # 33
try: # 34
time = datetime.strptime(time_string, ""%H:%M:%S"") # 35
except ValueError as ex: # 36
print(f""Error parsing time: {ex}"") # 37
return """" # 38
return time.strftime(""%H:%M:%S"") # 39
# 40
def next_hour(self): # 41
self.hour = (self.hour + 1) % 24 # 42
return self # 43
# 44
def next_minute(self): # 45
self.minute = (self.minute + 1) % 60 # 46
if self.minute == 0: # 47
self.next_hour() # 48
return self # 49
# 50
def next_second(self): # 51
self.second = (self.second + 1) % 60 # 52
if self.second == 0: # 53
self.next_minute() # 54
return self # 55
# 56
def previous_hour(self): # 57
self.hour = (self.hour - 1) % 24 # 58
return self # 59
# 60
def previous_minute(self): # 61
self.minute = (self.minute - 1) % 60 # 62
if self.minute == 59: # 63
self.previous_hour() # 64
return self # 65
# 66
def previous_second(self): # 67
self.second = (self.second - 1) % 60 # 68
if self.second == 59: # 69
self.previous_minute() # 70
return self # 71
# 72
if __name__ == ""__main__"": # 73
t3 = MyTime(12, 0, 0) # 74
t3.set_time(15, 45, 30) # 75
print(t3) # 76"
148,MyTime,OOP_prepared,"[74, 5, 6, 7, 75, 68, 69, 70, 62, 63, 64, 58, 59, 65, 71, 76, 33, 34, 35, 39]","from datetime import datetime, timedelta # 1
# 2
class MyTime: # 3
def __init__(self, hour, minute, second): # 4
self.hour = hour # 5
self.minute = minute # 6
self.second = second # 7
# 8
def get_hour(self): # 9
return self.hour # 10
# 11
def set_hour(self, hour): # 12
self.hour = hour # 13
# 14
def get_minute(self): # 15
return self.minute # 16
# 17
def set_minute(self, minute): # 18
self.minute = minute # 19
# 20
def get_second(self): # 21
return self.second # 22
# 23
def set_second(self, second): # 24
self.second = second # 25
# 26
def set_time(self, hour, minute, second): # 27
self.hour = hour # 28
self.minute = minute # 29
self.second = second # 30
# 31
def __str__(self): # 32
time_string = f""{self.hour:02}:{self.minute:02}:{self.second:02}"" # 33
try: # 34
time = datetime.strptime(time_string, ""%H:%M:%S"") # 35
except ValueError as ex: # 36
print(f""Error parsing time: {ex}"") # 37
return """" # 38
return time.strftime(""%H:%M:%S"") # 39
# 40
def next_hour(self): # 41
self.hour = (self.hour + 1) % 24 # 42
return self # 43
# 44
def next_minute(self): # 45
self.minute = (self.minute + 1) % 60 # 46
if self.minute == 0: # 47
self.next_hour() # 48
return self # 49
# 50
def next_second(self): # 51
self.second = (self.second + 1) % 60 # 52
if self.second == 0: # 53
self.next_minute() # 54
return self # 55
# 56
def previous_hour(self): # 57
self.hour = (self.hour - 1) % 24 # 58
return self # 59
# 60
def previous_minute(self): # 61
self.minute = (self.minute - 1) % 60 # 62
if self.minute == 59: # 63
self.previous_hour() # 64
return self # 65
# 66
def previous_second(self): # 67
self.second = (self.second - 1) % 60 # 68
if self.second == 59: # 69
self.previous_minute() # 70
return self # 71
# 72
if __name__ == ""__main__"": # 73
t4 = MyTime(0, 0, 0) # 74
t4.previous_second() # 75
print(t4) # 76"
149,MyTime,OOP_prepared,"[82, 5, 6, 7, 83, 42, 43, 84, 62, 63, 65, 85, 52, 53, 55, 86, 33, 34, 35, 39]","from datetime import datetime, timedelta # 1
# 2
class MyTime: # 3
def __init__(self, hour, minute, second): # 4
self.hour = hour # 5
self.minute = minute # 6
self.second = second # 7
# 8
def get_hour(self): # 9
return self.hour # 10
# 11
def set_hour(self, hour): # 12
self.hour = hour # 13
# 14
def get_minute(self): # 15
return self.minute # 16
# 17
def set_minute(self, minute): # 18
self.minute = minute # 19
# 20
def get_second(self): # 21
return self.second # 22
# 23
def set_second(self, second): # 24
self.second = second # 25
# 26
def set_time(self, hour, minute, second): # 27
self.hour = hour # 28
self.minute = minute # 29
self.second = second # 30
# 31
def __str__(self): # 32
time_string = f""{self.hour:02}:{self.minute:02}:{self.second:02}"" # 33
try: # 34
time = datetime.strptime(time_string, ""%H:%M:%S"") # 35
except ValueError as ex: # 36
print(f""Error parsing time: {ex}"") # 37
return """" # 38
return time.strftime(""%H:%M:%S"") # 39
# 40
def next_hour(self): # 41
self.hour = (self.hour + 1) % 24 # 42
return self # 43
# 44
def next_minute(self): # 45
self.minute = (self.minute + 1) % 60 # 46
if self.minute == 0: # 47
self.next_hour() # 48
return self # 49
# 50
def next_second(self): # 51
self.second = (self.second + 1) % 60 # 52
if self.second == 0: # 53
self.next_minute() # 54
return self # 55
# 56
def previous_hour(self): # 57
self.hour = (self.hour - 1) % 24 # 58
return self # 59
# 60
def previous_minute(self): # 61
self.minute = (self.minute - 1) % 60 # 62
if self.minute == 59: # 63
self.previous_hour() # 64
return self # 65
# 66
def previous_second(self): # 67
self.second = (self.second - 1) % 60 # 68
if self.second == 59: # 69
self.previous_minute() # 70
return self # 71
# 72
class TestMyTime: # 73
@staticmethod # 74
def main(): # 75
my_time = MyTime(1, 1, 1) # 76
print(my_time) # 77
my_time.next_second() # 78
print(my_time) # 79
# 80
if __name__ == ""__main__"": # 81
t5 = MyTime(5, 5, 5) # 82
t5.next_hour() # 83
t5.previous_minute() # 84
t5.next_second() # 85
print(t5) # 86"
150,MyTriangle,OOP_prepared,"[87, 5, 6, 5, 6, 5, 6, 41, 42, 43, 44, 88, 69, 28, 29, 28, 29, 28, 29]","import math # 1
# 2
class MyPoint: # 3
def __init__(self, x=0, y=0): # 4
self.x = x # 5
self.y = y # 6
# 7
def get_x(self): # 8
return self.x # 9
# 10
def set_x(self, x): # 11
self.x = x # 12
# 13
def get_y(self): # 14
return self.y # 15
# 16
def set_y(self, y): # 17
self.y = y # 18
# 19
def get_xy(self): # 20
return [self.x, self.y] # 21
# 22
def set_xy(self, x, y): # 23
self.x = x # 24
self.y = y # 25
# 26
def distance(self, x=None, y=None, another=None): # 27
if another is not None: # 28
return math.sqrt((another.x - self.x) ** 2 + (another.y - self.y) ** 2) # 29
elif x is not None and y is not None: # 30
return math.sqrt((x - self.x) ** 2 + (y - self.y) ** 2) # 31
else: # 32
return math.sqrt(self.x ** 2 + self.y ** 2) # 33
# 34
def __str__(self): # 35
return f""({self.x},{self.y})"" # 36
# 37
# 38
class MyTriangle: # 39
def __init__(self, v1=None, v2=None, v3=None, x1=None, y1=None, x2=None, y2=None, x3=None, y3=None): # 40
if v1 is not None and v2 is not None and v3 is not None: # 41
self.v1 = v1 # 42
self.v2 = v2 # 43
self.v3 = v3 # 44
else: # 45
self.v1 = MyPoint(x1, y1) # 46
self.v2 = MyPoint(x2, y2) # 47
self.v3 = MyPoint(x3, y3) # 48
# 49
def get_v1(self): # 50
return self.v1 # 51
# 52
def set_v1(self, v1): # 53
self.v1 = v1 # 54
# 55
def get_v2(self): # 56
return self.v2 # 57
# 58
def set_v2(self, v2): # 59
self.v2 = v2 # 60
# 61
def get_v3(self): # 62
return self.v3 # 63
# 64
def set_v3(self, v3): # 65
self.v3 = v3 # 66
# 67
def get_perimeter(self): # 68
return self.v1.distance(another=self.v2) + self.v2.distance(another=self.v3) + self.v3.distance(another=self.v1) # 69
# 70
def get_type(self): # 71
d1 = self.v1.distance(another=self.v2) # 72
d2 = self.v2.distance(another=self.v3) # 73
d3 = self.v3.distance(another=self.v1) # 74
if d1 == d2 == d3: # 75
return ""Equilateral"" # 76
elif d1 == d2 or d2 == d3 or d1 == d3: # 77
return ""Isosceles"" # 78
else: # 79
return ""Scalene"" # 80
# 81
def __str__(self): # 82
return f""MyTriangle[v1={self.v1},v2={self.v2},v3={self.v3}]"" # 83
# 84
# 85
if __name__ == ""__main__"": # 86
my_triangle = MyTriangle(MyPoint(0, 0), MyPoint(3, 0), MyPoint(0, 4)) # 87
print(my_triangle.get_perimeter()) # 88"
151,MyTriangle,OOP_prepared,"[87, 5, 6, 88, 12, 89, 18, 90, 9, 91, 15, 92, 28, 30, 33]","import math # 1
# 2
class MyPoint: # 3
def __init__(self, x=0, y=0): # 4
self.x = x # 5
self.y = y # 6
# 7
def get_x(self): # 8
return self.x # 9
# 10
def set_x(self, x): # 11
self.x = x # 12
# 13
def get_y(self): # 14
return self.y # 15
# 16
def set_y(self, y): # 17
self.y = y # 18
# 19
def get_xy(self): # 20
return [self.x, self.y] # 21
# 22
def set_xy(self, x, y): # 23
self.x = x # 24
self.y = y # 25
# 26
def distance(self, x=None, y=None, another=None): # 27
if another is not None: # 28
return math.sqrt((another.x - self.x) ** 2 + (another.y - self.y) ** 2) # 29
elif x is not None and y is not None: # 30
return math.sqrt((x - self.x) ** 2 + (y - self.y) ** 2) # 31
else: # 32
return math.sqrt(self.x ** 2 + self.y ** 2) # 33
# 34
def __str__(self): # 35
return f""({self.x},{self.y})"" # 36
# 37
# 38
class MyTriangle: # 39
def __init__(self, v1=None, v2=None, v3=None, x1=None, y1=None, x2=None, y2=None, x3=None, y3=None): # 40
if v1 is not None and v2 is not None and v3 is not None: # 41
self.v1 = v1 # 42
self.v2 = v2 # 43
self.v3 = v3 # 44
else: # 45
self.v1 = MyPoint(x1, y1) # 46
self.v2 = MyPoint(x2, y2) # 47
self.v3 = MyPoint(x3, y3) # 48
# 49
def get_v1(self): # 50
return self.v1 # 51
# 52
def set_v1(self, v1): # 53
self.v1 = v1 # 54
# 55
def get_v2(self): # 56
return self.v2 # 57
# 58
def set_v2(self, v2): # 59
self.v2 = v2 # 60
# 61
def get_v3(self): # 62
return self.v3 # 63
# 64
def set_v3(self, v3): # 65
self.v3 = v3 # 66
# 67
def get_perimeter(self): # 68
return self.v1.distance(another=self.v2) + self.v2.distance(another=self.v3) + self.v3.distance(another=self.v1) # 69
# 70
def get_type(self): # 71
d1 = self.v1.distance(another=self.v2) # 72
d2 = self.v2.distance(another=self.v3) # 73
d3 = self.v3.distance(another=self.v1) # 74
if d1 == d2 == d3: # 75
return ""Equilateral"" # 76
elif d1 == d2 or d2 == d3 or d1 == d3: # 77
return ""Isosceles"" # 78
else: # 79
return ""Scalene"" # 80
# 81
def __str__(self): # 82
return f""MyTriangle[v1={self.v1},v2={self.v2},v3={self.v3}]"" # 83
# 84
# 85
if __name__ == ""__main__"": # 86
p2 = MyPoint(0, 0) # 87
p2.set_x(5) # 88
p2.set_y(12) # 89
print(p2.get_x()) # 90
print(p2.get_y()) # 91
print(p2.distance()) # 92"
152,MyTriangle,OOP_prepared,"[87, 5, 6, 5, 6, 5, 6, 41, 42, 43, 44, 88, 69, 28, 29, 28, 29, 28, 29, 89, 72, 28, 29, 73, 28, 29, 74, 28, 29, 75, 77, 80]","import math # 1
# 2
class MyPoint: # 3
def __init__(self, x=0, y=0): # 4
self.x = x # 5
self.y = y # 6
# 7
def get_x(self): # 8
return self.x # 9
# 10
def set_x(self, x): # 11
self.x = x # 12
# 13
def get_y(self): # 14
return self.y # 15
# 16
def set_y(self, y): # 17
self.y = y # 18
# 19
def get_xy(self): # 20
return [self.x, self.y] # 21
# 22
def set_xy(self, x, y): # 23
self.x = x # 24
self.y = y # 25
# 26
def distance(self, x=None, y=None, another=None): # 27
if another is not None: # 28
return math.sqrt((another.x - self.x) ** 2 + (another.y - self.y) ** 2) # 29
elif x is not None and y is not None: # 30
return math.sqrt((x - self.x) ** 2 + (y - self.y) ** 2) # 31
else: # 32
return math.sqrt(self.x ** 2 + self.y ** 2) # 33
# 34
def __str__(self): # 35
return f""({self.x},{self.y})"" # 36
# 37
# 38
class MyTriangle: # 39
def __init__(self, v1=None, v2=None, v3=None, x1=None, y1=None, x2=None, y2=None, x3=None, y3=None): # 40
if v1 is not None and v2 is not None and v3 is not None: # 41
self.v1 = v1 # 42
self.v2 = v2 # 43
self.v3 = v3 # 44
else: # 45
self.v1 = MyPoint(x1, y1) # 46
self.v2 = MyPoint(x2, y2) # 47
self.v3 = MyPoint(x3, y3) # 48
# 49
def get_v1(self): # 50
return self.v1 # 51
# 52
def set_v1(self, v1): # 53
self.v1 = v1 # 54
# 55
def get_v2(self): # 56
return self.v2 # 57
# 58
def set_v2(self, v2): # 59
self.v2 = v2 # 60
# 61
def get_v3(self): # 62
return self.v3 # 63
# 64
def set_v3(self, v3): # 65
self.v3 = v3 # 66
# 67
def get_perimeter(self): # 68
return self.v1.distance(another=self.v2) + self.v2.distance(another=self.v3) + self.v3.distance(another=self.v1) # 69
# 70
def get_type(self): # 71
d1 = self.v1.distance(another=self.v2) # 72
d2 = self.v2.distance(another=self.v3) # 73
d3 = self.v3.distance(another=self.v1) # 74
if d1 == d2 == d3: # 75
return ""Equilateral"" # 76
elif d1 == d2 or d2 == d3 or d1 == d3: # 77
return ""Isosceles"" # 78
else: # 79
return ""Scalene"" # 80
# 81
def __str__(self): # 82
return f""MyTriangle[v1={self.v1},v2={self.v2},v3={self.v3}]"" # 83
# 84
# 85
if __name__ == ""__main__"": # 86
triangle1 = MyTriangle(MyPoint(0, 0), MyPoint(3, 0), MyPoint(0, 4)) # 87
print(triangle1.get_perimeter()) # 88
print(triangle1.get_type()) # 89"
153,MyTriangle,OOP_prepared,"[87, 41, 46, 5, 6, 47, 5, 6, 48, 5, 6, 88, 69, 28, 29, 28, 29, 28, 29, 89, 72, 28, 29, 73, 28, 29, 74, 28, 29, 75, 77, 80]","import math # 1
# 2
class MyPoint: # 3
def __init__(self, x=0, y=0): # 4
self.x = x # 5
self.y = y # 6
# 7
def get_x(self): # 8
return self.x # 9
# 10
def set_x(self, x): # 11
self.x = x # 12
# 13
def get_y(self): # 14
return self.y # 15
# 16
def set_y(self, y): # 17
self.y = y # 18
# 19
def get_xy(self): # 20
return [self.x, self.y] # 21
# 22
def set_xy(self, x, y): # 23
self.x = x # 24
self.y = y # 25
# 26
def distance(self, x=None, y=None, another=None): # 27
if another is not None: # 28
return math.sqrt((another.x - self.x) ** 2 + (another.y - self.y) ** 2) # 29
elif x is not None and y is not None: # 30
return math.sqrt((x - self.x) ** 2 + (y - self.y) ** 2) # 31
else: # 32
return math.sqrt(self.x ** 2 + self.y ** 2) # 33
# 34
def __str__(self): # 35
return f""({self.x},{self.y})"" # 36
# 37
# 38
class MyTriangle: # 39
def __init__(self, v1=None, v2=None, v3=None, x1=None, y1=None, x2=None, y2=None, x3=None, y3=None): # 40
if v1 is not None and v2 is not None and v3 is not None: # 41
self.v1 = v1 # 42
self.v2 = v2 # 43
self.v3 = v3 # 44
else: # 45
self.v1 = MyPoint(x1, y1) # 46
self.v2 = MyPoint(x2, y2) # 47
self.v3 = MyPoint(x3, y3) # 48
# 49
def get_v1(self): # 50
return self.v1 # 51
# 52
def set_v1(self, v1): # 53
self.v1 = v1 # 54
# 55
def get_v2(self): # 56
return self.v2 # 57
# 58
def set_v2(self, v2): # 59
self.v2 = v2 # 60
# 61
def get_v3(self): # 62
return self.v3 # 63
# 64
def set_v3(self, v3): # 65
self.v3 = v3 # 66
# 67
def get_perimeter(self): # 68
return self.v1.distance(another=self.v2) + self.v2.distance(another=self.v3) + self.v3.distance(another=self.v1) # 69
# 70
def get_type(self): # 71
d1 = self.v1.distance(another=self.v2) # 72
d2 = self.v2.distance(another=self.v3) # 73
d3 = self.v3.distance(another=self.v1) # 74
if d1 == d2 == d3: # 75
return ""Equilateral"" # 76
elif d1 == d2 or d2 == d3 or d1 == d3: # 77
return ""Isosceles"" # 78
else: # 79
return ""Scalene"" # 80
# 81
def __str__(self): # 82
return f""MyTriangle[v1={self.v1},v2={self.v2},v3={self.v3}]"" # 83
# 84
# 85
if __name__ == ""__main__"": # 86
triangle2 = MyTriangle(x1=0, y1=0, x2=4, y2=0, x3=0, y3=3) # 87
print(triangle2.get_perimeter()) # 88
print(triangle2.get_type()) # 89"
154,MyTriangle,OOP_prepared,"[87, 5, 6, 5, 6, 5, 6, 41, 42, 43, 44, 88, 69, 28, 29, 28, 29, 28, 29, 89, 72, 28, 29, 73, 28, 29, 74, 28, 29, 75, 77, 78]","import math # 1
# 2
class MyPoint: # 3
def __init__(self, x=0, y=0): # 4
self.x = x # 5
self.y = y # 6
# 7
def get_x(self): # 8
return self.x # 9
# 10
def set_x(self, x): # 11
self.x = x # 12
# 13
def get_y(self): # 14
return self.y # 15
# 16
def set_y(self, y): # 17
self.y = y # 18
# 19
def get_xy(self): # 20
return [self.x, self.y] # 21
# 22
def set_xy(self, x, y): # 23
self.x = x # 24
self.y = y # 25
# 26
def distance(self, x=None, y=None, another=None): # 27
if another is not None: # 28
return math.sqrt((another.x - self.x) ** 2 + (another.y - self.y) ** 2) # 29
elif x is not None and y is not None: # 30
return math.sqrt((x - self.x) ** 2 + (y - self.y) ** 2) # 31
else: # 32
return math.sqrt(self.x ** 2 + self.y ** 2) # 33
# 34
def __str__(self): # 35
return f""({self.x},{self.y})"" # 36
# 37
# 38
class MyTriangle: # 39
def __init__(self, v1=None, v2=None, v3=None, x1=None, y1=None, x2=None, y2=None, x3=None, y3=None): # 40
if v1 is not None and v2 is not None and v3 is not None: # 41
self.v1 = v1 # 42
self.v2 = v2 # 43
self.v3 = v3 # 44
else: # 45
self.v1 = MyPoint(x1, y1) # 46
self.v2 = MyPoint(x2, y2) # 47
self.v3 = MyPoint(x3, y3) # 48
# 49
def get_v1(self): # 50
return self.v1 # 51
# 52
def set_v1(self, v1): # 53
self.v1 = v1 # 54
# 55
def get_v2(self): # 56
return self.v2 # 57
# 58
def set_v2(self, v2): # 59
self.v2 = v2 # 60
# 61
def get_v3(self): # 62
return self.v3 # 63
# 64
def set_v3(self, v3): # 65
self.v3 = v3 # 66
# 67
def get_perimeter(self): # 68
return self.v1.distance(another=self.v2) + self.v2.distance(another=self.v3) + self.v3.distance(another=self.v1) # 69
# 70
def get_type(self): # 71
d1 = self.v1.distance(another=self.v2) # 72
d2 = self.v2.distance(another=self.v3) # 73
d3 = self.v3.distance(another=self.v1) # 74
if d1 == d2 == d3: # 75
return ""Equilateral"" # 76
elif d1 == d2 or d2 == d3 or d1 == d3: # 77
return ""Isosceles"" # 78
else: # 79
return ""Scalene"" # 80
# 81
def __str__(self): # 82
return f""MyTriangle[v1={self.v1},v2={self.v2},v3={self.v3}]"" # 83
# 84
# 85
if __name__ == ""__main__"": # 86
triangle3 = MyTriangle(MyPoint(1, 1), MyPoint(2, 2), MyPoint(3, 3)) # 87
print(triangle3.get_perimeter()) # 88
print(triangle3.get_type()) # 89"
155,Player,OOP_prepared,"[60, 6, 7, 8, 61, 38, 39, 40, 41, 62, 55, 11, 14, 56, 17, 20, 57, 23, 26, 63, 34]","import math # 1
import random # 2
# 3
class Ball: # 4
def __init__(self, x, y, z): # 5
self.x = x # 6
self.y = y # 7
self.z = z # 8
# 9
def get_x(self): # 10
return self.x # 11
# 12
def set_x(self, x): # 13
self.x = x # 14
# 15
def get_y(self): # 16
return self.y # 17
# 18
def set_y(self, y): # 19
self.y = y # 20
# 21
def get_z(self): # 22
return self.z # 23
# 24
def set_z(self, z): # 25
self.z = z # 26
# 27
def set_xyz(self, x, y, z): # 28
self.x = x # 29
self.y = y # 30
self.z = z # 31
# 32
def __str__(self): # 33
return f""({self.x}, {self.y}, {self.z})"" # 34
# 35
class Player: # 36
def __init__(self, number, x, y, z): # 37
self.number = number # 38
self.x = x # 39
self.y = y # 40
self.z = z # 41
# 42
def move(self, x_disp, y_disp): # 43
self.x += x_disp # 44
self.y += y_disp # 45
# 46
def jump(self, z_disp): # 47
self.z += z_disp # 48
# 49
def near(self, ball): # 50
distance = math.sqrt((ball.get_x() - self.x) ** 2 + (ball.get_y() - self.y) ** 2 + (ball.get_z() - self.z) ** 2) # 51
return distance < 8 # 52
# 53
def kick(self, ball): # 54
ball.set_x(ball.get_x() + random.randint(0, 19)) # 55
ball.set_y(ball.get_y() + random.randint(0, 19)) # 56
ball.set_z(ball.get_z() + random.randint(0, 4)) # 57
# 58
if __name__ == ""__main__"": # 59
ball = Ball(0, 0, 0) # 60
player = Player(1, 0, 0, 0) # 61
player.kick(ball) # 62
print(ball) # 63"
156,Player,OOP_prepared,"[60, 38, 39, 40, 41, 61, 44, 45, 62]","import math # 1
import random # 2
# 3
class Ball: # 4
def __init__(self, x, y, z): # 5
self.x = x # 6
self.y = y # 7
self.z = z # 8
# 9
def get_x(self): # 10
return self.x # 11
# 12
def set_x(self, x): # 13
self.x = x # 14
# 15
def get_y(self): # 16
return self.y # 17
# 18
def set_y(self, y): # 19
self.y = y # 20
# 21
def get_z(self): # 22
return self.z # 23
# 24
def set_z(self, z): # 25
self.z = z # 26
# 27
def set_xyz(self, x, y, z): # 28
self.x = x # 29
self.y = y # 30
self.z = z # 31
# 32
def __str__(self): # 33
return f""({self.x}, {self.y}, {self.z})"" # 34
# 35
class Player: # 36
def __init__(self, number, x, y, z): # 37
self.number = number # 38
self.x = x # 39
self.y = y # 40
self.z = z # 41
# 42
def move(self, x_disp, y_disp): # 43
self.x += x_disp # 44
self.y += y_disp # 45
# 46
def jump(self, z_disp): # 47
self.z += z_disp # 48
# 49
def near(self, ball): # 50
distance = math.sqrt((ball.get_x() - self.x) ** 2 + (ball.get_y() - self.y) ** 2 + (ball.get_z() - self.z) ** 2) # 51
return distance < 8 # 52
# 53
def kick(self, ball): # 54
ball.set_x(ball.get_x() + random.randint(0, 19)) # 55
ball.set_y(ball.get_y() + random.randint(0, 19)) # 56
ball.set_z(ball.get_z() + random.randint(0, 4)) # 57
# 58
if __name__ == ""__main__"": # 59
player1 = Player(1, 2, 2, 2) # 60
player1.move(3, 4) # 61
print(player1.x, player1.y) # 62"
157,Player,OOP_prepared,"[60, 38, 39, 40, 41, 61, 48, 62]","import math # 1
import random # 2
# 3
class Ball: # 4
def __init__(self, x, y, z): # 5
self.x = x # 6
self.y = y # 7
self.z = z # 8
# 9
def get_x(self): # 10
return self.x # 11
# 12
def set_x(self, x): # 13
self.x = x # 14
# 15
def get_y(self): # 16
return self.y # 17
# 18
def set_y(self, y): # 19
self.y = y # 20
# 21
def get_z(self): # 22
return self.z # 23
# 24
def set_z(self, z): # 25
self.z = z # 26
# 27
def set_xyz(self, x, y, z): # 28
self.x = x # 29
self.y = y # 30
self.z = z # 31
# 32
def __str__(self): # 33
return f""({self.x}, {self.y}, {self.z})"" # 34
# 35
class Player: # 36
def __init__(self, number, x, y, z): # 37
self.number = number # 38
self.x = x # 39
self.y = y # 40
self.z = z # 41
# 42
def move(self, x_disp, y_disp): # 43
self.x += x_disp # 44
self.y += y_disp # 45
# 46
def jump(self, z_disp): # 47
self.z += z_disp # 48
# 49
def near(self, ball): # 50
distance = math.sqrt((ball.get_x() - self.x) ** 2 + (ball.get_y() - self.y) ** 2 + (ball.get_z() - self.z) ** 2) # 51
return distance < 8 # 52
# 53
def kick(self, ball): # 54
ball.set_x(ball.get_x() + random.randint(0, 19)) # 55
ball.set_y(ball.get_y() + random.randint(0, 19)) # 56
ball.set_z(ball.get_z() + random.randint(0, 4)) # 57
# 58
if __name__ == ""__main__"": # 59
player2 = Player(2, 5, 5, 5) # 60
player2.jump(2) # 61
print(player2.z) # 62"
158,Player,OOP_prepared,"[68, 6, 7, 8, 69, 38, 39, 40, 41, 70, 51, 11, 17, 23, 52]","import math # 1
import random # 2
# 3
class Ball: # 4
def __init__(self, x, y, z): # 5
self.x = x # 6
self.y = y # 7
self.z = z # 8
# 9
def get_x(self): # 10
return self.x # 11
# 12
def set_x(self, x): # 13
self.x = x # 14
# 15
def get_y(self): # 16
return self.y # 17
# 18
def set_y(self, y): # 19
self.y = y # 20
# 21
def get_z(self): # 22
return self.z # 23
# 24
def set_z(self, z): # 25
self.z = z # 26
# 27
def set_xyz(self, x, y, z): # 28
self.x = x # 29
self.y = y # 30
self.z = z # 31
# 32
def __str__(self): # 33
return f""({self.x}, {self.y}, {self.z})"" # 34
# 35
class Player: # 36
def __init__(self, number, x, y, z): # 37
self.number = number # 38
self.x = x # 39
self.y = y # 40
self.z = z # 41
# 42
def move(self, x_disp, y_disp): # 43
self.x += x_disp # 44
self.y += y_disp # 45
# 46
def jump(self, z_disp): # 47
self.z += z_disp # 48
# 49
def near(self, ball): # 50
distance = math.sqrt((ball.get_x() - self.x) ** 2 + (ball.get_y() - self.y) ** 2 + (ball.get_z() - self.z) ** 2) # 51
return distance < 8 # 52
# 53
def kick(self, ball): # 54
ball.set_x(ball.get_x() + random.randint(0, 19)) # 55
ball.set_y(ball.get_y() + random.randint(0, 19)) # 56
ball.set_z(ball.get_z() + random.randint(0, 4)) # 57
# 58
class TestPlayer: # 59
@staticmethod # 60
def main(): # 61
ball = Ball(15, 15, 15) # 62
player = Player(4, 15, 15, 15) # 63
player.kick(ball) # 64
print(ball) # 65
# 66
if __name__ == ""__main__"": # 67
ball2 = Ball(10, 10, 10) # 68
player3 = Player(3, 6, 6, 6) # 69
print(player3.near(ball2)) # 70"
159,Player,OOP_prepared,"[61, 6, 7, 8, 62, 38, 39, 40, 41, 63, 55, 11, 14, 56, 17, 20, 57, 23, 26, 64, 34]","import math # 1
import random # 2
# 3
class Ball: # 4
def __init__(self, x, y, z): # 5
self.x = x # 6
self.y = y # 7
self.z = z # 8
# 9
def get_x(self): # 10
return self.x # 11
# 12
def set_x(self, x): # 13
self.x = x # 14
# 15
def get_y(self): # 16
return self.y # 17
# 18
def set_y(self, y): # 19
self.y = y # 20
# 21
def get_z(self): # 22
return self.z # 23
# 24
def set_z(self, z): # 25
self.z = z # 26
# 27
def set_xyz(self, x, y, z): # 28
self.x = x # 29
self.y = y # 30
self.z = z # 31
# 32
def __str__(self): # 33
return f""({self.x}, {self.y}, {self.z})"" # 34
# 35
class Player: # 36
def __init__(self, number, x, y, z): # 37
self.number = number # 38
self.x = x # 39
self.y = y # 40
self.z = z # 41
# 42
def move(self, x_disp, y_disp): # 43
self.x += x_disp # 44
self.y += y_disp # 45
# 46
def jump(self, z_disp): # 47
self.z += z_disp # 48
# 49
def near(self, ball): # 50
distance = math.sqrt((ball.get_x() - self.x) ** 2 + (ball.get_y() - self.y) ** 2 + (ball.get_z() - self.z) ** 2) # 51
return distance < 8 # 52
# 53
def kick(self, ball): # 54
ball.set_x(ball.get_x() + random.randint(0, 19)) # 55
ball.set_y(ball.get_y() + random.randint(0, 19)) # 56
ball.set_z(ball.get_z() + random.randint(0, 4)) # 57
# 58
# 59
if __name__ == ""__main__"": # 60
ball3 = Ball(0, 0, 0) # 61
player4 = Player(4, 0, 0, 0) # 62
player4.kick(ball3) # 63
print(ball3) # 64"
160,Point3D,OOP_prepared,"[58, 35, 3, 4, 36, 59, 47, 23, 24, 48, 60, 54, 8, 16]","class Point2D: # 1
def __init__(self, x=0.0, y=0.0): # 2
self._x = x # 3
self._y = y # 4
# 5
@property # 6
def x(self): # 7
return self._x # 8
# 9
@x.setter # 10
def x(self, x): # 11
self._x = x # 12
# 13
@property # 14
def y(self): # 15
return self._y # 16
# 17
@y.setter # 18
def y(self, y): # 19
self._y = y # 20
# 21
def set_xy(self, x, y): # 22
self._x = x # 23
self._y = y # 24
# 25
def get_xy(self): # 26
return [self._x, self._y] # 27
# 28
def __str__(self): # 29
return f""({self._x}, {self._y})"" # 30
# 31
# 32
class Point3D(Point2D): # 33
def __init__(self, x=0.0, y=0.0, z=0.0): # 34
super().__init__(x, y) # 35
self._z = z # 36
# 37
@property # 38
def z(self): # 39
return self._z # 40
# 41
@z.setter # 42
def z(self, z): # 43
self._z = z # 44
# 45
def set_xyz(self, x, y, z): # 46
self.set_xy(x, y) # 47
self._z = z # 48
# 49
def get_xyz(self): # 50
return [self.x, self.y, self._z] # 51
# 52
def __str__(self): # 53
return f""({self.x}, {self.y}, {self._z})"" # 54
# 55
# 56
if __name__ == ""__main__"": # 57
p1 = Point3D(1, 2, 3) # 58
p1.set_xyz(12, 13, 14) # 59
print(p1) # 60"
161,Point3D,OOP_prepared,"[58, 3, 4, 59, 23, 24, 60, 27]","class Point2D: # 1
def __init__(self, x=0.0, y=0.0): # 2
self._x = x # 3
self._y = y # 4
# 5
@property # 6
def x(self): # 7
return self._x # 8
# 9
@x.setter # 10
def x(self, x): # 11
self._x = x # 12
# 13
@property # 14
def y(self): # 15
return self._y # 16
# 17
@y.setter # 18
def y(self, y): # 19
self._y = y # 20
# 21
def set_xy(self, x, y): # 22
self._x = x # 23
self._y = y # 24
# 25
def get_xy(self): # 26
return [self._x, self._y] # 27
# 28
def __str__(self): # 29
return f""({self._x}, {self._y})"" # 30
# 31
# 32
class Point3D(Point2D): # 33
def __init__(self, x=0.0, y=0.0, z=0.0): # 34
super().__init__(x, y) # 35
self._z = z # 36
# 37
@property # 38
def z(self): # 39
return self._z # 40
# 41
@z.setter # 42
def z(self, z): # 43
self._z = z # 44
# 45
def set_xyz(self, x, y, z): # 46
self.set_xy(x, y) # 47
self._z = z # 48
# 49
def get_xyz(self): # 50
return [self.x, self.y, self._z] # 51
# 52
def __str__(self): # 53
return f""({self.x}, {self.y}, {self._z})"" # 54
# 55
# 56
if __name__ == ""__main__"": # 57
p2 = Point2D(3, 7) # 58
p2.set_xy(6, 9) # 59
print(p2.get_xy()) # 60"
162,Point3D,OOP_prepared,"[58, 35, 3, 4, 36, 59, 51, 8, 16]","class Point2D: # 1
def __init__(self, x=0.0, y=0.0): # 2
self._x = x # 3
self._y = y # 4
# 5
@property # 6
def x(self): # 7
return self._x # 8
# 9
@x.setter # 10
def x(self, x): # 11
self._x = x # 12
# 13
@property # 14
def y(self): # 15
return self._y # 16
# 17
@y.setter # 18
def y(self, y): # 19
self._y = y # 20
# 21
def set_xy(self, x, y): # 22
self._x = x # 23
self._y = y # 24
# 25
def get_xy(self): # 26
return [self._x, self._y] # 27
# 28
def __str__(self): # 29
return f""({self._x}, {self._y})"" # 30
# 31
# 32
class Point3D(Point2D): # 33
def __init__(self, x=0.0, y=0.0, z=0.0): # 34
super().__init__(x, y) # 35
self._z = z # 36
# 37
@property # 38
def z(self): # 39
return self._z # 40
# 41
@z.setter # 42
def z(self, z): # 43
self._z = z # 44
# 45
def set_xyz(self, x, y, z): # 46
self.set_xy(x, y) # 47
self._z = z # 48
# 49
def get_xyz(self): # 50
return [self.x, self.y, self._z] # 51
# 52
def __str__(self): # 53
return f""({self.x}, {self.y}, {self._z})"" # 54
# 55
# 56
if __name__ == ""__main__"": # 57
p3 = Point3D(1, 2, 3) # 58
print(p3.get_xyz()) # 59"
163,Point3D,OOP_prepared,"[58, 35, 3, 4, 36, 59, 47, 23, 24, 48, 60, 54, 8, 16]","class Point2D: # 1
def __init__(self, x=0.0, y=0.0): # 2
self._x = x # 3
self._y = y # 4
# 5
@property # 6
def x(self): # 7
return self._x # 8
# 9
@x.setter # 10
def x(self, x): # 11
self._x = x # 12
# 13
@property # 14
def y(self): # 15
return self._y # 16
# 17
@y.setter # 18
def y(self, y): # 19
self._y = y # 20
# 21
def set_xy(self, x, y): # 22
self._x = x # 23
self._y = y # 24
# 25
def get_xy(self): # 26
return [self._x, self._y] # 27
# 28
def __str__(self): # 29
return f""({self._x}, {self._y})"" # 30
# 31
# 32
class Point3D(Point2D): # 33
def __init__(self, x=0.0, y=0.0, z=0.0): # 34
super().__init__(x, y) # 35
self._z = z # 36
# 37
@property # 38
def z(self): # 39
return self._z # 40
# 41
@z.setter # 42
def z(self, z): # 43
self._z = z # 44
# 45
def set_xyz(self, x, y, z): # 46
self.set_xy(x, y) # 47
self._z = z # 48
# 49
def get_xyz(self): # 50
return [self.x, self.y, self._z] # 51
# 52
def __str__(self): # 53
return f""({self.x}, {self.y}, {self._z})"" # 54
# 55
# 56
if __name__ == ""__main__"": # 57
p4 = Point3D() # 58
p4.set_xyz(4, 5, 6) # 59
print(p4) # 60"
164,Point3D,OOP_prepared,"[58, 35, 3, 4, 36, 59, 44, 60, 54, 8, 16]","class Point2D: # 1
def __init__(self, x=0.0, y=0.0): # 2
self._x = x # 3
self._y = y # 4
# 5
@property # 6
def x(self): # 7
return self._x # 8
# 9
@x.setter # 10
def x(self, x): # 11
self._x = x # 12
# 13
@property # 14
def y(self): # 15
return self._y # 16
# 17
@y.setter # 18
def y(self, y): # 19
self._y = y # 20
# 21
def set_xy(self, x, y): # 22
self._x = x # 23
self._y = y # 24
# 25
def get_xy(self): # 26
return [self._x, self._y] # 27
# 28
def __str__(self): # 29
return f""({self._x}, {self._y})"" # 30
# 31
# 32
class Point3D(Point2D): # 33
def __init__(self, x=0.0, y=0.0, z=0.0): # 34
super().__init__(x, y) # 35
self._z = z # 36
# 37
@property # 38
def z(self): # 39
return self._z # 40
# 41
@z.setter # 42
def z(self, z): # 43
self._z = z # 44
# 45
def set_xyz(self, x, y, z): # 46
self.set_xy(x, y) # 47
self._z = z # 48
# 49
def get_xyz(self): # 50
return [self.x, self.y, self._z] # 51
# 52
def __str__(self): # 53
return f""({self.x}, {self.y}, {self._z})"" # 54
# 55
# 56
if __name__ == ""__main__"": # 57
p5 = Point3D(0, 0, 0) # 58
p5.z = 20 # 59
print(p5) # 60"
165,Rectangle,OOP_prepared,"[28, 3, 4, 29, 19]","class Rectangle: # 1
def __init__(self, length=1.0, width=1.0): # 2
self.length = length # 3
self.width = width # 4
# 5
def get_length(self): # 6
return self.length # 7
# 8
def set_length(self, length): # 9
self.length = length # 10
# 11
def get_width(self): # 12
return self.width # 13
# 14
def set_width(self, width): # 15
self.width = width # 16
# 17
def get_area(self): # 18
return self.length * self.width # 19
# 20
def get_perimeter(self): # 21
return (self.length + self.width) * 2 # 22
# 23
def __str__(self): # 24
return f""Rectangle[length={self.length}, width={self.width}]"" # 25
# 26
if __name__ == ""__main__"": # 27
r = Rectangle(2.5, 4.0) # 28
print(f""area is: {r.get_area():.2f}"") # 29"
166,Rectangle,OOP_prepared,"[29, 3, 4, 30, 10, 31, 16, 32, 22]","class Rectangle: # 1
def __init__(self, length=1.0, width=1.0): # 2
self.length = length # 3
self.width = width # 4
# 5
def get_length(self): # 6
return self.length # 7
# 8
def set_length(self, length): # 9
self.length = length # 10
# 11
def get_width(self): # 12
return self.width # 13
# 14
def set_width(self, width): # 15
self.width = width # 16
# 17
def get_area(self): # 18
return self.length * self.width # 19
# 20
def get_perimeter(self): # 21
return (self.length + self.width) * 2 # 22
# 23
def __str__(self): # 24
return f""Rectangle[length={self.length}, width={self.width}]"" # 25
# 26
# 27
if __name__ == ""__main__"": # 28
r2 = Rectangle() # 29
r2.set_length(6.0) # 30
r2.set_width(8.0) # 31
print(r2.get_perimeter()) # 32"
167,Rectangle,OOP_prepared,"[29, 3, 4, 30, 25]","class Rectangle: # 1
def __init__(self, length=1.0, width=1.0): # 2
self.length = length # 3
self.width = width # 4
# 5
def get_length(self): # 6
return self.length # 7
# 8
def set_length(self, length): # 9
self.length = length # 10
# 11
def get_width(self): # 12
return self.width # 13
# 14
def set_width(self, width): # 15
self.width = width # 16
# 17
def get_area(self): # 18
return self.length * self.width # 19
# 20
def get_perimeter(self): # 21
return (self.length + self.width) * 2 # 22
# 23
def __str__(self): # 24
return f""Rectangle[length={self.length}, width={self.width}]"" # 25
# 26
# 27
if __name__ == ""__main__"": # 28
r3 = Rectangle(10.0, 15.0) # 29
print(r3) # 30"
168,Rectangle,OOP_prepared,"[28, 3, 4, 29, 10, 30, 19]","class Rectangle: # 1
def __init__(self, length=1.0, width=1.0): # 2
self.length = length # 3
self.width = width # 4
# 5
def get_length(self): # 6
return self.length # 7
# 8
def set_length(self, length): # 9
self.length = length # 10
# 11
def get_width(self): # 12
return self.width # 13
# 14
def set_width(self, width): # 15
self.width = width # 16
# 17
def get_area(self): # 18
return self.length * self.width # 19
# 20
def get_perimeter(self): # 21
return (self.length + self.width) * 2 # 22
# 23
def __str__(self): # 24
return f""Rectangle[length={self.length}, width={self.width}]"" # 25
# 26
if __name__ == ""__main__"": # 27
r4 = Rectangle(4.0, 2.5) # 28
r4.set_length(7.0) # 29
print(r4.get_area()) # 30"
169,Rectangle,OOP_prepared,"[29, 3, 4, 30, 22]","class Rectangle: # 1
def __init__(self, length=1.0, width=1.0): # 2
self.length = length # 3
self.width = width # 4
# 5
def get_length(self): # 6
return self.length # 7
# 8
def set_length(self, length): # 9
self.length = length # 10
# 11
def get_width(self): # 12
return self.width # 13
# 14
def set_width(self, width): # 15
self.width = width # 16
# 17
def get_area(self): # 18
return self.length * self.width # 19
# 20
def get_perimeter(self): # 21
return (self.length + self.width) * 2 # 22
# 23
def __str__(self): # 24
return f""Rectangle[length={self.length}, width={self.width}]"" # 25
# 26
# 27
if __name__ == ""__main__"": # 28
r5 = Rectangle(6.0, 3.0) # 29
print(r5.get_perimeter()) # 30"
170,Resizable,OOP_prepared,"[50, 15, 51, 26, 52, 32, 53, 29]","import math # 1
from abc import ABC, abstractmethod # 2
# 3
class GeometricObject(ABC): # 4
@abstractmethod # 5
def get_area(self): # 6
pass # 7
# 8
@abstractmethod # 9
def get_perimeter(self): # 10
pass # 11
# 12
class Circle(GeometricObject): # 13
def __init__(self, radius=0.0): # 14
self._radius = radius # 15
# 16
@property # 17
def radius(self): # 18
return self._radius # 19
# 20
@radius.setter # 21
def radius(self, radius): # 22
self._radius = radius # 23
# 24
def __str__(self): # 25
return f""Circle[radius={self._radius}]"" # 26
# 27
def get_area(self): # 28
return self._radius * self._radius * math.pi # 29
# 30
def get_perimeter(self): # 31
return self._radius * 2 * math.pi # 32
# 33
class Resizable(ABC): # 34
@abstractmethod # 35
def resize(self, percent): # 36
pass # 37
# 38
class ResizableCircle(Circle, Resizable): # 39
def __init__(self, radius=0.0): # 40
super().__init__(radius) # 41
# 42
def __str__(self): # 43
return f""ResizableCircle[{super().__str__()}]"" # 44
# 45
def resize(self, percent): # 46
self._radius *= percent / 100 # 47
# 48
if __name__ == ""__main__"": # 49
g1 = Circle(2.5) # 50
print(g1) # 51
print(f""Perimeter = {g1.get_perimeter()}"") # 52
print(f""Area = {g1.get_area()}"") # 53"
171,Resizable,OOP_prepared,"[50, 15, 51, 26, 52, 32, 53, 29, 55, 41, 15, 56, 44, 26, 57, 47, 58, 44, 26]","import math # 1
from abc import ABC, abstractmethod # 2
# 3
class GeometricObject(ABC): # 4
@abstractmethod # 5
def get_area(self): # 6
pass # 7
# 8
@abstractmethod # 9
def get_perimeter(self): # 10
pass # 11
# 12
class Circle(GeometricObject): # 13
def __init__(self, radius=0.0): # 14
self._radius = radius # 15
# 16
@property # 17
def radius(self): # 18
return self._radius # 19
# 20
@radius.setter # 21
def radius(self, radius): # 22
self._radius = radius # 23
# 24
def __str__(self): # 25
return f""Circle[radius={self._radius}]"" # 26
# 27
def get_area(self): # 28
return self._radius * self._radius * math.pi # 29
# 30
def get_perimeter(self): # 31
return self._radius * 2 * math.pi # 32
# 33
class Resizable(ABC): # 34
@abstractmethod # 35
def resize(self, percent): # 36
pass # 37
# 38
class ResizableCircle(Circle, Resizable): # 39
def __init__(self, radius=0.0): # 40
super().__init__(radius) # 41
# 42
def __str__(self): # 43
return f""ResizableCircle[{super().__str__()}]"" # 44
# 45
def resize(self, percent): # 46
self._radius *= percent / 100 # 47
# 48
if __name__ == ""__main__"": # 49
g1 = Circle(1.2) # 50
print(g1) # 51
print(f""Perimeter = {g1.get_perimeter()}"") # 52
print(f""Area = {g1.get_area()}"") # 53
# 54
g2 = ResizableCircle(3.4) # 55
print(g2) # 56
g2.resize(56) # 57
print(g2) # 58"
172,Resizable,OOP_prepared,"[50, 15, 51, 26, 52, 32, 53, 29, 55, 41, 15, 56, 44, 26, 57, 47, 58, 44, 26, 60, 61, 44, 26, 62, 32, 63, 29]","import math # 1
from abc import ABC, abstractmethod # 2
# 3
class GeometricObject(ABC): # 4
@abstractmethod # 5
def get_area(self): # 6
pass # 7
# 8
@abstractmethod # 9
def get_perimeter(self): # 10
pass # 11
# 12
class Circle(GeometricObject): # 13
def __init__(self, radius=0.0): # 14
self._radius = radius # 15
# 16
@property # 17
def radius(self): # 18
return self._radius # 19
# 20
@radius.setter # 21
def radius(self, radius): # 22
self._radius = radius # 23
# 24
def __str__(self): # 25
return f""Circle[radius={self._radius}]"" # 26
# 27
def get_area(self): # 28
return self._radius * self._radius * math.pi # 29
# 30
def get_perimeter(self): # 31
return self._radius * 2 * math.pi # 32
# 33
class Resizable(ABC): # 34
@abstractmethod # 35
def resize(self, percent): # 36
pass # 37
# 38
class ResizableCircle(Circle, Resizable): # 39
def __init__(self, radius=0.0): # 40
super().__init__(radius) # 41
# 42
def __str__(self): # 43
return f""ResizableCircle[{super().__str__()}]"" # 44
# 45
def resize(self, percent): # 46
self._radius *= percent / 100 # 47
# 48
if __name__ == ""__main__"": # 49
g1 = Circle(1.2) # 50
print(g1) # 51
print(f""Perimeter = {g1.get_perimeter()}"") # 52
print(f""Area = {g1.get_area()}"") # 53
# 54
g2 = ResizableCircle(3.4) # 55
print(g2) # 56
g2.resize(56) # 57
print(g2) # 58
# 59
g3 = g2 # 60
print(g3) # 61
print(f""Perimeter = {g3.get_perimeter()}"") # 62
print(f""Area = {g3.get_area()}"") # 63"
173,Resizable,OOP_prepared,"[50, 41, 15, 51, 47, 52, 44, 26, 53, 29, 54, 32]","import math # 1
from abc import ABC, abstractmethod # 2
# 3
class GeometricObject(ABC): # 4
@abstractmethod # 5
def get_area(self): # 6
pass # 7
# 8
@abstractmethod # 9
def get_perimeter(self): # 10
pass # 11
# 12
class Circle(GeometricObject): # 13
def __init__(self, radius=0.0): # 14
self._radius = radius # 15
# 16
@property # 17
def radius(self): # 18
return self._radius # 19
# 20
@radius.setter # 21
def radius(self, radius): # 22
self._radius = radius # 23
# 24
def __str__(self): # 25
return f""Circle[radius={self._radius}]"" # 26
# 27
def get_area(self): # 28
return self._radius * self._radius * math.pi # 29
# 30
def get_perimeter(self): # 31
return self._radius * 2 * math.pi # 32
# 33
class Resizable(ABC): # 34
@abstractmethod # 35
def resize(self, percent): # 36
pass # 37
# 38
class ResizableCircle(Circle, Resizable): # 39
def __init__(self, radius=0.0): # 40
super().__init__(radius) # 41
# 42
def __str__(self): # 43
return f""ResizableCircle[{super().__str__()}]"" # 44
# 45
def resize(self, percent): # 46
self._radius *= percent / 100 # 47
# 48
if __name__ == ""__main__"": # 49
g5 = ResizableCircle(6.0) # 50
g5.resize(50) # 51
print(g5) # 52
print(f""New area after resizing: {g5.get_area()}"") # 53
print(f""New perimeter after resizing: {g5.get_perimeter()}"") # 54"
174,Resizable,OOP_prepared,"[50, 41, 15, 51, 44, 26, 52, 47, 53, 44, 26, 55, 15, 56, 23, 57, 29, 58, 32]","import math # 1
from abc import ABC, abstractmethod # 2
# 3
class GeometricObject(ABC): # 4
@abstractmethod # 5
def get_area(self): # 6
pass # 7
# 8
@abstractmethod # 9
def get_perimeter(self): # 10
pass # 11
# 12
class Circle(GeometricObject): # 13
def __init__(self, radius=0.0): # 14
self._radius = radius # 15
# 16
@property # 17
def radius(self): # 18
return self._radius # 19
# 20
@radius.setter # 21
def radius(self, radius): # 22
self._radius = radius # 23
# 24
def __str__(self): # 25
return f""Circle[radius={self._radius}]"" # 26
# 27
def get_area(self): # 28
return self._radius * self._radius * math.pi # 29
# 30
def get_perimeter(self): # 31
return self._radius * 2 * math.pi # 32
# 33
class Resizable(ABC): # 34
@abstractmethod # 35
def resize(self, percent): # 36
pass # 37
# 38
class ResizableCircle(Circle, Resizable): # 39
def __init__(self, radius=0.0): # 40
super().__init__(radius) # 41
# 42
def __str__(self): # 43
return f""ResizableCircle[{super().__str__()}]"" # 44
# 45
def resize(self, percent): # 46
self._radius *= percent / 100 # 47
# 48
if __name__ == ""__main__"": # 49
g3 = ResizableCircle(4.0) # 50
print(g3) # 51
g3.resize(200) # 52
print(g3) # 53
# 54
g4 = Circle(10.0) # 55
g4.radius = 15.0 # 56
print(f""Updated area: {g4.get_area()}"") # 57
print(f""Updated perimeter: {g4.get_perimeter()}"") # 58"
175,Shape_2,OOP_prepared,"[96, 32, 5, 6, 33, 97, 36]","from math import pi # 1
# 2
class Shape: # 3
def __init__(self, color=""red"", filled=True): # 4
self.color = color # 5
self.filled = filled # 6
# 7
def get_color(self): # 8
return self.color # 9
# 10
def set_color(self, color): # 11
self.color = color # 12
# 13
def is_filled(self): # 14
return self.filled # 15
# 16
def set_filled(self, filled): # 17
self.filled = filled # 18
# 19
def get_area(self): # 20
raise NotImplementedError(""Subclass must implement abstract method"") # 21
# 22
def get_perimeter(self): # 23
raise NotImplementedError(""Subclass must implement abstract method"") # 24
# 25
def __str__(self): # 26
return f""Shape[color={self.color}, filled={self.filled}]"" # 27
# 28
# 29
class Circle(Shape): # 30
def __init__(self, radius=1.0, color=""red"", filled=True): # 31
super().__init__(color, filled) # 32
self.radius = radius # 33
# 34
def get_area(self): # 35
return self.radius * self.radius * pi # 36
# 37
def get_perimeter(self): # 38
return 2 * self.radius * pi # 39
# 40
def __str__(self): # 41
return f""Circle[{super().__str__()}, radius={self.radius}]"" # 42
# 43
def set_radius(self, radius): # 44
self.radius = radius # 45
# 46
# 47
class Rectangle(Shape): # 48
def __init__(self, width=1.0, length=1.0, color=""red"", filled=True): # 49
super().__init__(color, filled) # 50
self.width = width # 51
self.length = length # 52
# 53
def get_width(self): # 54
return self.width # 55
# 56
def set_width(self, width): # 57
self.width = width # 58
# 59
def get_length(self): # 60
return self.length # 61
# 62
def set_length(self, length): # 63
self.length = length # 64
# 65
def get_area(self): # 66
return self.width * self.length # 67
# 68
def get_perimeter(self): # 69
return 2 * (self.width + self.length) # 70
# 71
def __str__(self): # 72
return f""Rectangle[{super().__str__()}, width={self.width}, length={self.length}]"" # 73
# 74
# 75
class Square(Rectangle): # 76
def __init__(self, side=1.0, color=""red"", filled=True): # 77
super().__init__(side, side, color, filled) # 78
# 79
def get_side(self): # 80
return self.get_length() # 81
# 82
def set_width(self, side): # 83
super().set_width(side) # 84
super().set_length(side) # 85
# 86
def set_length(self, side): # 87
super().set_width(side) # 88
super().set_length(side) # 89
# 90
def __str__(self): # 91
return f""Square[{super().__str__()}]"" # 92
# 93
# 94
if __name__ == ""__main__"": # 95
c1 = Circle(5) # 96
print(c1.get_area()) # 97"
176,Shape_2,OOP_prepared,"[96, 50, 5, 6, 51, 52, 97, 67, 98, 70, 99, 73, 27]","from math import pi # 1
# 2
class Shape: # 3
def __init__(self, color=""red"", filled=True): # 4
self.color = color # 5
self.filled = filled # 6
# 7
def get_color(self): # 8
return self.color # 9
# 10
def set_color(self, color): # 11
self.color = color # 12
# 13
def is_filled(self): # 14
return self.filled # 15
# 16
def set_filled(self, filled): # 17
self.filled = filled # 18
# 19
def get_area(self): # 20
raise NotImplementedError(""Subclass must implement abstract method"") # 21
# 22
def get_perimeter(self): # 23
raise NotImplementedError(""Subclass must implement abstract method"") # 24
# 25
def __str__(self): # 26
return f""Shape[color={self.color}, filled={self.filled}]"" # 27
# 28
# 29
class Circle(Shape): # 30
def __init__(self, radius=1.0, color=""red"", filled=True): # 31
super().__init__(color, filled) # 32
self.radius = radius # 33
# 34
def get_area(self): # 35
return self.radius * self.radius * pi # 36
# 37
def get_perimeter(self): # 38
return 2 * self.radius * pi # 39
# 40
def __str__(self): # 41
return f""Circle[{super().__str__()}, radius={self.radius}]"" # 42
# 43
def set_radius(self, radius): # 44
self.radius = radius # 45
# 46
# 47
class Rectangle(Shape): # 48
def __init__(self, width=1.0, length=1.0, color=""red"", filled=True): # 49
super().__init__(color, filled) # 50
self.width = width # 51
self.length = length # 52
# 53
def get_width(self): # 54
return self.width # 55
# 56
def set_width(self, width): # 57
self.width = width # 58
# 59
def get_length(self): # 60
return self.length # 61
# 62
def set_length(self, length): # 63
self.length = length # 64
# 65
def get_area(self): # 66
return self.width * self.length # 67
# 68
def get_perimeter(self): # 69
return 2 * (self.width + self.length) # 70
# 71
def __str__(self): # 72
return f""Rectangle[{super().__str__()}, width={self.width}, length={self.length}]"" # 73
# 74
# 75
class Square(Rectangle): # 76
def __init__(self, side=1.0, color=""red"", filled=True): # 77
super().__init__(side, side, color, filled) # 78
# 79
def get_side(self): # 80
return self.get_length() # 81
# 82
def set_width(self, side): # 83
super().set_width(side) # 84
super().set_length(side) # 85
# 86
def set_length(self, side): # 87
super().set_width(side) # 88
super().set_length(side) # 89
# 90
def __str__(self): # 91
return f""Square[{super().__str__()}]"" # 92
# 93
# 94
if __name__ == ""__main__"": # 95
r1 = Rectangle(3, 7) # 96
print(r1.get_area()) # 97
print(r1.get_perimeter()) # 98
print(r1) # 99"
177,Shape_2,OOP_prepared,"[96, 32, 5, 6, 33, 97, 36, 98, 39, 99, 42, 27]","from math import pi # 1
# 2
class Shape: # 3
def __init__(self, color=""red"", filled=True): # 4
self.color = color # 5
self.filled = filled # 6
# 7
def get_color(self): # 8
return self.color # 9
# 10
def set_color(self, color): # 11
self.color = color # 12
# 13
def is_filled(self): # 14
return self.filled # 15
# 16
def set_filled(self, filled): # 17
self.filled = filled # 18
# 19
def get_area(self): # 20
raise NotImplementedError(""Subclass must implement abstract method"") # 21
# 22
def get_perimeter(self): # 23
raise NotImplementedError(""Subclass must implement abstract method"") # 24
# 25
def __str__(self): # 26
return f""Shape[color={self.color}, filled={self.filled}]"" # 27
# 28
# 29
class Circle(Shape): # 30
def __init__(self, radius=1.0, color=""red"", filled=True): # 31
super().__init__(color, filled) # 32
self.radius = radius # 33
# 34
def get_area(self): # 35
return self.radius * self.radius * pi # 36
# 37
def get_perimeter(self): # 38
return 2 * self.radius * pi # 39
# 40
def __str__(self): # 41
return f""Circle[{super().__str__()}, radius={self.radius}]"" # 42
# 43
def set_radius(self, radius): # 44
self.radius = radius # 45
# 46
# 47
class Rectangle(Shape): # 48
def __init__(self, width=1.0, length=1.0, color=""red"", filled=True): # 49
super().__init__(color, filled) # 50
self.width = width # 51
self.length = length # 52
# 53
def get_width(self): # 54
return self.width # 55
# 56
def set_width(self, width): # 57
self.width = width # 58
# 59
def get_length(self): # 60
return self.length # 61
# 62
def set_length(self, length): # 63
self.length = length # 64
# 65
def get_area(self): # 66
return self.width * self.length # 67
# 68
def get_perimeter(self): # 69
return 2 * (self.width + self.length) # 70
# 71
def __str__(self): # 72
return f""Rectangle[{super().__str__()}, width={self.width}, length={self.length}]"" # 73
# 74
# 75
class Square(Rectangle): # 76
def __init__(self, side=1.0, color=""red"", filled=True): # 77
super().__init__(side, side, color, filled) # 78
# 79
def get_side(self): # 80
return self.get_length() # 81
# 82
def set_width(self, side): # 83
super().set_width(side) # 84
super().set_length(side) # 85
# 86
def set_length(self, side): # 87
super().set_width(side) # 88
super().set_length(side) # 89
# 90
def __str__(self): # 91
return f""Square[{super().__str__()}]"" # 92
# 93
# 94
if __name__ == ""__main__"": # 95
c2 = Circle(6, color=""blue"", filled=False) # 96
print(c2.get_area()) # 97
print(c2.get_perimeter()) # 98
print(c2) # 99"
178,Shape_2,OOP_prepared,"[96, 78, 50, 5, 6, 51, 52, 97, 12, 98, 67, 99, 9, 100, 92, 73, 27]","from math import pi # 1
# 2
class Shape: # 3
def __init__(self, color=""red"", filled=True): # 4
self.color = color # 5
self.filled = filled # 6
# 7
def get_color(self): # 8
return self.color # 9
# 10
def set_color(self, color): # 11
self.color = color # 12
# 13
def is_filled(self): # 14
return self.filled # 15
# 16
def set_filled(self, filled): # 17
self.filled = filled # 18
# 19
def get_area(self): # 20
raise NotImplementedError(""Subclass must implement abstract method"") # 21
# 22
def get_perimeter(self): # 23
raise NotImplementedError(""Subclass must implement abstract method"") # 24
# 25
def __str__(self): # 26
return f""Shape[color={self.color}, filled={self.filled}]"" # 27
# 28
# 29
class Circle(Shape): # 30
def __init__(self, radius=1.0, color=""red"", filled=True): # 31
super().__init__(color, filled) # 32
self.radius = radius # 33
# 34
def get_area(self): # 35
return self.radius * self.radius * pi # 36
# 37
def get_perimeter(self): # 38
return 2 * self.radius * pi # 39
# 40
def __str__(self): # 41
return f""Circle[{super().__str__()}, radius={self.radius}]"" # 42
# 43
def set_radius(self, radius): # 44
self.radius = radius # 45
# 46
# 47
class Rectangle(Shape): # 48
def __init__(self, width=1.0, length=1.0, color=""red"", filled=True): # 49
super().__init__(color, filled) # 50
self.width = width # 51
self.length = length # 52
# 53
def get_width(self): # 54
return self.width # 55
# 56
def set_width(self, width): # 57
self.width = width # 58
# 59
def get_length(self): # 60
return self.length # 61
# 62
def set_length(self, length): # 63
self.length = length # 64
# 65
def get_area(self): # 66
return self.width * self.length # 67
# 68
def get_perimeter(self): # 69
return 2 * (self.width + self.length) # 70
# 71
def __str__(self): # 72
return f""Rectangle[{super().__str__()}, width={self.width}, length={self.length}]"" # 73
# 74
# 75
class Square(Rectangle): # 76
def __init__(self, side=1.0, color=""red"", filled=True): # 77
super().__init__(side, side, color, filled) # 78
# 79
def get_side(self): # 80
return self.get_length() # 81
# 82
def set_width(self, side): # 83
super().set_width(side) # 84
super().set_length(side) # 85
# 86
def set_length(self, side): # 87
super().set_width(side) # 88
super().set_length(side) # 89
# 90
def __str__(self): # 91
return f""Square[{super().__str__()}]"" # 92
# 93
# 94
if __name__ == ""__main__"": # 95
s2 = Square(5, color=""green"", filled=False) # 96
s2.set_color(""yellow"") # 97
print(s2.get_area()) # 98
print(s2.get_color()) # 99
print(s2) # 100"
179,Shape_2,OOP_prepared,"[96, 50, 5, 6, 51, 52, 97, 64, 98, 58, 99, 67, 100, 70, 101, 73, 27]","from math import pi # 1
# 2
class Shape: # 3
def __init__(self, color=""red"", filled=True): # 4
self.color = color # 5
self.filled = filled # 6
# 7
def get_color(self): # 8
return self.color # 9
# 10
def set_color(self, color): # 11
self.color = color # 12
# 13
def is_filled(self): # 14
return self.filled # 15
# 16
def set_filled(self, filled): # 17
self.filled = filled # 18
# 19
def get_area(self): # 20
raise NotImplementedError(""Subclass must implement abstract method"") # 21
# 22
def get_perimeter(self): # 23
raise NotImplementedError(""Subclass must implement abstract method"") # 24
# 25
def __str__(self): # 26
return f""Shape[color={self.color}, filled={self.filled}]"" # 27
# 28
# 29
class Circle(Shape): # 30
def __init__(self, radius=1.0, color=""red"", filled=True): # 31
super().__init__(color, filled) # 32
self.radius = radius # 33
# 34
def get_area(self): # 35
return self.radius * self.radius * pi # 36
# 37
def get_perimeter(self): # 38
return 2 * self.radius * pi # 39
# 40
def __str__(self): # 41
return f""Circle[{super().__str__()}, radius={self.radius}]"" # 42
# 43
def set_radius(self, radius): # 44
self.radius = radius # 45
# 46
# 47
class Rectangle(Shape): # 48
def __init__(self, width=1.0, length=1.0, color=""red"", filled=True): # 49
super().__init__(color, filled) # 50
self.width = width # 51
self.length = length # 52
# 53
def get_width(self): # 54
return self.width # 55
# 56
def set_width(self, width): # 57
self.width = width # 58
# 59
def get_length(self): # 60
return self.length # 61
# 62
def set_length(self, length): # 63
self.length = length # 64
# 65
def get_area(self): # 66
return self.width * self.length # 67
# 68
def get_perimeter(self): # 69
return 2 * (self.width + self.length) # 70
# 71
def __str__(self): # 72
return f""Rectangle[{super().__str__()}, width={self.width}, length={self.length}]"" # 73
# 74
# 75
class Square(Rectangle): # 76
def __init__(self, side=1.0, color=""red"", filled=True): # 77
super().__init__(side, side, color, filled) # 78
# 79
def get_side(self): # 80
return self.get_length() # 81
# 82
def set_width(self, side): # 83
super().set_width(side) # 84
super().set_length(side) # 85
# 86
def set_length(self, side): # 87
super().set_width(side) # 88
super().set_length(side) # 89
# 90
def __str__(self): # 91
return f""Square[{super().__str__()}]"" # 92
# 93
# 94
if __name__ == ""__main__"": # 95
r2 = Rectangle(10, 5, color=""purple"", filled=True) # 96
r2.set_length(8) # 97
r2.set_width(4) # 98
print(r2.get_area()) # 99
print(r2.get_perimeter()) # 100
print(r2) # 101"
180,Shape,OOP_prepared,"[95, 26, 5, 6, 27, 96, 39, 21, 97, 30, 98, 33]","import math # 1
# 2
class Shape: # 3
def __init__(self, color=""red"", filled=True): # 4
self.color = color # 5
self.filled = filled # 6
# 7
def get_color(self): # 8
return self.color # 9
# 10
def set_color(self, color): # 11
self.color = color # 12
# 13
def is_filled(self): # 14
return self.filled # 15
# 16
def set_filled(self, filled): # 17
self.filled = filled # 18
# 19
def __str__(self): # 20
return f""Shape[color={self.color}, filled={self.filled}]"" # 21
# 22
# 23
class Circle(Shape): # 24
def __init__(self, radius=1.0, color=""red"", filled=True): # 25
super().__init__(color, filled) # 26
self.radius = radius # 27
# 28
def get_area(self): # 29
return self.radius * self.radius * math.pi # 30
# 31
def get_perimeter(self): # 32
return 2 * self.radius * math.pi # 33
# 34
def set_radius(self, radius): # 35
self.radius = radius # 36
# 37
def __str__(self): # 38
return f""Circle[{super().__str__()}, radius={self.radius}]"" # 39
# 40
# 41
class Rectangle(Shape): # 42
def __init__(self, width=1.0, length=1.0, color=""red"", filled=True): # 43
super().__init__(color, filled) # 44
self.width = width # 45
self.length = length # 46
# 47
def get_width(self): # 48
return self.width # 49
# 50
def set_width(self, width): # 51
self.width = width # 52
# 53
def get_length(self): # 54
return self.length # 55
# 56
def set_length(self, length): # 57
self.length = length # 58
# 59
def get_area(self): # 60
return self.width * self.length # 61
# 62
def get_perimeter(self): # 63
return 2 * (self.width + self.length) # 64
# 65
def __str__(self): # 66
return f""Rectangle[{super().__str__()}, width={self.width}, length={self.length}]"" # 67
# 68
# 69
class Square(Rectangle): # 70
def __init__(self, side=1.0, color=""red"", filled=True): # 71
super().__init__(side, side, color, filled) # 72
# 73
def get_side(self): # 74
return self.get_length() # 75
# 76
def set_side(self, side): # 77
self.set_width(side) # 78
self.set_length(side) # 79
# 80
def __str__(self): # 81
return f""Square[{super().__str__()}]"" # 82
# 83
# 84
class TestMain: # 85
@staticmethod # 86
def main(): # 87
c1 = Circle(5) # 88
print(c1) # 89
print(""Area:"", c1.get_area()) # 90
print(""Perimeter:"", c1.get_perimeter()) # 91
# 92
# 93
if __name__ == ""__main__"": # 94
c1 = Circle(5) # 95
print(c1) # 96
print(""Area:"", c1.get_area()) # 97
print(""Perimeter:"", c1.get_perimeter()) # 98"
181,Shape,OOP_prepared,"[86, 44, 5, 6, 45, 46, 87, 67, 21, 88, 61, 89, 64]","import math # 1
# 2
class Shape: # 3
def __init__(self, color=""red"", filled=True): # 4
self.color = color # 5
self.filled = filled # 6
# 7
def get_color(self): # 8
return self.color # 9
# 10
def set_color(self, color): # 11
self.color = color # 12
# 13
def is_filled(self): # 14
return self.filled # 15
# 16
def set_filled(self, filled): # 17
self.filled = filled # 18
# 19
def __str__(self): # 20
return f""Shape[color={self.color}, filled={self.filled}]"" # 21
# 22
# 23
class Circle(Shape): # 24
def __init__(self, radius=1.0, color=""red"", filled=True): # 25
super().__init__(color, filled) # 26
self.radius = radius # 27
# 28
def get_area(self): # 29
return self.radius * self.radius * math.pi # 30
# 31
def get_perimeter(self): # 32
return 2 * self.radius * math.pi # 33
# 34
def set_radius(self, radius): # 35
self.radius = radius # 36
# 37
def __str__(self): # 38
return f""Circle[{super().__str__()}, radius={self.radius}]"" # 39
# 40
# 41
class Rectangle(Shape): # 42
def __init__(self, width=1.0, length=1.0, color=""red"", filled=True): # 43
super().__init__(color, filled) # 44
self.width = width # 45
self.length = length # 46
# 47
def get_width(self): # 48
return self.width # 49
# 50
def set_width(self, width): # 51
self.width = width # 52
# 53
def get_length(self): # 54
return self.length # 55
# 56
def set_length(self, length): # 57
self.length = length # 58
# 59
def get_area(self): # 60
return self.width * self.length # 61
# 62
def get_perimeter(self): # 63
return 2 * (self.width + self.length) # 64
# 65
def __str__(self): # 66
return f""Rectangle[{super().__str__()}, width={self.width}, length={self.length}]"" # 67
# 68
# 69
class Square(Rectangle): # 70
def __init__(self, side=1.0, color=""red"", filled=True): # 71
super().__init__(side, side, color, filled) # 72
# 73
def get_side(self): # 74
return self.get_length() # 75
# 76
def set_side(self, side): # 77
self.set_width(side) # 78
self.set_length(side) # 79
# 80
def __str__(self): # 81
return f""Square[{super().__str__()}]"" # 82
# 83
# 84
if __name__ == ""__main__"": # 85
r1 = Rectangle(4, 6, ""green"", True) # 86
print(r1) # 87
print(""Area:"", r1.get_area()) # 88
print(""Perimeter:"", r1.get_perimeter()) # 89"
182,Shape,OOP_prepared,"[86, 26, 5, 6, 27, 87, 39, 21, 88, 30, 89, 33]","import math # 1
# 2
class Shape: # 3
def __init__(self, color=""red"", filled=True): # 4
self.color = color # 5
self.filled = filled # 6
# 7
def get_color(self): # 8
return self.color # 9
# 10
def set_color(self, color): # 11
self.color = color # 12
# 13
def is_filled(self): # 14
return self.filled # 15
# 16
def set_filled(self, filled): # 17
self.filled = filled # 18
# 19
def __str__(self): # 20
return f""Shape[color={self.color}, filled={self.filled}]"" # 21
# 22
# 23
class Circle(Shape): # 24
def __init__(self, radius=1.0, color=""red"", filled=True): # 25
super().__init__(color, filled) # 26
self.radius = radius # 27
# 28
def get_area(self): # 29
return self.radius * self.radius * math.pi # 30
# 31
def get_perimeter(self): # 32
return 2 * self.radius * math.pi # 33
# 34
def set_radius(self, radius): # 35
self.radius = radius # 36
# 37
def __str__(self): # 38
return f""Circle[{super().__str__()}, radius={self.radius}]"" # 39
# 40
# 41
class Rectangle(Shape): # 42
def __init__(self, width=1.0, length=1.0, color=""red"", filled=True): # 43
super().__init__(color, filled) # 44
self.width = width # 45
self.length = length # 46
# 47
def get_width(self): # 48
return self.width # 49
# 50
def set_width(self, width): # 51
self.width = width # 52
# 53
def get_length(self): # 54
return self.length # 55
# 56
def set_length(self, length): # 57
self.length = length # 58
# 59
def get_area(self): # 60
return self.width * self.length # 61
# 62
def get_perimeter(self): # 63
return 2 * (self.width + self.length) # 64
# 65
def __str__(self): # 66
return f""Rectangle[{super().__str__()}, width={self.width}, length={self.length}]"" # 67
# 68
# 69
class Square(Rectangle): # 70
def __init__(self, side=1.0, color=""red"", filled=True): # 71
super().__init__(side, side, color, filled) # 72
# 73
def get_side(self): # 74
return self.get_length() # 75
# 76
def set_side(self, side): # 77
self.set_width(side) # 78
self.set_length(side) # 79
# 80
def __str__(self): # 81
return f""Square[{super().__str__()}]"" # 82
# 83
# 84
if __name__ == ""__main__"": # 85
c1 = Circle(5, ""yellow"", False) # 86
print(c1) # 87
print(""Area:"", c1.get_area()) # 88
print(""Perimeter:"", c1.get_perimeter()) # 89"
183,Shape,OOP_prepared,"[86, 72, 44, 5, 6, 45, 46, 87, 82, 67, 21, 88, 61, 89, 64]","import math # 1
# 2
class Shape: # 3
def __init__(self, color=""red"", filled=True): # 4
self.color = color # 5
self.filled = filled # 6
# 7
def get_color(self): # 8
return self.color # 9
# 10
def set_color(self, color): # 11
self.color = color # 12
# 13
def is_filled(self): # 14
return self.filled # 15
# 16
def set_filled(self, filled): # 17
self.filled = filled # 18
# 19
def __str__(self): # 20
return f""Shape[color={self.color}, filled={self.filled}]"" # 21
# 22
# 23
class Circle(Shape): # 24
def __init__(self, radius=1.0, color=""red"", filled=True): # 25
super().__init__(color, filled) # 26
self.radius = radius # 27
# 28
def get_area(self): # 29
return self.radius * self.radius * math.pi # 30
# 31
def get_perimeter(self): # 32
return 2 * self.radius * math.pi # 33
# 34
def set_radius(self, radius): # 35
self.radius = radius # 36
# 37
def __str__(self): # 38
return f""Circle[{super().__str__()}, radius={self.radius}]"" # 39
# 40
# 41
class Rectangle(Shape): # 42
def __init__(self, width=1.0, length=1.0, color=""red"", filled=True): # 43
super().__init__(color, filled) # 44
self.width = width # 45
self.length = length # 46
# 47
def get_width(self): # 48
return self.width # 49
# 50
def set_width(self, width): # 51
self.width = width # 52
# 53
def get_length(self): # 54
return self.length # 55
# 56
def set_length(self, length): # 57
self.length = length # 58
# 59
def get_area(self): # 60
return self.width * self.length # 61
# 62
def get_perimeter(self): # 63
return 2 * (self.width + self.length) # 64
# 65
def __str__(self): # 66
return f""Rectangle[{super().__str__()}, width={self.width}, length={self.length}]"" # 67
# 68
# 69
class Square(Rectangle): # 70
def __init__(self, side=1.0, color=""red"", filled=True): # 71
super().__init__(side, side, color, filled) # 72
# 73
def get_side(self): # 74
return self.get_length() # 75
# 76
def set_side(self, side): # 77
self.set_width(side) # 78
self.set_length(side) # 79
# 80
def __str__(self): # 81
return f""Square[{super().__str__()}]"" # 82
# 83
# 84
if __name__ == ""__main__"": # 85
sq1 = Square(3, ""purple"", True) # 86
print(sq1) # 87
print(""Area:"", sq1.get_area()) # 88
print(""Perimeter:"", sq1.get_perimeter()) # 89"
184,Shape,OOP_prepared,"[86, 26, 5, 6, 27, 87, 36, 88, 39, 21, 89, 30, 90, 33]","import math # 1
# 2
class Shape: # 3
def __init__(self, color=""red"", filled=True): # 4
self.color = color # 5
self.filled = filled # 6
# 7
def get_color(self): # 8
return self.color # 9
# 10
def set_color(self, color): # 11
self.color = color # 12
# 13
def is_filled(self): # 14
return self.filled # 15
# 16
def set_filled(self, filled): # 17
self.filled = filled # 18
# 19
def __str__(self): # 20
return f""Shape[color={self.color}, filled={self.filled}]"" # 21
# 22
# 23
class Circle(Shape): # 24
def __init__(self, radius=1.0, color=""red"", filled=True): # 25
super().__init__(color, filled) # 26
self.radius = radius # 27
# 28
def get_area(self): # 29
return self.radius * self.radius * math.pi # 30
# 31
def get_perimeter(self): # 32
return 2 * self.radius * math.pi # 33
# 34
def set_radius(self, radius): # 35
self.radius = radius # 36
# 37
def __str__(self): # 38
return f""Circle[{super().__str__()}, radius={self.radius}]"" # 39
# 40
# 41
class Rectangle(Shape): # 42
def __init__(self, width=1.0, length=1.0, color=""red"", filled=True): # 43
super().__init__(color, filled) # 44
self.width = width # 45
self.length = length # 46
# 47
def get_width(self): # 48
return self.width # 49
# 50
def set_width(self, width): # 51
self.width = width # 52
# 53
def get_length(self): # 54
return self.length # 55
# 56
def set_length(self, length): # 57
self.length = length # 58
# 59
def get_area(self): # 60
return self.width * self.length # 61
# 62
def get_perimeter(self): # 63
return 2 * (self.width + self.length) # 64
# 65
def __str__(self): # 66
return f""Rectangle[{super().__str__()}, width={self.width}, length={self.length}]"" # 67
# 68
# 69
class Square(Rectangle): # 70
def __init__(self, side=1.0, color=""red"", filled=True): # 71
super().__init__(side, side, color, filled) # 72
# 73
def get_side(self): # 74
return self.get_length() # 75
# 76
def set_side(self, side): # 77
self.set_width(side) # 78
self.set_length(side) # 79
# 80
def __str__(self): # 81
return f""Square[{super().__str__()}]"" # 82
# 83
# 84
if __name__ == ""__main__"": # 85
c2 = Circle(7, ""orange"", True) # 86
c2.set_radius(10) # 87
print(c2) # 88
print(""Area:"", c2.get_area()) # 89
print(""Perimeter:"", c2.get_perimeter()) # 90"
185,SubClasses,OOP_prepared,"[87, 54, 3, 4, 55, 56, 57, 88, 84, 23]","class Person: # 1
def __init__(self, name=None, address=None): # 2
self._name = name # 3
self._address = address # 4
# 5
@property # 6
def name(self): # 7
return self._name # 8
# 9
@name.setter # 10
def name(self, name): # 11
self._name = name # 12
# 13
@property # 14
def address(self): # 15
return self._address # 16
# 17
@address.setter # 18
def address(self, address): # 19
self._address = address # 20
# 21
def __str__(self): # 22
return f""Person[name={self._name}, address={self._address}]"" # 23
# 24
# 25
class Staff(Person): # 26
def __init__(self, name, address, school, pay): # 27
super().__init__(name, address) # 28
self._school = school # 29
self._pay = pay # 30
# 31
@property # 32
def school(self): # 33
return self._school # 34
# 35
@school.setter # 36
def school(self, school): # 37
self._school = school # 38
# 39
@property # 40
def pay(self): # 41
return self._pay # 42
# 43
@pay.setter # 44
def pay(self, pay): # 45
self._pay = pay # 46
# 47
def __str__(self): # 48
return f""Staff[{super().__str__()} school={self._school}, pay={self._pay}]"" # 49
# 50
# 51
class Student(Person): # 52
def __init__(self, name, address, program, year, fee): # 53
super().__init__(name, address) # 54
self._program = program # 55
self._year = year # 56
self._fee = fee # 57
# 58
@property # 59
def program(self): # 60
return self._program # 61
# 62
@program.setter # 63
def program(self, program): # 64
self._program = program # 65
# 66
@property # 67
def year(self): # 68
return self._year # 69
# 70
@year.setter # 71
def year(self, year): # 72
self._year = year # 73
# 74
@property # 75
def fee(self): # 76
return self._fee # 77
# 78
@fee.setter # 79
def fee(self, fee): # 80
self._fee = fee # 81
# 82
def __str__(self): # 83
return f""Student[{super().__str__()}, program={self._program}, year={self._year}, fee={self._fee}]"" # 84
# 85
if __name__ == ""__main__"": # 86
s1 = Student(""John Doe"", ""New York"", ""CS101"", 2023, 500) # 87
print(s1) # 88"
186,SubClasses,OOP_prepared,"[88, 3, 4, 89, 12, 90, 20, 91, 23]","class Person: # 1
def __init__(self, name=None, address=None): # 2
self._name = name # 3
self._address = address # 4
# 5
@property # 6
def name(self): # 7
return self._name # 8
# 9
@name.setter # 10
def name(self, name): # 11
self._name = name # 12
# 13
@property # 14
def address(self): # 15
return self._address # 16
# 17
@address.setter # 18
def address(self, address): # 19
self._address = address # 20
# 21
def __str__(self): # 22
return f""Person[name={self._name}, address={self._address}]"" # 23
# 24
# 25
class Staff(Person): # 26
def __init__(self, name, address, school, pay): # 27
super().__init__(name, address) # 28
self._school = school # 29
self._pay = pay # 30
# 31
@property # 32
def school(self): # 33
return self._school # 34
# 35
@school.setter # 36
def school(self, school): # 37
self._school = school # 38
# 39
@property # 40
def pay(self): # 41
return self._pay # 42
# 43
@pay.setter # 44
def pay(self, pay): # 45
self._pay = pay # 46
# 47
def __str__(self): # 48
return f""Staff[{super().__str__()} school={self._school}, pay={self._pay}]"" # 49
# 50
# 51
class Student(Person): # 52
def __init__(self, name, address, program, year, fee): # 53
super().__init__(name, address) # 54
self._program = program # 55
self._year = year # 56
self._fee = fee # 57
# 58
@property # 59
def program(self): # 60
return self._program # 61
# 62
@program.setter # 63
def program(self, program): # 64
self._program = program # 65
# 66
@property # 67
def year(self): # 68
return self._year # 69
# 70
@year.setter # 71
def year(self, year): # 72
self._year = year # 73
# 74
@property # 75
def fee(self): # 76
return self._fee # 77
# 78
@fee.setter # 79
def fee(self, fee): # 80
self._fee = fee # 81
# 82
def __str__(self): # 83
return f""Student[{super().__str__()}, program={self._program}, year={self._year}, fee={self._fee}]"" # 84
# 85
# 86
if __name__ == ""__main__"": # 87
p2 = Person(""Bob"", ""456 Elm St"") # 88
p2.name = ""Robert"" # 89
p2.address = ""789 Oak St"" # 90
print(p2) # 91"
187,SubClasses,OOP_prepared,"[87, 28, 3, 4, 29, 30, 88, 49, 23]","class Person: # 1
def __init__(self, name=None, address=None): # 2
self._name = name # 3
self._address = address # 4
# 5
@property # 6
def name(self): # 7
return self._name # 8
# 9
@name.setter # 10
def name(self, name): # 11
self._name = name # 12
# 13
@property # 14
def address(self): # 15
return self._address # 16
# 17
@address.setter # 18
def address(self, address): # 19
self._address = address # 20
# 21
def __str__(self): # 22
return f""Person[name={self._name}, address={self._address}]"" # 23
# 24
# 25
class Staff(Person): # 26
def __init__(self, name, address, school, pay): # 27
super().__init__(name, address) # 28
self._school = school # 29
self._pay = pay # 30
# 31
@property # 32
def school(self): # 33
return self._school # 34
# 35
@school.setter # 36
def school(self, school): # 37
self._school = school # 38
# 39
@property # 40
def pay(self): # 41
return self._pay # 42
# 43
@pay.setter # 44
def pay(self, pay): # 45
self._pay = pay # 46
# 47
def __str__(self): # 48
return f""Staff[{super().__str__()} school={self._school}, pay={self._pay}]"" # 49
# 50
# 51
class Student(Person): # 52
def __init__(self, name, address, program, year, fee): # 53
super().__init__(name, address) # 54
self._program = program # 55
self._year = year # 56
self._fee = fee # 57
# 58
@property # 59
def program(self): # 60
return self._program # 61
# 62
@program.setter # 63
def program(self, program): # 64
self._program = program # 65
# 66
@property # 67
def year(self): # 68
return self._year # 69
# 70
@year.setter # 71
def year(self, year): # 72
self._year = year # 73
# 74
@property # 75
def fee(self): # 76
return self._fee # 77
# 78
@fee.setter # 79
def fee(self, fee): # 80
self._fee = fee # 81
# 82
def __str__(self): # 83
return f""Student[{super().__str__()}, program={self._program}, year={self._year}, fee={self._fee}]"" # 84
# 85
if __name__ == ""__main__"": # 86
s1 = Staff(""Dr. Smith"", ""123 College Ave"", ""University of XYZ"", 70000) # 87
print(s1) # 88"
188,SubClasses,OOP_prepared,"[88, 54, 3, 4, 55, 56, 57, 89, 84, 23]","class Person: # 1
def __init__(self, name=None, address=None): # 2
self._name = name # 3
self._address = address # 4
# 5
@property # 6
def name(self): # 7
return self._name # 8
# 9
@name.setter # 10
def name(self, name): # 11
self._name = name # 12
# 13
@property # 14
def address(self): # 15
return self._address # 16
# 17
@address.setter # 18
def address(self, address): # 19
self._address = address # 20
# 21
def __str__(self): # 22
return f""Person[name={self._name}, address={self._address}]"" # 23
# 24
# 25
class Staff(Person): # 26
def __init__(self, name, address, school, pay): # 27
super().__init__(name, address) # 28
self._school = school # 29
self._pay = pay # 30
# 31
@property # 32
def school(self): # 33
return self._school # 34
# 35
@school.setter # 36
def school(self, school): # 37
self._school = school # 38
# 39
@property # 40
def pay(self): # 41
return self._pay # 42
# 43
@pay.setter # 44
def pay(self, pay): # 45
self._pay = pay # 46
# 47
def __str__(self): # 48
return f""Staff[{super().__str__()} school={self._school}, pay={self._pay}]"" # 49
# 50
# 51
class Student(Person): # 52
def __init__(self, name, address, program, year, fee): # 53
super().__init__(name, address) # 54
self._program = program # 55
self._year = year # 56
self._fee = fee # 57
# 58
@property # 59
def program(self): # 60
return self._program # 61
# 62
@program.setter # 63
def program(self, program): # 64
self._program = program # 65
# 66
@property # 67
def year(self): # 68
return self._year # 69
# 70
@year.setter # 71
def year(self, year): # 72
self._year = year # 73
# 74
@property # 75
def fee(self): # 76
return self._fee # 77
# 78
@fee.setter # 79
def fee(self, fee): # 80
self._fee = fee # 81
# 82
def __str__(self): # 83
return f""Student[{super().__str__()}, program={self._program}, year={self._year}, fee={self._fee}]"" # 84
# 85
# 86
if __name__ == ""__main__"": # 87
s2 = Student(""Charlie"", ""789 Pine St"", ""Math101"", 2024, 1000) # 88
print(s2) # 89"
189,SubClasses,OOP_prepared,"[88, 28, 3, 4, 29, 30, 89, 38, 90, 46, 91, 49, 23]","class Person: # 1
def __init__(self, name=None, address=None): # 2
self._name = name # 3
self._address = address # 4
# 5
@property # 6
def name(self): # 7
return self._name # 8
# 9
@name.setter # 10
def name(self, name): # 11
self._name = name # 12
# 13
@property # 14
def address(self): # 15
return self._address # 16
# 17
@address.setter # 18
def address(self, address): # 19
self._address = address # 20
# 21
def __str__(self): # 22
return f""Person[name={self._name}, address={self._address}]"" # 23
# 24
# 25
class Staff(Person): # 26
def __init__(self, name, address, school, pay): # 27
super().__init__(name, address) # 28
self._school = school # 29
self._pay = pay # 30
# 31
@property # 32
def school(self): # 33
return self._school # 34
# 35
@school.setter # 36
def school(self, school): # 37
self._school = school # 38
# 39
@property # 40
def pay(self): # 41
return self._pay # 42
# 43
@pay.setter # 44
def pay(self, pay): # 45
self._pay = pay # 46
# 47
def __str__(self): # 48
return f""Staff[{super().__str__()} school={self._school}, pay={self._pay}]"" # 49
# 50
# 51
class Student(Person): # 52
def __init__(self, name, address, program, year, fee): # 53
super().__init__(name, address) # 54
self._program = program # 55
self._year = year # 56
self._fee = fee # 57
# 58
@property # 59
def program(self): # 60
return self._program # 61
# 62
@program.setter # 63
def program(self, program): # 64
self._program = program # 65
# 66
@property # 67
def year(self): # 68
return self._year # 69
# 70
@year.setter # 71
def year(self, year): # 72
self._year = year # 73
# 74
@property # 75
def fee(self): # 76
return self._fee # 77
# 78
@fee.setter # 79
def fee(self, fee): # 80
self._fee = fee # 81
# 82
def __str__(self): # 83
return f""Student[{super().__str__()}, program={self._program}, year={self._year}, fee={self._fee}]"" # 84
# 85
# 86
if __name__ == ""__main__"": # 87
s3 = Staff(""Professor Brown"", ""321 Maple St"", ""Tech University"", 75000) # 88
s3.school = ""Engineering College"" # 89
s3.pay = 80000 # 90
print(s3) # 91"
190,TestBigInteger,OOP_prepared,"[9, 10, 11]","class TestBigInteger: # 1
@staticmethod # 2
def main(): # 3
i1 = int(""11111111111111111111111111111111111111111111111111111111111111"") # 4
i2 = int(""2222222222222343242222222234234234234212222222222222222222"") # 5
print(i1 + i2) # 6
# 7
if __name__ == ""__main__"": # 8
i1 = int(""123456789012345678901234567890123456789012345678901234567890"") # 9
i2 = int(""987654321098765432109876543210987654321098765432109876543210"") # 10
print(i1 + i2) # 11"
191,TestBigInteger,OOP_prepared,"[9, 10, 11]","class TestBigInteger: # 1
@staticmethod # 2
def main(): # 3
i1 = int(""11111111111111111111111111111111111111111111111111111111111111"") # 4
i2 = int(""2222222222222343242222222234234234234212222222222222222222"") # 5
print(i1 + i2) # 6
# 7
if __name__ == ""__main__"": # 8
i1 = int(""99999999999999999999999999999999999999999999999999999999999999"") # 9
i2 = int(""1"") # 10
print(i1 + i2) # 11"
192,TestBigInteger,OOP_prepared,"[9, 4, 5, 6]","class TestBigInteger: # 1
@staticmethod # 2
def main(): # 3
i1 = int(""11111111111111111111111111111111111111111111111111111111111111"") # 4
i2 = int(""2222222222222343242222222234234234234212222222222222222222"") # 5
print(i1 + i2) # 6
# 7
if __name__ == ""__main__"": # 8
TestBigInteger.main() # 9"
193,TestBigInteger,OOP_prepared,"[9, 4, 5, 6]","class TestBigInteger: # 1
@staticmethod # 2
def main(): # 3
i1 = int(""11111111111111111111111111111111111111111111111111111111111111"") # 4
i2 = int(""2222222222222343242222222234234234234212222222222222222222"") # 5
print(i1 + i2) # 6
# 7
if __name__ == ""__main__"": # 8
TestBigInteger.main() # 9"
194,TestBigInteger,OOP_prepared,"[9, 10, 11, 4, 5, 6]","class TestBigInteger: # 1
@staticmethod # 2
def main(): # 3
i1 = int(""11111111111111111111111111111111111111111111111111111111111111"") # 4
i2 = int(""2222222222222343242222222234234234234212222222222222222222"") # 5
print(i1 + i2) # 6
# 7
if __name__ == ""__main__"": # 8
i1 = int(""3141592653589793238462643383279502884197169399375105820974944592"") # 9
i2 = int(""2718281828459045235360287471352662497757247093699959574966967627"") # 10
TestBigInteger.main() # 11"
195,Time,OOP_prepared,"[66, 5, 6, 7, 67, 33, 34, 42, 57, 58, 59, 63]","from datetime import datetime, timedelta # 1
# 2
class Time: # 3
def __init__(self, hour, minute, second): # 4
self.hour = hour # 5
self.minute = minute # 6
self.second = second # 7
# 8
def get_hour(self): # 9
return self.hour # 10
# 11
def set_hour(self, hour): # 12
self.hour = hour # 13
# 14
def get_minute(self): # 15
return self.minute # 16
# 17
def set_minute(self, minute): # 18
self.minute = minute # 19
# 20
def get_second(self): # 21
return self.second # 22
# 23
def set_second(self, second): # 24
self.second = second # 25
# 26
def set_time(self, hour, minute, second): # 27
self.hour = hour # 28
self.minute = minute # 29
self.second = second # 30
# 31
def next_second(self): # 32
self.second += 1 # 33
if self.second >= 60: # 34
self.second = 0 # 35
self.minute += 1 # 36
if self.minute >= 60: # 37
self.minute = 0 # 38
self.hour += 1 # 39
if self.hour >= 24: # 40
self.hour = 0 # 41
return self # 42
# 43
def previous_second(self): # 44
self.second -= 1 # 45
if self.second < 0: # 46
self.second = 59 # 47
self.minute -= 1 # 48
if self.minute < 0: # 49
self.minute = 59 # 50
self.hour -= 1 # 51
if self.hour < 0: # 52
self.hour = 23 # 53
return self # 54
# 55
def __str__(self): # 56
time_string = f""{self.hour:02}:{self.minute:02}:{self.second:02}"" # 57
try: # 58
time = datetime.strptime(time_string, ""%H:%M:%S"") # 59
except ValueError as ex: # 60
print(f""Error parsing time: {ex}"") # 61
return """" # 62
return time.strftime(""%H:%M:%S"") # 63
# 64
if __name__ == ""__main__"": # 65
t1 = Time(12, 30, 45) # 66
print(t1.next_second()) # 67"
196,Time,OOP_prepared,"[66, 5, 6, 7, 67, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 57, 58, 59, 63, 68, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 63]","from datetime import datetime, timedelta # 1
# 2
class Time: # 3
def __init__(self, hour, minute, second): # 4
self.hour = hour # 5
self.minute = minute # 6
self.second = second # 7
# 8
def get_hour(self): # 9
return self.hour # 10
# 11
def set_hour(self, hour): # 12
self.hour = hour # 13
# 14
def get_minute(self): # 15
return self.minute # 16
# 17
def set_minute(self, minute): # 18
self.minute = minute # 19
# 20
def get_second(self): # 21
return self.second # 22
# 23
def set_second(self, second): # 24
self.second = second # 25
# 26
def set_time(self, hour, minute, second): # 27
self.hour = hour # 28
self.minute = minute # 29
self.second = second # 30
# 31
def next_second(self): # 32
self.second += 1 # 33
if self.second >= 60: # 34
self.second = 0 # 35
self.minute += 1 # 36
if self.minute >= 60: # 37
self.minute = 0 # 38
self.hour += 1 # 39
if self.hour >= 24: # 40
self.hour = 0 # 41
return self # 42
# 43
def previous_second(self): # 44
self.second -= 1 # 45
if self.second < 0: # 46
self.second = 59 # 47
self.minute -= 1 # 48
if self.minute < 0: # 49
self.minute = 59 # 50
self.hour -= 1 # 51
if self.hour < 0: # 52
self.hour = 23 # 53
return self # 54
# 55
def __str__(self): # 56
time_string = f""{self.hour:02}:{self.minute:02}:{self.second:02}"" # 57
try: # 58
time = datetime.strptime(time_string, ""%H:%M:%S"") # 59
except ValueError as ex: # 60
print(f""Error parsing time: {ex}"") # 61
return """" # 62
return time.strftime(""%H:%M:%S"") # 63
# 64
if __name__ == ""__main__"": # 65
t2 = Time(23, 59, 59) # 66
print(t2.next_second()) # 67
print(t2.previous_second()) # 68"
197,Time,OOP_prepared,"[66, 5, 6, 7, 67, 28, 29, 30, 68, 57, 58, 59, 63]","from datetime import datetime, timedelta # 1
# 2
class Time: # 3
def __init__(self, hour, minute, second): # 4
self.hour = hour # 5
self.minute = minute # 6
self.second = second # 7
# 8
def get_hour(self): # 9
return self.hour # 10
# 11
def set_hour(self, hour): # 12
self.hour = hour # 13
# 14
def get_minute(self): # 15
return self.minute # 16
# 17
def set_minute(self, minute): # 18
self.minute = minute # 19
# 20
def get_second(self): # 21
return self.second # 22
# 23
def set_second(self, second): # 24
self.second = second # 25
# 26
def set_time(self, hour, minute, second): # 27
self.hour = hour # 28
self.minute = minute # 29
self.second = second # 30
# 31
def next_second(self): # 32
self.second += 1 # 33
if self.second >= 60: # 34
self.second = 0 # 35
self.minute += 1 # 36
if self.minute >= 60: # 37
self.minute = 0 # 38
self.hour += 1 # 39
if self.hour >= 24: # 40
self.hour = 0 # 41
return self # 42
# 43
def previous_second(self): # 44
self.second -= 1 # 45
if self.second < 0: # 46
self.second = 59 # 47
self.minute -= 1 # 48
if self.minute < 0: # 49
self.minute = 59 # 50
self.hour -= 1 # 51
if self.hour < 0: # 52
self.hour = 23 # 53
return self # 54
# 55
def __str__(self): # 56
time_string = f""{self.hour:02}:{self.minute:02}:{self.second:02}"" # 57
try: # 58
time = datetime.strptime(time_string, ""%H:%M:%S"") # 59
except ValueError as ex: # 60
print(f""Error parsing time: {ex}"") # 61
return """" # 62
return time.strftime(""%H:%M:%S"") # 63
# 64
if __name__ == ""__main__"": # 65
t3 = Time(0, 0, 0) # 66
t3.set_time(15, 45, 30) # 67
print(t3) # 68"
198,Time,OOP_prepared,"[66, 5, 6, 7, 67, 13, 68, 19, 69, 25, 70, 45, 46, 54, 57, 58, 59, 63]","from datetime import datetime, timedelta # 1
# 2
class Time: # 3
def __init__(self, hour, minute, second): # 4
self.hour = hour # 5
self.minute = minute # 6
self.second = second # 7
# 8
def get_hour(self): # 9
return self.hour # 10
# 11
def set_hour(self, hour): # 12
self.hour = hour # 13
# 14
def get_minute(self): # 15
return self.minute # 16
# 17
def set_minute(self, minute): # 18
self.minute = minute # 19
# 20
def get_second(self): # 21
return self.second # 22
# 23
def set_second(self, second): # 24
self.second = second # 25
# 26
def set_time(self, hour, minute, second): # 27
self.hour = hour # 28
self.minute = minute # 29
self.second = second # 30
# 31
def next_second(self): # 32
self.second += 1 # 33
if self.second >= 60: # 34
self.second = 0 # 35
self.minute += 1 # 36
if self.minute >= 60: # 37
self.minute = 0 # 38
self.hour += 1 # 39
if self.hour >= 24: # 40
self.hour = 0 # 41
return self # 42
# 43
def previous_second(self): # 44
self.second -= 1 # 45
if self.second < 0: # 46
self.second = 59 # 47
self.minute -= 1 # 48
if self.minute < 0: # 49
self.minute = 59 # 50
self.hour -= 1 # 51
if self.hour < 0: # 52
self.hour = 23 # 53
return self # 54
# 55
def __str__(self): # 56
time_string = f""{self.hour:02}:{self.minute:02}:{self.second:02}"" # 57
try: # 58
time = datetime.strptime(time_string, ""%H:%M:%S"") # 59
except ValueError as ex: # 60
print(f""Error parsing time: {ex}"") # 61
return """" # 62
return time.strftime(""%H:%M:%S"") # 63
# 64
if __name__ == ""__main__"": # 65
t4 = Time(5, 0, 0) # 66
t4.set_hour(23) # 67
t4.set_minute(59) # 68
t4.set_second(58) # 69
print(t4.previous_second()) # 70"
199,Time,OOP_prepared,"[67, 5, 6, 7, 68, 28, 29, 30, 69, 33, 34, 42, 57, 58, 59, 63]","from datetime import datetime, timedelta # 1
# 2
class Time: # 3
def __init__(self, hour, minute, second): # 4
self.hour = hour # 5
self.minute = minute # 6
self.second = second # 7
# 8
def get_hour(self): # 9
return self.hour # 10
# 11
def set_hour(self, hour): # 12
self.hour = hour # 13
# 14
def get_minute(self): # 15
return self.minute # 16
# 17
def set_minute(self, minute): # 18
self.minute = minute # 19
# 20
def get_second(self): # 21
return self.second # 22
# 23
def set_second(self, second): # 24
self.second = second # 25
# 26
def set_time(self, hour, minute, second): # 27
self.hour = hour # 28
self.minute = minute # 29
self.second = second # 30
# 31
def next_second(self): # 32
self.second += 1 # 33
if self.second >= 60: # 34
self.second = 0 # 35
self.minute += 1 # 36
if self.minute >= 60: # 37
self.minute = 0 # 38
self.hour += 1 # 39
if self.hour >= 24: # 40
self.hour = 0 # 41
return self # 42
# 43
def previous_second(self): # 44
self.second -= 1 # 45
if self.second < 0: # 46
self.second = 59 # 47
self.minute -= 1 # 48
if self.minute < 0: # 49
self.minute = 59 # 50
self.hour -= 1 # 51
if self.hour < 0: # 52
self.hour = 23 # 53
return self # 54
# 55
def __str__(self): # 56
time_string = f""{self.hour:02}:{self.minute:02}:{self.second:02}"" # 57
try: # 58
time = datetime.strptime(time_string, ""%H:%M:%S"") # 59
except ValueError as ex: # 60
print(f""Error parsing time: {ex}"") # 61
return """" # 62
return time.strftime(""%H:%M:%S"") # 63
# 64
# 65
if __name__ == ""__main__"": # 66
t5 = Time(7, 15, 30) # 67
t5.set_time(10, 30, 45) # 68
print(t5.next_second()) # 69"
