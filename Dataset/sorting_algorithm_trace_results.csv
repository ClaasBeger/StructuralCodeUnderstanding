Algorithm,Test Case,List Length,Executed Lines,Is Recursive,Source Code
bubble_sort,"[1, 2, 3]",3,"[9, 10, 11, 2, 3, 4, 3, 4, 3, 10, 11, 2, 3, 4, 3, 10, 11, 2, 3, 10, 12]",False,"def bubble(array:list, idx:int) -> None:  # 1
    last = len(array) - idx  # 2
    for i in range(last-1):  # 3
        if array[i] > array[i+1]:  # 4
            array[i], array[i+1] = array[i+1], array[i]  # 5
  # 6
  # 7
def bubble_sort(array:list) -> list:  # 8
    copied = array[:]  # 9
    for i in range(len(copied)):  # 10
        bubble(copied, i)  # 11
    return copied  # 12"
min_heap_sort,"[1, 2, 3]",3,"[17, 18, 20, 21, 2, 3, 4, 6, 8, 11, 20, 23, 24, 25, 26, 2, 3, 4, 6, 7, 8, 11, 12, 13, 2, 3, 4, 6, 8, 11, 23, 24, 25, 26, 2, 3, 4, 6, 8, 11, 23, 27]",True,"def min_heapify(array:list, root:int, last:int) -> None:  # 1
    smallest = root  # 2
    left_child = (2 * root) + 1  # 3
    right_child = (2 * root) + 2  # 4
  # 5
    if left_child < last and array[left_child] < array[smallest]:  # 6
        smallest = left_child  # 7
    if right_child < last and array[right_child] < array[smallest]:  # 8
        smallest = right_child  # 9
      # 10
    if smallest != root:  # 11
        array[root], array[smallest] = array[smallest], array[root]  # 12
        min_heapify(array, smallest, last)  # 13
  # 14
  # 15
def min_heap_sort(array:list) -> list:  # 16
    copied = array[:]  # 17
    size = len(copied)  # 18
      # 19
    for i in range(len(copied)//2-1, -1, -1):  # 20
        min_heapify(copied, i, len(copied))  # 21
  # 22
    for i in range(len(copied)-1, 0, -1):  # 23
        copied[0], copied[i] = copied[i], copied[0]  # 24
        size -= 1  # 25
        min_heapify(copied, 0, size)  # 26
    return copied  # 27"
insertion_sort,"[1, 2, 3]",3,"[8, 9, 10, 2, 3, 2, 9, 10, 2, 3, 2, 3, 2, 9, 11]",False,"def insert(array:list, last:int) -> None:  # 1
    for i in range(last, 0, -1):  # 2
        if array[i-1] > array[i]:  # 3
            array[i-1], array[i] = array[i], array[i-1]  # 4
  # 5
  # 6
def insertion_sort(array:list) -> list:  # 7
    copied = array[:]  # 8
    for i in range(1, len(copied)):  # 9
        insert(copied, i)  # 10
    return copied  # 11"
merge_sort,"[1, 2, 3]",3,"[33, 34, 23, 26, 27, 23, 26, 27, 23, 24, 28, 23, 24, 29, 2, 4, 6, 7, 8, 12, 13, 14, 7, 16, 17, 28, 23, 24, 29, 2, 4, 6, 7, 8, 12, 13, 14, 7, 8, 12, 13, 14, 7, 16, 17, 35]",True,"def merge(array:list, start:int, mid:int, last:int) -> None:  # 1
    k = start  # 2
  # 3
    sub1, sub2 = array[start:mid+1], array[mid+1:last+1]  # 4
      # 5
    i = j = 0  # 6
    while i < len(sub1) and j < len(sub2):  # 7
        if sub1[i] > sub2[j]:  # 8
            array[k] = sub2[j]   # 9
            j += 1  # 10
        else:  # 11
            array[k] = sub1[i]  # 12
            i += 1  # 13
        k += 1  # 14
      # 15
    if i == len(sub1):  # 16
        array[k:last+1] = sub2[j:]  # 17
    else:  # 18
        array[k:last+1] = sub1[i:]  # 19
  # 20
  # 21
def merge_help(array:list, start:int, last:int) -> None:  # 22
    if start == last:  # 23
        return  # 24
    else:  # 25
        mid = (start + last) // 2  # 26
        merge_help(array, start, mid)  # 27
        merge_help(array, mid+1, last)  # 28
        merge(array, start, mid, last)  # 29
  # 30
  # 31
def merge_sort(array:list) -> list:  # 32
    copied = array[:]  # 33
    merge_help(copied, 0, len(array)-1)  # 34
    return copied  # 35"
quick_sort,"[1, 2, 3]",3,"[26, 27, 19, 20, 2, 3, 4, 5, 6, 8, 9, 8, 9, 8, 10, 5, 13, 15, 21, 19, 22, 19, 20, 2, 3, 4, 5, 13, 15, 21, 19, 22, 19, 28]",True,"def partition(array:list, left:int, right:int) -> int:  # 1
    pivot = array[left]  # 2
    low = left + 1  # 3
    high = right  # 4
    while low < high:  # 5
        while array[low] < pivot and low < right:  # 6
            low += 1  # 7
        while array[high] > pivot and high > left:  # 8
            high -= 1  # 9
        if low < high:  # 10
            array[low], array[high] = array[high], array[low]  # 11
  # 12
    if pivot > array[high]:  # 13
        array[left], array[high] = array[high], array[left]  # 14
    return high  # 15
  # 16
  # 17
def quick_help(array:list, left:int, right:int) -> None:  # 18
    if left < right:  # 19
        piv = partition(array, left, right)  # 20
        quick_help(array, left, piv-1)  # 21
        quick_help(array, piv+1, right)  # 22
  # 23
  # 24
def quick_sort(array:list) -> list:  # 25
    copied = array[:]  # 26
    quick_help(copied, 0, len(array)-1)  # 27
    return copied  # 28"
selection_sort,"[1, 2, 3]",3,"[10, 11, 12, 2, 3, 4, 3, 4, 3, 4, 3, 6, 13, 11, 12, 2, 3, 4, 3, 4, 3, 6, 13, 11, 12, 2, 3, 4, 3, 6, 13, 11, 15]",False,"def smallest(array:list, start:int) -> int:  # 1
    smallest = start  # 2
    for i in range(start, len(array)):  # 3
        if array[smallest] > array[i]:  # 4
            smallest = i  # 5
    return smallest  # 6
  # 7
  # 8
def selection_sort(array:list) -> list:  # 9
    copied = array[:]  # 10
    for i in range(len(copied)):  # 11
        small_idx = smallest(copied, i)  # 12
        if copied[small_idx] < copied[i]:  # 13
            copied[small_idx], copied[i] = copied[i], copied[small_idx]  # 14
    return copied  # 15"
shell_sort,"[1, 2, 3]",3,"[8, 9, 10, 11, 12, 15, 16, 2, 3, 2, 15, 16, 2, 3, 2, 3, 2, 15, 17, 18, 11, 19]",False,"def shell_insert(array:list, last:int, gap:int) -> None:  # 1
    for i in range(last, 0, -gap):  # 2
        if array[i-gap] > array[i]:  # 3
            array[i-gap], array[i] = array[i], array[i-gap]  # 4
  # 5
  # 6
def shell_sort(array:list) -> list:  # 7
    copied = array[:]  # 8
    gap = len(copied) // 2  # 9
    i = 0  # 10
    while gap > 0:  # 11
        if i != 0 and gap % 2 == 0:  # 12
            gap += 1  # 13
        ## insertion sort ##  # 14
        for i in range(gap, len(copied)):  # 15
            shell_insert(copied, i, gap)  # 16
        gap = gap // 2  # 17
        i += 1  # 18
    return copied  # 19"
bubble_sort,"[5, 3, 1, 8, 6]",5,"[9, 10, 11, 2, 3, 4, 5, 3, 4, 5, 3, 4, 3, 4, 5, 3, 10, 11, 2, 3, 4, 5, 3, 4, 3, 4, 3, 10, 11, 2, 3, 4, 3, 4, 3, 10, 11, 2, 3, 4, 3, 10, 11, 2, 3, 10, 12]",False,"def bubble(array:list, idx:int) -> None:  # 1
    last = len(array) - idx  # 2
    for i in range(last-1):  # 3
        if array[i] > array[i+1]:  # 4
            array[i], array[i+1] = array[i+1], array[i]  # 5
  # 6
  # 7
def bubble_sort(array:list) -> list:  # 8
    copied = array[:]  # 9
    for i in range(len(copied)):  # 10
        bubble(copied, i)  # 11
    return copied  # 12"
min_heap_sort,"[5, 3, 1, 8, 6]",5,"[17, 18, 20, 21, 2, 3, 4, 6, 8, 11, 20, 21, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 2, 3, 4, 6, 8, 11, 20, 23, 24, 25, 26, 2, 3, 4, 6, 7, 8, 11, 12, 13, 2, 3, 4, 6, 8, 11, 23, 24, 25, 26, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 2, 3, 4, 6, 8, 11, 23, 24, 25, 26, 2, 3, 4, 6, 7, 8, 11, 12, 13, 2, 3, 4, 6, 8, 11, 23, 24, 25, 26, 2, 3, 4, 6, 8, 11, 23, 27]",True,"def min_heapify(array:list, root:int, last:int) -> None:  # 1
    smallest = root  # 2
    left_child = (2 * root) + 1  # 3
    right_child = (2 * root) + 2  # 4
  # 5
    if left_child < last and array[left_child] < array[smallest]:  # 6
        smallest = left_child  # 7
    if right_child < last and array[right_child] < array[smallest]:  # 8
        smallest = right_child  # 9
      # 10
    if smallest != root:  # 11
        array[root], array[smallest] = array[smallest], array[root]  # 12
        min_heapify(array, smallest, last)  # 13
  # 14
  # 15
def min_heap_sort(array:list) -> list:  # 16
    copied = array[:]  # 17
    size = len(copied)  # 18
      # 19
    for i in range(len(copied)//2-1, -1, -1):  # 20
        min_heapify(copied, i, len(copied))  # 21
  # 22
    for i in range(len(copied)-1, 0, -1):  # 23
        copied[0], copied[i] = copied[i], copied[0]  # 24
        size -= 1  # 25
        min_heapify(copied, 0, size)  # 26
    return copied  # 27"
insertion_sort,"[5, 3, 1, 8, 6]",5,"[8, 9, 10, 2, 3, 4, 2, 9, 10, 2, 3, 4, 2, 3, 4, 2, 9, 10, 2, 3, 2, 3, 2, 3, 2, 9, 10, 2, 3, 4, 2, 3, 2, 3, 2, 3, 2, 9, 11]",False,"def insert(array:list, last:int) -> None:  # 1
    for i in range(last, 0, -1):  # 2
        if array[i-1] > array[i]:  # 3
            array[i-1], array[i] = array[i], array[i-1]  # 4
  # 5
  # 6
def insertion_sort(array:list) -> list:  # 7
    copied = array[:]  # 8
    for i in range(1, len(copied)):  # 9
        insert(copied, i)  # 10
    return copied  # 11"
merge_sort,"[5, 3, 1, 8, 6]",5,"[33, 34, 23, 26, 27, 23, 26, 27, 23, 26, 27, 23, 24, 28, 23, 24, 29, 2, 4, 6, 7, 8, 9, 10, 14, 7, 16, 19, 28, 23, 24, 29, 2, 4, 6, 7, 8, 9, 10, 14, 7, 16, 19, 28, 23, 26, 27, 23, 24, 28, 23, 24, 29, 2, 4, 6, 7, 8, 9, 10, 14, 7, 16, 19, 29, 2, 4, 6, 7, 8, 12, 13, 14, 7, 8, 12, 13, 14, 7, 8, 12, 13, 14, 7, 16, 17, 35]",True,"def merge(array:list, start:int, mid:int, last:int) -> None:  # 1
    k = start  # 2
  # 3
    sub1, sub2 = array[start:mid+1], array[mid+1:last+1]  # 4
      # 5
    i = j = 0  # 6
    while i < len(sub1) and j < len(sub2):  # 7
        if sub1[i] > sub2[j]:  # 8
            array[k] = sub2[j]   # 9
            j += 1  # 10
        else:  # 11
            array[k] = sub1[i]  # 12
            i += 1  # 13
        k += 1  # 14
      # 15
    if i == len(sub1):  # 16
        array[k:last+1] = sub2[j:]  # 17
    else:  # 18
        array[k:last+1] = sub1[i:]  # 19
  # 20
  # 21
def merge_help(array:list, start:int, last:int) -> None:  # 22
    if start == last:  # 23
        return  # 24
    else:  # 25
        mid = (start + last) // 2  # 26
        merge_help(array, start, mid)  # 27
        merge_help(array, mid+1, last)  # 28
        merge(array, start, mid, last)  # 29
  # 30
  # 31
def merge_sort(array:list) -> list:  # 32
    copied = array[:]  # 33
    merge_help(copied, 0, len(array)-1)  # 34
    return copied  # 35"
quick_sort,"[5, 3, 1, 8, 6]",5,"[26, 27, 19, 20, 2, 3, 4, 5, 6, 7, 6, 7, 6, 8, 9, 8, 9, 8, 10, 5, 13, 14, 15, 21, 19, 20, 2, 3, 4, 5, 13, 15, 21, 19, 22, 19, 22, 19, 20, 2, 3, 4, 5, 13, 14, 15, 21, 19, 22, 19, 28]",True,"def partition(array:list, left:int, right:int) -> int:  # 1
    pivot = array[left]  # 2
    low = left + 1  # 3
    high = right  # 4
    while low < high:  # 5
        while array[low] < pivot and low < right:  # 6
            low += 1  # 7
        while array[high] > pivot and high > left:  # 8
            high -= 1  # 9
        if low < high:  # 10
            array[low], array[high] = array[high], array[low]  # 11
  # 12
    if pivot > array[high]:  # 13
        array[left], array[high] = array[high], array[left]  # 14
    return high  # 15
  # 16
  # 17
def quick_help(array:list, left:int, right:int) -> None:  # 18
    if left < right:  # 19
        piv = partition(array, left, right)  # 20
        quick_help(array, left, piv-1)  # 21
        quick_help(array, piv+1, right)  # 22
  # 23
  # 24
def quick_sort(array:list) -> list:  # 25
    copied = array[:]  # 26
    quick_help(copied, 0, len(array)-1)  # 27
    return copied  # 28"
selection_sort,"[5, 3, 1, 8, 6]",5,"[10, 11, 12, 2, 3, 4, 3, 4, 5, 3, 4, 5, 3, 4, 3, 4, 3, 6, 13, 14, 11, 12, 2, 3, 4, 3, 4, 3, 4, 3, 4, 3, 6, 13, 11, 12, 2, 3, 4, 3, 4, 3, 4, 3, 6, 13, 11, 12, 2, 3, 4, 3, 4, 5, 3, 6, 13, 14, 11, 12, 2, 3, 4, 3, 6, 13, 11, 15]",False,"def smallest(array:list, start:int) -> int:  # 1
    smallest = start  # 2
    for i in range(start, len(array)):  # 3
        if array[smallest] > array[i]:  # 4
            smallest = i  # 5
    return smallest  # 6
  # 7
  # 8
def selection_sort(array:list) -> list:  # 9
    copied = array[:]  # 10
    for i in range(len(copied)):  # 11
        small_idx = smallest(copied, i)  # 12
        if copied[small_idx] < copied[i]:  # 13
            copied[small_idx], copied[i] = copied[i], copied[small_idx]  # 14
    return copied  # 15"
shell_sort,"[5, 3, 1, 8, 6]",5,"[8, 9, 10, 11, 12, 15, 16, 2, 3, 4, 2, 15, 16, 2, 3, 2, 3, 4, 2, 15, 16, 2, 3, 4, 2, 3, 2, 15, 17, 18, 11, 12, 15, 16, 2, 3, 2, 15, 16, 2, 3, 4, 2, 3, 2, 15, 16, 2, 3, 2, 3, 2, 3, 2, 15, 16, 2, 3, 4, 2, 3, 4, 2, 3, 2, 3, 2, 15, 17, 18, 11, 19]",False,"def shell_insert(array:list, last:int, gap:int) -> None:  # 1
    for i in range(last, 0, -gap):  # 2
        if array[i-gap] > array[i]:  # 3
            array[i-gap], array[i] = array[i], array[i-gap]  # 4
  # 5
  # 6
def shell_sort(array:list) -> list:  # 7
    copied = array[:]  # 8
    gap = len(copied) // 2  # 9
    i = 0  # 10
    while gap > 0:  # 11
        if i != 0 and gap % 2 == 0:  # 12
            gap += 1  # 13
        ## insertion sort ##  # 14
        for i in range(gap, len(copied)):  # 15
            shell_insert(copied, i, gap)  # 16
        gap = gap // 2  # 17
        i += 1  # 18
    return copied  # 19"
bubble_sort,"[9, 7, 5, 3, 1, 8, 6, 4, 2, 0]",10,"[9, 10, 11, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5, 3, 4, 5, 3, 4, 5, 3, 4, 5, 3, 4, 5, 3, 4, 5, 3, 4, 5, 3, 10, 11, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5, 3, 4, 3, 4, 5, 3, 4, 5, 3, 4, 5, 3, 4, 5, 3, 10, 11, 2, 3, 4, 5, 3, 4, 5, 3, 4, 3, 4, 5, 3, 4, 5, 3, 4, 5, 3, 4, 5, 3, 10, 11, 2, 3, 4, 5, 3, 4, 3, 4, 3, 4, 5, 3, 4, 5, 3, 4, 5, 3, 10, 11, 2, 3, 4, 3, 4, 3, 4, 5, 3, 4, 5, 3, 4, 5, 3, 10, 11, 2, 3, 4, 3, 4, 3, 4, 5, 3, 4, 5, 3, 10, 11, 2, 3, 4, 3, 4, 5, 3, 4, 5, 3, 10, 11, 2, 3, 4, 3, 4, 5, 3, 10, 11, 2, 3, 4, 5, 3, 10, 11, 2, 3, 10, 12]",False,"def bubble(array:list, idx:int) -> None:  # 1
    last = len(array) - idx  # 2
    for i in range(last-1):  # 3
        if array[i] > array[i+1]:  # 4
            array[i], array[i+1] = array[i+1], array[i]  # 5
  # 6
  # 7
def bubble_sort(array:list) -> list:  # 8
    copied = array[:]  # 9
    for i in range(len(copied)):  # 10
        bubble(copied, i)  # 11
    return copied  # 12"
min_heap_sort,"[9, 7, 5, 3, 1, 8, 6, 4, 2, 0]",10,"[17, 18, 20, 21, 2, 3, 4, 6, 7, 8, 11, 12, 13, 2, 3, 4, 6, 8, 11, 20, 21, 2, 3, 4, 6, 8, 9, 11, 12, 13, 2, 3, 4, 6, 8, 11, 20, 21, 2, 3, 4, 6, 8, 11, 20, 21, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 2, 3, 4, 6, 7, 8, 11, 12, 13, 2, 3, 4, 6, 8, 11, 20, 21, 2, 3, 4, 6, 7, 8, 11, 12, 13, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 2, 3, 4, 6, 7, 8, 11, 12, 13, 2, 3, 4, 6, 8, 11, 20, 23, 24, 25, 26, 2, 3, 4, 6, 7, 8, 11, 12, 13, 2, 3, 4, 6, 7, 8, 11, 12, 13, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 2, 3, 4, 6, 8, 11, 23, 24, 25, 26, 2, 3, 4, 6, 7, 8, 11, 12, 13, 2, 3, 4, 6, 7, 8, 11, 12, 13, 2, 3, 4, 6, 7, 8, 11, 12, 13, 2, 3, 4, 6, 8, 11, 23, 24, 25, 26, 2, 3, 4, 6, 7, 8, 11, 12, 13, 2, 3, 4, 6, 7, 8, 11, 12, 13, 2, 3, 4, 6, 8, 11, 23, 24, 25, 26, 2, 3, 4, 6, 7, 8, 11, 12, 13, 2, 3, 4, 6, 8, 11, 23, 24, 25, 26, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 2, 3, 4, 6, 8, 11, 23, 24, 25, 26, 2, 3, 4, 6, 7, 8, 11, 12, 13, 2, 3, 4, 6, 8, 11, 23, 24, 25, 26, 2, 3, 4, 6, 7, 8, 11, 12, 13, 2, 3, 4, 6, 8, 11, 23, 24, 25, 26, 2, 3, 4, 6, 8, 11, 23, 24, 25, 26, 2, 3, 4, 6, 8, 11, 23, 27]",True,"def min_heapify(array:list, root:int, last:int) -> None:  # 1
    smallest = root  # 2
    left_child = (2 * root) + 1  # 3
    right_child = (2 * root) + 2  # 4
  # 5
    if left_child < last and array[left_child] < array[smallest]:  # 6
        smallest = left_child  # 7
    if right_child < last and array[right_child] < array[smallest]:  # 8
        smallest = right_child  # 9
      # 10
    if smallest != root:  # 11
        array[root], array[smallest] = array[smallest], array[root]  # 12
        min_heapify(array, smallest, last)  # 13
  # 14
  # 15
def min_heap_sort(array:list) -> list:  # 16
    copied = array[:]  # 17
    size = len(copied)  # 18
      # 19
    for i in range(len(copied)//2-1, -1, -1):  # 20
        min_heapify(copied, i, len(copied))  # 21
  # 22
    for i in range(len(copied)-1, 0, -1):  # 23
        copied[0], copied[i] = copied[i], copied[0]  # 24
        size -= 1  # 25
        min_heapify(copied, 0, size)  # 26
    return copied  # 27"
insertion_sort,"[9, 7, 5, 3, 1, 8, 6, 4, 2, 0]",10,"[8, 9, 10, 2, 3, 4, 2, 9, 10, 2, 3, 4, 2, 3, 4, 2, 9, 10, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 9, 10, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 9, 10, 2, 3, 4, 2, 3, 2, 3, 2, 3, 2, 3, 2, 9, 10, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 2, 3, 2, 3, 2, 9, 10, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 2, 3, 2, 9, 10, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 2, 9, 10, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 9, 11]",False,"def insert(array:list, last:int) -> None:  # 1
    for i in range(last, 0, -1):  # 2
        if array[i-1] > array[i]:  # 3
            array[i-1], array[i] = array[i], array[i-1]  # 4
  # 5
  # 6
def insertion_sort(array:list) -> list:  # 7
    copied = array[:]  # 8
    for i in range(1, len(copied)):  # 9
        insert(copied, i)  # 10
    return copied  # 11"
merge_sort,"[9, 7, 5, 3, 1, 8, 6, 4, 2, 0]",10,"[33, 34, 23, 26, 27, 23, 26, 27, 23, 26, 27, 23, 26, 27, 23, 24, 28, 23, 24, 29, 2, 4, 6, 7, 8, 9, 10, 14, 7, 16, 19, 28, 23, 24, 29, 2, 4, 6, 7, 8, 9, 10, 14, 7, 16, 19, 28, 23, 26, 27, 23, 24, 28, 23, 24, 29, 2, 4, 6, 7, 8, 9, 10, 14, 7, 16, 19, 29, 2, 4, 6, 7, 8, 9, 10, 14, 7, 8, 9, 10, 14, 7, 16, 19, 28, 23, 26, 27, 23, 26, 27, 23, 26, 27, 23, 24, 28, 23, 24, 29, 2, 4, 6, 7, 8, 9, 10, 14, 7, 16, 19, 28, 23, 24, 29, 2, 4, 6, 7, 8, 9, 10, 14, 7, 16, 19, 28, 23, 26, 27, 23, 24, 28, 23, 24, 29, 2, 4, 6, 7, 8, 9, 10, 14, 7, 16, 19, 29, 2, 4, 6, 7, 8, 9, 10, 14, 7, 8, 9, 10, 14, 7, 16, 19, 29, 2, 4, 6, 7, 8, 9, 10, 14, 7, 8, 12, 13, 14, 7, 8, 9, 10, 14, 7, 8, 12, 13, 14, 7, 8, 9, 10, 14, 7, 8, 12, 13, 14, 7, 8, 9, 10, 14, 7, 8, 12, 13, 14, 7, 8, 9, 10, 14, 7, 16, 19, 35]",True,"def merge(array:list, start:int, mid:int, last:int) -> None:  # 1
    k = start  # 2
  # 3
    sub1, sub2 = array[start:mid+1], array[mid+1:last+1]  # 4
      # 5
    i = j = 0  # 6
    while i < len(sub1) and j < len(sub2):  # 7
        if sub1[i] > sub2[j]:  # 8
            array[k] = sub2[j]   # 9
            j += 1  # 10
        else:  # 11
            array[k] = sub1[i]  # 12
            i += 1  # 13
        k += 1  # 14
      # 15
    if i == len(sub1):  # 16
        array[k:last+1] = sub2[j:]  # 17
    else:  # 18
        array[k:last+1] = sub1[i:]  # 19
  # 20
  # 21
def merge_help(array:list, start:int, last:int) -> None:  # 22
    if start == last:  # 23
        return  # 24
    else:  # 25
        mid = (start + last) // 2  # 26
        merge_help(array, start, mid)  # 27
        merge_help(array, mid+1, last)  # 28
        merge(array, start, mid, last)  # 29
  # 30
  # 31
def merge_sort(array:list) -> list:  # 32
    copied = array[:]  # 33
    merge_help(copied, 0, len(array)-1)  # 34
    return copied  # 35"
quick_sort,"[9, 7, 5, 3, 1, 8, 6, 4, 2, 0]",10,"[26, 27, 19, 20, 2, 3, 4, 5, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 8, 10, 5, 13, 14, 15, 21, 19, 20, 2, 3, 4, 5, 6, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 10, 5, 13, 15, 21, 19, 22, 19, 20, 2, 3, 4, 5, 6, 7, 6, 7, 6, 7, 6, 8, 10, 11, 5, 6, 7, 6, 7, 6, 7, 6, 8, 9, 8, 10, 5, 13, 14, 15, 21, 19, 20, 2, 3, 4, 5, 6, 8, 9, 8, 10, 11, 5, 6, 7, 6, 7, 6, 7, 6, 8, 9, 8, 10, 5, 13, 14, 15, 21, 19, 20, 2, 3, 4, 5, 6, 8, 9, 8, 9, 8, 10, 5, 13, 15, 21, 19, 22, 19, 20, 2, 3, 4, 5, 13, 15, 21, 19, 22, 19, 22, 19, 20, 2, 3, 4, 5, 13, 15, 21, 19, 22, 19, 22, 19, 22, 19, 28]",True,"def partition(array:list, left:int, right:int) -> int:  # 1
    pivot = array[left]  # 2
    low = left + 1  # 3
    high = right  # 4
    while low < high:  # 5
        while array[low] < pivot and low < right:  # 6
            low += 1  # 7
        while array[high] > pivot and high > left:  # 8
            high -= 1  # 9
        if low < high:  # 10
            array[low], array[high] = array[high], array[low]  # 11
  # 12
    if pivot > array[high]:  # 13
        array[left], array[high] = array[high], array[left]  # 14
    return high  # 15
  # 16
  # 17
def quick_help(array:list, left:int, right:int) -> None:  # 18
    if left < right:  # 19
        piv = partition(array, left, right)  # 20
        quick_help(array, left, piv-1)  # 21
        quick_help(array, piv+1, right)  # 22
  # 23
  # 24
def quick_sort(array:list) -> list:  # 25
    copied = array[:]  # 26
    quick_help(copied, 0, len(array)-1)  # 27
    return copied  # 28"
selection_sort,"[9, 7, 5, 3, 1, 8, 6, 4, 2, 0]",10,"[10, 11, 12, 2, 3, 4, 3, 4, 5, 3, 4, 5, 3, 4, 5, 3, 4, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 5, 3, 6, 13, 14, 11, 12, 2, 3, 4, 3, 4, 5, 3, 4, 5, 3, 4, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 6, 13, 14, 11, 12, 2, 3, 4, 3, 4, 5, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 5, 3, 4, 3, 6, 13, 14, 11, 12, 2, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 6, 13, 11, 12, 2, 3, 4, 3, 4, 3, 4, 5, 3, 4, 5, 3, 4, 3, 4, 3, 6, 13, 14, 11, 12, 2, 3, 4, 3, 4, 5, 3, 4, 3, 4, 5, 3, 4, 3, 6, 13, 14, 11, 12, 2, 3, 4, 3, 4, 3, 4, 3, 4, 3, 6, 13, 11, 12, 2, 3, 4, 3, 4, 3, 4, 3, 6, 13, 11, 12, 2, 3, 4, 3, 4, 3, 6, 13, 11, 12, 2, 3, 4, 3, 6, 13, 11, 15]",False,"def smallest(array:list, start:int) -> int:  # 1
    smallest = start  # 2
    for i in range(start, len(array)):  # 3
        if array[smallest] > array[i]:  # 4
            smallest = i  # 5
    return smallest  # 6
  # 7
  # 8
def selection_sort(array:list) -> list:  # 9
    copied = array[:]  # 10
    for i in range(len(copied)):  # 11
        small_idx = smallest(copied, i)  # 12
        if copied[small_idx] < copied[i]:  # 13
            copied[small_idx], copied[i] = copied[i], copied[small_idx]  # 14
    return copied  # 15"
shell_sort,"[9, 7, 5, 3, 1, 8, 6, 4, 2, 0]",10,"[8, 9, 10, 11, 12, 15, 16, 2, 3, 4, 2, 15, 16, 2, 3, 4, 2, 3, 4, 2, 15, 16, 2, 3, 4, 2, 3, 4, 2, 15, 16, 2, 3, 4, 2, 3, 4, 2, 15, 16, 2, 3, 4, 2, 3, 4, 2, 15, 17, 18, 11, 12, 13, 15, 16, 2, 3, 4, 2, 15, 16, 2, 3, 4, 2, 3, 4, 2, 15, 16, 2, 3, 2, 3, 2, 15, 16, 2, 3, 4, 2, 3, 2, 15, 16, 2, 3, 4, 2, 3, 2, 3, 2, 15, 16, 2, 3, 4, 2, 3, 4, 2, 3, 2, 15, 16, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 15, 17, 18, 11, 12, 15, 16, 2, 3, 2, 15, 16, 2, 3, 4, 2, 3, 2, 15, 16, 2, 3, 2, 3, 2, 3, 2, 15, 16, 2, 3, 2, 3, 2, 3, 2, 3, 2, 15, 16, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 15, 16, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 15, 16, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 15, 16, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 15, 16, 2, 3, 4, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 15, 17, 18, 11, 19]",False,"def shell_insert(array:list, last:int, gap:int) -> None:  # 1
    for i in range(last, 0, -gap):  # 2
        if array[i-gap] > array[i]:  # 3
            array[i-gap], array[i] = array[i], array[i-gap]  # 4
  # 5
  # 6
def shell_sort(array:list) -> list:  # 7
    copied = array[:]  # 8
    gap = len(copied) // 2  # 9
    i = 0  # 10
    while gap > 0:  # 11
        if i != 0 and gap % 2 == 0:  # 12
            gap += 1  # 13
        ## insertion sort ##  # 14
        for i in range(gap, len(copied)):  # 15
            shell_insert(copied, i, gap)  # 16
        gap = gap // 2  # 17
        i += 1  # 18
    return copied  # 19"
